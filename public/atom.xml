<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PyGo²</title>
  
  <subtitle>一个爱&lt;font size=&quot;5&quot; color=&quot;#BF0060&quot;&gt;老婆&lt;/font&gt;的&lt;font size=&quot;5&quot; color=&quot;#FF4500&quot;&gt;Python&lt;/font&gt;程序猿。。。。。。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pygo2.top/"/>
  <updated>2022-05-01T15:01:46.000Z</updated>
  <id>http://pygo2.top/</id>
  
  <author>
    <name>mingliang.gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【2022】51劳动节</title>
    <link href="http://pygo2.top/articles/61186/"/>
    <id>http://pygo2.top/articles/61186/</id>
    <published>2022-05-01T15:01:46.000Z</published>
    <updated>2022-05-01T15:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<div class="post_cus_note">中国节-51劳动节</div><p><img src="/images/article_laodongjie.jpg" alt></p><a id="more"></a><hr><p>封城中，2022年第三次疫情了，记录一下。</p><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">地点</th></tr></thead><tbody><tr><td style="text-align:center">2022-05-01</td><td style="text-align:center">满洲里</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;post_cus_note&quot;&gt;中国节-51劳动节&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/article_laodongjie.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="节日" scheme="http://pygo2.top/categories/%E8%8A%82%E6%97%A5/"/>
    
    
      <category term="节日" scheme="http://pygo2.top/tags/%E8%8A%82%E6%97%A5/"/>
    
      <category term="中国节" scheme="http://pygo2.top/tags/%E4%B8%AD%E5%9B%BD%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>VUE插件driver.js闪一下问题</title>
    <link href="http://pygo2.top/articles/2813/"/>
    <id>http://pygo2.top/articles/2813/</id>
    <published>2022-04-28T06:55:13.000Z</published>
    <updated>2022-04-28T06:55:13.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>前几天搞了一个VUE页面功能向导，那个是在单独的页面，今天把driver.js引入到一些有功能的页面，启动的时候页面就闪了一下，没有向导功能，google了一下，发现原来是VUE渲染的问题。</p><p><img src="/images/article_vue.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">插件</span><a id="more"></a><hr><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>解决问题的代码，在启动的时候加上setTimeout延迟，就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  this.startGuide()</span><br><span class="line">&#125;, 900)</span><br></pre></td></tr></table></figure></p><p>因为我把向导封装成组件了，其他的页面也可以进行引用，所以我用watch监听父组件传递的值，详细的请参考完整代码。</p><h4 id="新问题"><a href="#新问题" class="headerlink" title="新问题"></a>新问题</h4><p>解决上面闪一下不加载的问题，但是浏览器控制台会有警告日志：<br>[Violation] Forced reflow while executing JavaScript took 131ms<br>还没解决，后续解决了更新。</p><h4 id="完成代码"><a href="#完成代码" class="headerlink" title="完成代码"></a>完成代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Driver from &apos;driver.js&apos; // import driver.js</span><br><span class="line">import &apos;driver.js/dist/driver.min.css&apos; // import driver.js css</span><br><span class="line">import excelMergeSteps from &apos;./steps/excelMergeSteps.js&apos; // import steps js config</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;Guide&apos;,</span><br><span class="line">  emits: [&apos;close-guide&apos;],</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    guide: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      require: true,</span><br><span class="line">      default: false,</span><br><span class="line">      validator(value) &#123;</span><br><span class="line">        return [true, false].includes(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    content: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      require: true,</span><br><span class="line">      default: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      driver: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    guide: function() &#123;</span><br><span class="line">      if (this.guide) &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          this.startGuide()</span><br><span class="line">        &#125;, 900)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // parameter config</span><br><span class="line">    // 官网API：https://www.npmjs.com/package/driver.js</span><br><span class="line">    this.driver = new Driver(&#123;</span><br><span class="line">      className: &apos;scoped-class&apos;, // className to wrap driver.js popover</span><br><span class="line">      animate: true, // 是否设置动画</span><br><span class="line">      opacity: 0.7, // 背景不透明度（0表示只有弹出框，没有覆盖）</span><br><span class="line">      padding: 0, // 元素与边缘之间的距离</span><br><span class="line">      allowClose: true, // 单击覆盖是否应关闭</span><br><span class="line">      overlayClickNext: false, // 点击覆盖是否应该下一步移动</span><br><span class="line">      stageBackground: &apos;#ffffff&apos;, // default: #ffffff，突出显示元素的背景色</span><br><span class="line">      showButtons: true, // 页脚中是否显示控制按钮</span><br><span class="line">      keyboardControl: true, // 允许通过键盘进行控制（退出关闭，箭头键移动）</span><br><span class="line">      doneBtnText: &apos;完成&apos;, // 完成按钮文本</span><br><span class="line">      closeBtnText: &apos;关闭&apos;, // 关闭按钮文本</span><br><span class="line">      prevBtnText: &apos;上一步&apos;, // 上一步按钮文本</span><br><span class="line">      nextBtnText: &apos;下一步&apos;, // 下一步按钮文本</span><br><span class="line">      onHighlightStarted: (Element) =&gt; &#123;&#125;, // 当元素即将高亮显示时调用</span><br><span class="line">      onHighlighted: (Element) =&gt; &#123;&#125;, // 当元素完全高亮显示时调用</span><br><span class="line">      onDeselected: (Element) =&gt; &#123; // 取消选择元素时调用</span><br><span class="line">        this.onDeselected(Element)</span><br><span class="line">      &#125;,</span><br><span class="line">      onReset: (Element) =&gt; &#123;&#125;, // 将要清除覆盖时调用</span><br><span class="line">      onNext: (Element) =&gt; &#123;&#125;, // 在任何步骤上移动到下一步时调用</span><br><span class="line">      onPrevious: (Element) =&gt; &#123;&#125; // 在任何步骤上移动到上一步时调用</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    startGuide() &#123;</span><br><span class="line">      let data = &#123;&#125;</span><br><span class="line">      if (this.content === &apos;excelMerge&apos;) &#123;</span><br><span class="line">        data = excelMergeSteps</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      this.driver.defineSteps(data)</span><br><span class="line">      this.driver.start()</span><br><span class="line">    &#125;,</span><br><span class="line">    onDeselected(element) &#123;</span><br><span class="line">      this.$emit(&apos;close-guide&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;前几天搞了一个VUE页面功能向导，那个是在单独的页面，今天把driver.js引入到一些有功能的页面，启动的时候页面就闪了一下，没有向导功能，google了一下，发现原来是VUE渲染的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_vue.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;插件&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>VUE插件之driver.js</title>
    <link href="http://pygo2.top/articles/29277/"/>
    <id>http://pygo2.top/articles/29277/</id>
    <published>2022-04-24T02:03:11.000Z</published>
    <updated>2022-04-24T02:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>在开发OpenTool开源工具的时候，在个人中心部分有一个向导，上网查了一下用driver.js，记录一下各项用到的内容，挺好用的VUE插件，推荐。</p>          </div><p><img src="/images/article_vue.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">插件</span><a id="more"></a><hr><blockquote><p>作用</p></blockquote><p>用于开发Web页面功能操作向导，官网介绍的很明确，而且也没啥难点，直接贴上代码了。</p><blockquote><p>安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S driver.js</span><br></pre></td></tr></table></figure><blockquote><p>VUE代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;guide-opr-container&quot;&gt;</span><br><span class="line">      &lt;el-button icon=&quot;el-icon-position&quot; type=&quot;primary&quot; @click.prevent.stop=&quot;guide&quot;&gt;</span><br><span class="line">        开启向导</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;guide-data-container&quot; class=&quot;guide-data-container&quot;&gt;</span><br><span class="line">      &lt;aside&gt;</span><br><span class="line">        The guide page is useful for some people who entered the project for the first time. You can briefly introduce the</span><br><span class="line">        features of the project</span><br><span class="line">      &lt;/aside&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Driver from &apos;driver.js&apos; // import driver.js</span><br><span class="line">import &apos;driver.js/dist/driver.min.css&apos; // import driver.js css</span><br><span class="line">import steps from &apos;./guide/steps.js&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;Guide&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      driver: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // parameter config</span><br><span class="line">    // 官网API：https://www.npmjs.com/package/driver.js</span><br><span class="line">    this.driver = new Driver(&#123;</span><br><span class="line">        className: &apos;scoped-class&apos;, // className to wrap driver.js popover</span><br><span class="line">        animate: true, // 是否设置动画</span><br><span class="line">        opacity: 0.7, // 背景不透明度（0表示只有弹出框，没有覆盖）</span><br><span class="line">        padding: 0, // 元素与边缘之间的距离</span><br><span class="line">        allowClose: true, // 单击覆盖是否应关闭</span><br><span class="line">        overlayClickNext: false, // 点击覆盖是否应该下一步移动</span><br><span class="line">        stageBackground: &apos;#ffffff&apos;, // default: #ffffff，突出显示元素的背景色</span><br><span class="line">        showButtons: true, // 页脚中是否显示控制按钮</span><br><span class="line">        keyboardControl: true, // 允许通过键盘进行控制（退出关闭，箭头键移动）</span><br><span class="line">        doneBtnText: &apos;完成&apos;, // 完成按钮文本</span><br><span class="line">        closeBtnText: &apos;关闭&apos;, // 关闭按钮文本</span><br><span class="line">        prevBtnText: &apos;上一步&apos;, // 上一步按钮文本</span><br><span class="line">        nextBtnText: &apos;下一步&apos;, // 下一步按钮文本</span><br><span class="line">        onHighlightStarted: (Element) =&gt; &#123;&#125;, // 当元素即将高亮显示时调用</span><br><span class="line">        onHighlighted: (Element) =&gt; &#123;&#125;, // 当元素完全高亮显示时调用</span><br><span class="line">        onDeselected: (Element) =&gt; &#123; // 取消选择元素时调用</span><br><span class="line">          this.onDeselected(Element)</span><br><span class="line">        &#125;,</span><br><span class="line">        onReset: (Element) =&gt; &#123;&#125;, // 将要清除覆盖时调用</span><br><span class="line">        onNext: (Element) =&gt; &#123;&#125;, // 在任何步骤上移动到下一步时调用</span><br><span class="line">        onPrevious: (Element) =&gt; &#123;&#125; // 在任何步骤上移动到上一步时调用</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    guide() &#123;</span><br><span class="line">      this.driver.defineSteps(steps)</span><br><span class="line">      this.driver.start()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.guide-data-container &#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Steps代码</p></blockquote><p>需要在同等目录下建立一个guide文件夹，再建立一个steps.js文件，用来存放向导的数据，根据不同的模块定制不同的js文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">const steps = [</span><br><span class="line">  &#123;</span><br><span class="line">    element: &apos;#sidebar-container&apos;,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      title: &apos;系统菜单&apos;,</span><br><span class="line">      description: &apos;系统功能菜单列表，分为一级菜单、二级菜单&apos;,</span><br><span class="line">      position: &apos;right&apos;, // position: left, left-center, left-bottom, top,</span><br><span class="line">      // top-center, top-right, right, right-center, right-bottom,</span><br><span class="line">      // bottom, bottom-center, bottom-right, mid-center</span><br><span class="line">      offset: 20</span><br><span class="line">    &#125;,</span><br><span class="line">    padding: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    element: &apos;#guide-opr-container&apos;,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      title: &apos;导航菜单&apos;,</span><br><span class="line">      description: &apos;打开&amp;&amp;关闭导航菜单&apos;,</span><br><span class="line">      position: &apos;bottom&apos;, // position: left, left-center, left-bottom, top,</span><br><span class="line">      // top-center, top-right, right, right-center, right-bottom,</span><br><span class="line">      // bottom, bottom-center, bottom-right, mid-center</span><br><span class="line">      offset: 20</span><br><span class="line">    &#125;,</span><br><span class="line">    padding: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    element: &apos;#guide-data-container&apos;,</span><br><span class="line">    popover: &#123;</span><br><span class="line">      title: &apos;数据域&apos;,</span><br><span class="line">      description: &apos;系统定制功能的数据展示域&apos;,</span><br><span class="line">      position: &apos;bottom&apos;,</span><br><span class="line">      offset: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    padding: 0</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">export default steps</span><br></pre></td></tr></table></figure></p><blockquote><p>学习参考</p></blockquote><p>driver.js官网：<a href="https://kamranahmed.info/driver.js/#single-element-no-popover" target="_blank" rel="noopener">https://kamranahmed.info/driver.js/#single-element-no-popover</a><br>npm查询：<a href="https://www.npmjs.com/package/driver.js" target="_blank" rel="noopener">https://www.npmjs.com/package/driver.js</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;
            &lt;p&gt;在开发OpenTool开源工具的时候，在个人中心部分有一个向导，上网查了一下用driver.js，记录一下各项用到的内容，挺好用的VUE插件，推荐。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_vue.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;插件&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>VUE之Props传值参数</title>
    <link href="http://pygo2.top/articles/52857/"/>
    <id>http://pygo2.top/articles/52857/</id>
    <published>2022-04-18T06:35:14.000Z</published>
    <updated>2022-04-18T06:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>总结一下VUE关于Props的传值。</p>          </div><p><img src="/images/article_vue.jpeg" alt></p><span class="label info">VUE</span><a id="more"></a><hr><blockquote><p>定义</p></blockquote><ul><li>用于父组件对子组件之间的值传递，属于单向传递（父组件-&gt;子组件），不可逆。</li><li>如果对父组件传递过来的值进行赋值，会报错，子组件如想返回父组件传递值，可以用emit。</li></ul><blockquote><p>用途</p></blockquote><p>如定义，就是父组件-&gt;子组件的值传递。</p><blockquote><p>语法糖</p></blockquote><p>父组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;excel-merge-opr</span><br><span class="line">  :show=&quot;mergeDialogStatus&quot;</span><br><span class="line">  :list=&quot;selectList&quot;</span><br><span class="line">  @close-file-merge=&quot;closeFileMerge&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  show: &#123;</span><br><span class="line">    type: Boolean,</span><br><span class="line">    require: true,</span><br><span class="line">    default: false,</span><br><span class="line">    validator(value) &#123;</span><br><span class="line">      return [true, false].includes(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  list: &#123;</span><br><span class="line">    type: Array,</span><br><span class="line">    require: true,</span><br><span class="line">    default: function() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>type<br>数据类型，也就是JS的数据类型：<br>String<br>Number<br>Boolean<br>Array<br>Object<br>Date<br>Function<br>Symbol</p></li><li><p>require<br>是否必须传入，可选值：true false</p></li><li><p>default<br>默认值</p></li><li><p>validator<br>传入值校验</p></li></ul><blockquote><p>学习参考</p></blockquote><p>官网API：<a href="https://v3.cn.vuejs.org/guide/component-props.html#prop-%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">https://v3.cn.vuejs.org/guide/component-props.html#prop-%E7%B1%BB%E5%9E%8B</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;总结一下VUE关于Props的传值。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_vue.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;VUE&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>VUE之scripts的学习</title>
    <link href="http://pygo2.top/articles/20773/"/>
    <id>http://pygo2.top/articles/20773/</id>
    <published>2022-03-13T03:27:49.000Z</published>
    <updated>2022-03-13T03:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<span class="label primary">VUE</span><a id="more"></a><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;vue-cli-service serve --open --mode development&quot;,</span><br><span class="line">  &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;,</span><br><span class="line">  &quot;build:prod&quot;: &quot;vue-cli-service build --report&quot;,</span><br><span class="line">  &quot;build:dev&quot;: &quot;vue-cli-service build --report --mode development&quot;,</span><br><span class="line">  &quot;preview&quot;: &quot;node build/index.js --preview&quot;,</span><br><span class="line">  &quot;new&quot;: &quot;plop&quot;,</span><br><span class="line">  &quot;svgo&quot;: &quot;svgo -f src/icons/svg --config=src/icons/svgo.yml&quot;,</span><br><span class="line">  &quot;test:unit&quot;: &quot;jest --clearCache &amp;&amp; vue-cli-service test:unit&quot;,</span><br><span class="line">  &quot;test:ci&quot;: &quot;npm run lint &amp;&amp; npm run test:unit&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>dev</p></blockquote><p>开发模式启动we服务</p><blockquote><p>lint</p></blockquote><p>检查代码是否符合eslint语法标准</p><blockquote><p>build:prod</p></blockquote><p>打包生产环境</p><blockquote><p>build:dev</p></blockquote><p>打包开发环境</p><blockquote><p>new</p></blockquote><p>新建一个view/router/store，pop是一个插件，感觉挺不错的</p><blockquote><p>test:unit</p></blockquote><p>单元测试</p><blockquote><p>test:ci</p></blockquote><p>语法检查 + 单元测试</p><font size="5.5" color="red"><strong><em>坚持每天学习。。。。。。</em></strong></font>]]></content>
    
    <summary type="html">
    
      &lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>VUE之.env.xxxx环境的应用</title>
    <link href="http://pygo2.top/articles/55138/"/>
    <id>http://pygo2.top/articles/55138/</id>
    <published>2022-03-09T11:34:34.000Z</published>
    <updated>2022-03-09T11:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_vue.jpeg" alt></p><p>最近一段时间在写VUE前端项目，发现有.env.development、.env.production，于是查了下官网，学习总结一下。</p><span class="label primary">VUE</span><a id="more"></a><hr><ul><li><p>.env 全局默认配置文件，不论什么环境都会加载合并</p></li><li><p>.env.development 开发环境下的配置文件</p></li><li><p>.env.production 生产环境下的配置文件</p></li></ul><p>加载顺序：.env -&gt; .env.development  或者 .env -&gt; .env.production<br>后续加载配置文件中的变量会覆盖.env环境中同名的变量，而且上述的文件中可以添加变量，添加的变量在项目中可以通过process.env.XXXXX获取。</p><p>注意：<br><div class="note warning">            <p>属性名必须以VUE_APP_开头，比如VUE_APP_XXX</p>          </div></p><p>开发环境.env.development文件示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># base</span><br><span class="line">NODE_ENV = &apos;development&apos;</span><br><span class="line">PORT = 10002</span><br><span class="line"></span><br><span class="line"># api</span><br><span class="line">VUE_APP_BASE_API = &apos;http://127.0.0.1:9999/&apos;</span><br><span class="line">VUE_APP_AVATAR_API = &apos;/user/avatar&apos;</span><br></pre></td></tr></table></figure></p><p>生产环境.env.production文件示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># base</span><br><span class="line">NODE_ENV = &apos;production&apos;</span><br><span class="line">PORT = 10001</span><br><span class="line"></span><br><span class="line"># api</span><br><span class="line">VUE_APP_BASE_API = &apos;http://121.4.56.169:9999/&apos;</span><br><span class="line">VUE_APP_AVATAR_API = &apos;/user/avatar&apos;</span><br></pre></td></tr></table></figure></p><p>官网详细介绍：<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F</a></p><font size="5.5" color="red"><strong><em>坚持每天学习。。。。。。</em></strong></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_vue.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;最近一段时间在写VUE前端项目，发现有.env.development、.env.production，于是查了下官网，学习总结一下。&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>DB2死锁的处理过程</title>
    <link href="http://pygo2.top/articles/18147/"/>
    <id>http://pygo2.top/articles/18147/</id>
    <published>2022-02-26T12:09:42.000Z</published>
    <updated>2022-02-26T12:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_db2.jpg" alt></p><div class="note primary">            <p>之前项目主要用Mysql、PostgreSQL，这两天DB2数据库发生-668代码问题，有个表锁死了，大概解决了一天，记录一下。提前说明一下，关于-668以及存在解决方案了，这个文章只是为了记录解决的一个过程，尝试各种方法吧。</p>          </div><span class="label warning">DB2</span> <span class="label info">死锁</span><a id="more"></a><hr><ul><li><a href="http://www.mirocn.com/info/details_156.html" target="_blank" rel="noopener">http://www.mirocn.com/info/details_156.html</a></li><li><a href="https://www.cnblogs.com/ruingy/p/3605487.html" target="_blank" rel="noopener">https://www.cnblogs.com/ruingy/p/3605487.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/201010573" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/201010573</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_db2.jpg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;之前项目主要用Mysql、PostgreSQL，这两天DB2数据库发生-668代码问题，有个表锁死了，大概解决了一天，记录一下。提前说明一下，关于-668以及存在解决方案了，这个文章只是为了记录解决的一个过程，尝试各种方法吧。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label warning&quot;&gt;DB2&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;死锁&lt;/span&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://pygo2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="DB2" scheme="http://pygo2.top/tags/DB2/"/>
    
  </entry>
  
  <entry>
    <title>Gitea代码库的环境搭建</title>
    <link href="http://pygo2.top/articles/3042/"/>
    <id>http://pygo2.top/articles/3042/</id>
    <published>2022-02-22T13:43:18.000Z</published>
    <updated>2022-02-22T13:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_gitea.jpg" alt></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><div class="note primary">            <p>最近基于项目管理文件的事情进行了一些探索，发现github不止可以用来更新、存储代码，也可以作为一个文件仓库存放项目的各类文件，对Github、Gitlab、Gogs、Gitea、Gitee进行了一些学习，也查下了网上对Gitea的呼吁声蛮大的，决定对测试服务器上进行部署使用，看看使用的效果咋样。</p><p><font color="red" size="4.5">学习对Gitea的安装与使用</font>！！！。</p>          </div><span class="label danger">Git</span> <span class="label info">Gitea</span> <span class="label primary">文件仓库</span><a id="more"></a><hr><p>面对项目上建立文件管理仓库，首先想到的就是gitub，平常用这个管理代码项目也居多，但是对于安装集中式管理还是分布式管理当时也纠结了一下，对于统一管理SVN也还是不错的，但是个人更倾向与GIT，下面对于遇到的概念或者安装、部署都做一个记录说明。</p><h4 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h4><blockquote><p>集中式版本控制</p></blockquote><p>集中管理的服务器保存所有文件的修订版本，同步更新的时候，需要要先从中央服务器取得最新的版本，然后继续各种处理，最后，再把更新的内容推送给中央服务器。<br>典型的代表SVN，下面是结构图：<br><img src="svn.png" alt></p><blockquote><p>分布式版本控制</p></blockquote><p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<br><img src="git.png" alt></p><h4 id="仓库的选择"><a href="#仓库的选择" class="headerlink" title="仓库的选择"></a>仓库的选择</h4><p>之前的单位用的就是Gitlab用来管理内部代码，功能也十分优秀，但是对于几个人维护的项目有点过于强大，所以选择了Gitea小型，够用而且速度没得说。</p><blockquote><p>Github</p></blockquote><p>全球最大的代码托管平台。</p><blockquote><p>Gitlab</p></blockquote><p>是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的Web服务。</p><blockquote><p>Gogs</p></blockquote><p>目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发，并且支持所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p><blockquote><p>Gitea</p></blockquote><p>Gogs的一个分支（28.8K）。</p><blockquote><p>Gitee</p></blockquote><p>是开源中国（OSChina）推出的基于Git的代码托管服务，包括三个版本，分别是：社区版、企业版和高校版。</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p>对于安装部署Gitea环境，需要提前准备好数据库、GitForWindows、Gitea这3个软件就可以，在项目上我选择了MariaDB数据库。</p><ul><li>Gitea：<a href="https://dl.gitea.io/gitea" target="_blank" rel="noopener">https://dl.gitea.io/gitea</a></li><li>Mariadb数据库：<a href="https://mariadb.org/download/?t=mariadb&amp;o=true&amp;p=mariadb&amp;r=5.5.68" target="_blank" rel="noopener">https://mariadb.org/download/?t=mariadb&amp;o=true&amp;p=mariadb&amp;r=5.5.68</a></li><li>Git客户端：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a></li></ul><p>为了方便大家统一进行下载，也准备了网盘下载地址：<br>链接: <a href="https://pan.baidu.com/s/1AUolZ1FrqLXvnVU1vRr2OA" target="_blank" rel="noopener">https://pan.baidu.com/s/1AUolZ1FrqLXvnVU1vRr2OA</a><br>提取码: pa3s</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>数据库</p></blockquote><p>安装略。<br>初始化语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create database gitea default character set utf8 collate utf8_general_ci;</span><br><span class="line">create user &apos;gitea&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class="line">grant all privileges on gitea.* to &apos;gitea&apos;@&apos;%&apos;;</span><br><span class="line">flush  privileges;</span><br></pre></td></tr></table></figure></p><blockquote><p>GitForWindows</p></blockquote><p>略。</p><p>以上数据库与GitForWindows请自行安装部署，也很简单。</p><blockquote><p>Gitea</p></blockquote><p>Windows安装部署：<br>1.文件放在D:\gitea<br>2.启动：双击下载文件</p><p>可选操作：加入系统服务。<br>添加服务：sc create gitea start= auto binPath= “\”D:\gitea\gitea.exe\” web –config \”D:\gitea\custom\conf\app.ini\””<br>删除服务：sc delete gitea</p><p>Linux安装部署：<br>1.下载<br>2.文件放在/opt/www/gitea/gitea<br>3.修改权限<br>chmod 777 gitea-1.x.x-linux-amd64<br>4.启动 &amp;&amp; 后台启动<br>nohup /opt/www/gitea/gitea web &gt; /dev/null 2&gt;&amp;1 &amp;</p><p>5.其它方式：<br><a href="https://docs.gitea.io/zh-cn/linux-service/" target="_blank" rel="noopener">https://docs.gitea.io/zh-cn/linux-service/</a></p><h4 id="Gitea命令参数"><a href="#Gitea命令参数" class="headerlink" title="Gitea命令参数"></a>Gitea命令参数</h4><p>以下是Gitea命令参数的详情，常用的就是web、dump这2个命令，详情请参考官网：<a href="https://docs.gitea.io/zh-cn/command-line/" target="_blank" rel="noopener">https://docs.gitea.io/zh-cn/command-line/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">COMMANDS:</span><br><span class="line">   web              Start Gitea web server 启动服务</span><br><span class="line">   serv             This command should only be called by SSH shell</span><br><span class="line">   hook             Delegate commands to corresponding Git hooks</span><br><span class="line">   dump             Dump Gitea files and database 备份</span><br><span class="line">   cert             Generate self-signed certificate</span><br><span class="line">   admin            Command line interface to perform common administrative operations</span><br><span class="line">   generate         Command line interface for running generators</span><br><span class="line">   migrate          Migrate the database</span><br><span class="line">   keys             This command queries the Gitea database to get the authorized command for a given ssh key fingerprint</span><br><span class="line">   convert          Convert the database</span><br><span class="line">   doctor           Diagnose problems</span><br><span class="line">   manager          Manage the running gitea process</span><br><span class="line">   embedded         Extract embedded resources</span><br><span class="line">   migrate-storage  Migrate the storage</span><br><span class="line">   docs             Output CLI documentation</span><br><span class="line">   dump-repo        Dump the repository from git/github/gitea/gitlab dump其他仓库</span><br><span class="line">   restore-repo     Restore the repository from disk</span><br><span class="line">   help, h          Shows a list of commands or help for one command</span><br></pre></td></tr></table></figure></p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>访问本机地址：127.0.0.1:3000<br>默认端口：3000</p><p>初始化gitea，进行下一步系统配置。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote><p>数据库配置</p></blockquote><p><img src="pz1.png" alt></p><blockquote><p>基本配置</p></blockquote><p><img src="pz2.png" alt></p><blockquote><p>可选配置</p></blockquote><p><img src="pz3.png" alt></p><blockquote><p>用户配置</p></blockquote><p><img src="pz4.png" alt></p><blockquote><p>管理配置</p></blockquote><p><img src="pz5.png" alt></p><h4 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h4><p>Gitea系统初始化成功会让自动建立一个管理员，对于上述配置后对应的目录也会自动生成。</p><blockquote><p>custom</p></blockquote><p>配置文件目录，包含项目全局、数据库、仓库存储位置、访问服务、服务等各项配置。</p><blockquote><p>data</p></blockquote><p>数据存放目录。</p><blockquote><p>log</p></blockquote><p>日志存储目录。</p><blockquote><p>gitea执行文件</p></blockquote><p>用于启动服务。</p><h4 id="Gitea应用"><a href="#Gitea应用" class="headerlink" title="Gitea应用"></a>Gitea应用</h4><p>具体Gitea的使用也没什么难度，主要就是创建仓库、维护等操作，对于管理员有个管理权限，部署成功后接下来就是对Gitea的探索。<br>创建仓库：</p><ul><li>拥有者</li><li>仓库名称</li><li>描述</li><li>模板</li><li>工单标签</li><li>.gitignore</li><li>授权许可</li><li>默认分支</li><li>签名信任模型</li></ul><p><img src="create.png" alt></p><h4 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h4><p>本来不打算介绍Git的使用了，但是把基础的操作功能记录下，对于初学者也可能比较友好，在Github上搞几个项目Git命令自然而然就会了，基础的功能还是比较好记的，有兴趣的人可以查查官网，命令超级多，而且参数也不少。</p><blockquote><p>GIT初始化仓库</p></blockquote><p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitea创建仓库</span><br><span class="line">git clone 仓库URL</span><br></pre></td></tr></table></figure></p><p>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init 仓库名称</span><br><span class="line">git remote add origin 仓库URL</span><br></pre></td></tr></table></figure></p><blockquote><p>GIT提交暂缓区</p></blockquote><p>全量提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></p><p>指定文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 指定文件</span><br></pre></td></tr></table></figure></p><blockquote><p>GIT提交本地仓库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “提交内容”</span><br></pre></td></tr></table></figure><blockquote><p>GIT提交远程仓库与更新</p></blockquote><p>提交远程仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>更新远程仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><p>这里主要介绍Gitea安装与使用，对于git命令的学习请参考下列学习地址。</p><h4 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h4><p>GIT官网：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a><br>GIT基础学习：<a href="https://www.runoob.com/manual/git-guide/" target="_blank" rel="noopener">https://www.runoob.com/manual/git-guide/</a><br>GIT菜鸟：<a href="https://www.runoob.com/git/git-basic-operations.html" target="_blank" rel="noopener">https://www.runoob.com/git/git-basic-operations.html</a></p><p><img src="/images/article_gitflow.png" alt></p><font color="red" size="4.5">每天坚持学习！</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_gitea.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;最近基于项目管理文件的事情进行了一些探索，发现github不止可以用来更新、存储代码，也可以作为一个文件仓库存放项目的各类文件，对Github、Gitlab、Gogs、Gitea、Gitee进行了一些学习，也查下了网上对Gitea的呼吁声蛮大的，决定对测试服务器上进行部署使用，看看使用的效果咋样。&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;学习对Gitea的安装与使用&lt;/font&gt;！！！。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label danger&quot;&gt;Git&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;Gitea&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;文件仓库&lt;/span&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://pygo2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://pygo2.top/tags/Linux/"/>
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
      <category term="gitea" scheme="http://pygo2.top/tags/gitea/"/>
    
  </entry>
  
  <entry>
    <title>ES6Async与Await方法的学习</title>
    <link href="http://pygo2.top/articles/17064/"/>
    <id>http://pygo2.top/articles/17064/</id>
    <published>2022-02-18T11:39:37.000Z</published>
    <updated>2022-02-18T11:39:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_es6_1.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">ES6</span><a id="more"></a><hr><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>很简单，一句话：<br>async用于异步方法，await用于等待异步方法执行完成。</p><p>所以，await必须搭配async异步方法使用。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><blockquote><p>async</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">async function demo() &#123;</span><br><span class="line">　　return &apos;hello world&apos;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(demo())</span><br><span class="line">console.log(&apos;run...&apos;)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">run...</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>async函数返回的是一个promise对象，对返回值可以进行then…catch操作。</p><blockquote><p>await</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">async function demo2() &#123;</span><br><span class="line">　　 const res = await demo1()</span><br><span class="line">    console.log(&apos;inner run....&apos;)</span><br><span class="line">&#125;</span><br><span class="line">console.log(demo2())</span><br><span class="line">console.log(&apos;run...&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">run...</span><br><span class="line">hello world</span><br><span class="line">inner run....</span><br></pre></td></tr></table></figure><p>await只能在async方面的里面使用，让后面的执行语句或方法要等待当前await方法的结果后才能再执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_es6_1.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;ES6&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>Flask请求参数的总结</title>
    <link href="http://pygo2.top/articles/40970/"/>
    <id>http://pygo2.top/articles/40970/</id>
    <published>2022-02-11T07:22:56.000Z</published>
    <updated>2022-02-11T07:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_python.jpg" alt></p><span class="label primary">Python</span> <span class="label danger">Flask</span><a id="more"></a><hr><p>日常写项目用Flask比较多，不管是写成前端集成的还是单独作为API项目性能都还是很不错的，对Flask API接收参数做一个总结，记录一下。<br>首先，引用flask对象的request。</p><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/user/info&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">@cross_origin(supports_credentials=True)</span><br><span class="line">def info():</span><br><span class="line">    print(request.args)</span><br><span class="line">    print(request.values)</span><br></pre></td></tr></table></figure><blockquote><p>requests.args</p></blockquote><p>平常开发用这个获取get参数比较多，数据类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutableMultiDict([(&apos;rtx&apos;, &apos;mingliang.gao&apos;)])</span><br></pre></td></tr></table></figure></p><blockquote><p>request.values</p></blockquote><p>也可以用这个获取参数，但是values同时获取get以及post请求的参数，数据类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CombinedMultiDict([ImmutableMultiDict([(&apos;rtx&apos;, &apos;mingliang.gao&apos;)]), ImmutableMultiDict([])])</span><br></pre></td></tr></table></figure></p><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/user/info&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">@cross_origin(supports_credentials=True)</span><br><span class="line">def info():</span><br><span class="line">    print(request.form)</span><br><span class="line">    print(request.data)</span><br><span class="line">    print(request.get_json())</span><br></pre></td></tr></table></figure><blockquote><p>requests.form</p></blockquote><p>主要是对于前端form表单的参数获取，数据类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutableMultiDict([])</span><br></pre></td></tr></table></figure></p><blockquote><p>request.data</p></blockquote><p>json数据的获取方式之一，但是数据是byte类型，不建议使用。</p><blockquote><p>request.get_json()</p></blockquote><p>json数据最常用的方式，直接就是dict类型。</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/file/&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">@cross_origin(supports_credentials=True)</span><br><span class="line">def file():</span><br><span class="line">    print(request.files)</span><br></pre></td></tr></table></figure><blockquote><p>requests.files</p></blockquote><p>用files去获取请求的文件，数据流是二进制文件，stream写入文件。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><blockquote><p>requests.method</p></blockquote><p>用来获取当前请求的方法，get、post等。</p><blockquote><p>requests.url</p></blockquote><p>请求的URL地址。</p><blockquote><p>requests.headers</p></blockquote><p>http请求的headers内容，可以直接用get方法进行数据获取，例如：request.headers.get(‘rtx-id’)。</p><blockquote><p>requests.blueprint</p></blockquote><p>获取请求的蓝图。</p><blockquote><p>requests.endpoint</p></blockquote><p>请求方法的endpoint。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_python.jpg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label danger&quot;&gt;Flask&lt;/span&gt;
    
    </summary>
    
      <category term="Python" scheme="http://pygo2.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="Flask" scheme="http://pygo2.top/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Python项目API请求CORS跨域的问题</title>
    <link href="http://pygo2.top/articles/44368/"/>
    <id>http://pygo2.top/articles/44368/</id>
    <published>2022-01-23T15:22:39.000Z</published>
    <updated>2022-01-23T15:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<span class="label info">Python</span> <span class="label primary">CORS</span><div class="note primary">            <p>记录一下前端请求后台造成<strong><em>CORS</em></strong>跨域的问题，本文以Python为开发语言，讲述解决跨域的问题，其他后台API语言也都类似。</p>          </div><a id="more"></a><hr><p>之前的项目差不多都是使用Jijia2模板去搞的web服务，最近新起了一个新项目，打算采用VUE框架写前端，主要使用到了VUE-Element-Admin这个框架，是一位字节跳动的大佬开发的，具体的详情可以去学习：<a href="https://panjiachen.github.io/vue-element-admin-site/zh/" target="_blank" rel="noopener">https://panjiachen.github.io/vue-element-admin-site/zh/</a><br>基于这个前端框架去开发自己的系统，用的Flask去写接口，启动2个项目之后，发现前端get数据失败，打开控制台去看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &apos;http://127.0.0.1:9999/user/info?token=098f6bcd4621d373cade4e832627b4f8&apos; from origin &apos;http://localhost:10000&apos; has been blocked by CORS policy: Response to preflight request doesn&apos;t pass access control check: The &apos;Access-Control-Allow-Origin&apos; header has a value &apos;http://localhost:9527&apos; that is not equal to the supplied origin.</span><br></pre></td></tr></table></figure></p><p>大致的错误就是CORS跨域请求的问题。</p><div class="post_cus_note">解决方案</div><blockquote><p>安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_cros</span><br></pre></td></tr></table></figure><blockquote><p>全局资源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask_cors import CORS, cross_origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SECRET_KEY&apos;] = &apos;PythonNB&apos;</span><br><span class="line">CORS(app, supports_credentials=True)</span><br></pre></td></tr></table></figure><blockquote><p>蓝图资源</p></blockquote><p>这里主要使用了蓝图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from flask_cors import CORS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = Blueprint(&apos;user&apos;, __name__, url_prefix=&apos;/user&apos;)</span><br><span class="line">CORS(user, supports_credentials=True)</span><br></pre></td></tr></table></figure></p><blockquote><p>特定资源</p></blockquote><p>在特定的方法上加上修饰器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask_cors import cross_origin</span><br><span class="line"></span><br><span class="line">@cross_origin(supports_credentials=True)</span><br></pre></td></tr></table></figure></p><p>本人的前端功底比较弱，但是发现学完vue之后，不管是语法还是UI界面都是很不错的，有想学习前端的同学还是推荐学习vue的，<font size="6.5" color="red">坚持每天学习，爱变编程。</font></p>]]></content>
    
    <summary type="html">
    
      &lt;span class=&quot;label info&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;CORS&lt;/span&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;记录一下前端请求后台造成&lt;strong&gt;&lt;em&gt;CORS&lt;/em&gt;&lt;/strong&gt;跨域的问题，本文以Python为开发语言，讲述解决跨域的问题，其他后台API语言也都类似。&lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://pygo2.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="Flask" scheme="http://pygo2.top/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>ES6之扩展运算符三个点</title>
    <link href="http://pygo2.top/articles/3828/"/>
    <id>http://pygo2.top/articles/3828/</id>
    <published>2022-01-20T10:50:58.000Z</published>
    <updated>2022-01-20T10:50:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_es6_1.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">ES6</span><a id="more"></a><hr><p>最近也写了不少的VUE的代码，发现…这个新的运算符用的还是比较多的，总结记录下。<br>总结一句话：</p><font size="6.5" color="red">把参数对象中可以遍历的属性都取出来放在新的对象中，实现多个对象扁平化。</font><p>不多说，直接看例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [&apos;a&apos;, &apos;b&apos;];</span><br><span class="line">const arr2 = [&apos;c&apos;];</span><br><span class="line">const arr3 = [&apos;d&apos;, &apos;e&apos;];</span><br><span class="line">console.log([...arr1, ...arr2, ...arr3])</span><br><span class="line"></span><br><span class="line"># 结果：</span><br><span class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]</span><br></pre></td></tr></table></figure></p><p>以此类推，开发中最常用就是把abc字符串等数据换成Object对象的数据，不过记住原理，万变不离其宗。<br>再来个对象的例子加深下印象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj1 = &#123; name: &apos;mingliang.gao&apos; &#125;</span><br><span class="line">let obj2 = &#123; sex: &apos;man&apos; &#125;</span><br><span class="line">let obj = &#123; ...obj1, ...obj2 &#125;</span><br><span class="line">console.log(obj)</span><br><span class="line"></span><br><span class="line"># 结果：</span><br><span class="line">&#123; name: &apos;mingliang.gao&apos;, sex: &apos;man&apos; &#125;</span><br></pre></td></tr></table></figure></p><p>学习参考：<a href="https://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/array</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_es6_1.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;ES6&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>快速清空大文件</title>
    <link href="http://pygo2.top/articles/27322/"/>
    <id>http://pygo2.top/articles/27322/</id>
    <published>2022-01-16T14:14:34.000Z</published>
    <updated>2022-01-16T14:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_linux_yun.jpg" alt></p><span class="label info">Linux快速清空大文件</span><a id="more"></a><hr><blockquote><p>1.echo</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&quot; &gt; filename.log</span><br></pre></td></tr></table></figure><blockquote><p>2.cat</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/null &gt; access.log</span><br></pre></td></tr></table></figure><blockquote><p>3.dd</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/null of=access.log</span><br></pre></td></tr></table></figure><p>清空的原理就是重定向，方法很多，不局限。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_linux_yun.jpg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;Linux快速清空大文件&lt;/span&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://pygo2.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://pygo2.top/tags/Linux/"/>
    
      <category term="Linux其他篇" scheme="http://pygo2.top/tags/Linux%E5%85%B6%E4%BB%96%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>Javascript对象属性的遍历</title>
    <link href="http://pygo2.top/articles/27964/"/>
    <id>http://pygo2.top/articles/27964/</id>
    <published>2022-01-09T07:20:30.000Z</published>
    <updated>2022-01-09T07:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>7种Javascript对象属性遍历的方法。</p>          </div><p><img src="/images/article_js.jpeg" alt></p><span class="label info">Javascript</span><a id="more"></a><hr><blockquote><p>测试数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;mingliang.gao&apos;;</span><br><span class="line">var demo = &#123;</span><br><span class="line">    name,</span><br><span class="line">    language: &apos;js&apos;,</span><br><span class="line">    say() &#123;</span><br><span class="line">        return (&apos;name: &apos;, name, &apos;language: &apos;, language)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法一：for…in"><a href="#方法一：for…in" class="headerlink" title="方法一：for…in"></a>方法一：for…in</h4><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let k in demo)&#123;</span><br><span class="line">    console.log(k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">language</span><br><span class="line">say</span><br></pre></td></tr></table></figure></p><h4 id="方法二：Object-keys-obj"><a href="#方法二：Object-keys-obj" class="headerlink" title="方法二：Object.keys(obj)"></a>方法二：Object.keys(obj)</h4><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.keys(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法三：Object-getOwnPropertyNames-obj"><a href="#方法三：Object-getOwnPropertyNames-obj" class="headerlink" title="方法三：Object.getOwnPropertyNames(obj)"></a>方法三：Object.getOwnPropertyNames(obj)</h4><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.getOwnPropertyNames(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法四：Object-getOwnPropertySymbols-obj"><a href="#方法四：Object-getOwnPropertySymbols-obj" class="headerlink" title="方法四：Object.getOwnPropertySymbols(obj)"></a>方法四：Object.getOwnPropertySymbols(obj)</h4><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.getOwnPropertySymbols(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法五：Reflect-ownKeys-obj"><a href="#方法五：Reflect-ownKeys-obj" class="headerlink" title="方法五：Reflect.ownKeys(obj)"></a>方法五：Reflect.ownKeys(obj)</h4><p>Reflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Reflect.ownKeys(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法六：getOwnPropertyDescriptor-obj-‘属性名’"><a href="#方法六：getOwnPropertyDescriptor-obj-‘属性名’" class="headerlink" title="方法六：getOwnPropertyDescriptor(obj, ‘属性名’)"></a>方法六：getOwnPropertyDescriptor(obj, ‘属性名’)</h4><p>对象的每个属性都有一个描述对象（Descriptor），Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(getOwnPropertyDescriptor(demo, &apos;name&apos;))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; value: &apos;mingliang.gao&apos;,</span><br><span class="line">  writable: true,</span><br><span class="line">  enumerable: true,</span><br><span class="line">  configurable: true &#125;</span><br></pre></td></tr></table></figure></p><h4 id="方法七：解构赋值"><a href="#方法七：解构赋值" class="headerlink" title="方法七：解构赋值"></a>方法七：解构赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123; name, language, say, ...args &#125; = demo;</span><br><span class="line">console.log(language)</span><br><span class="line">console.log(say)</span><br><span class="line">console.log(args)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mingliang.gao</span><br><span class="line">python</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;7种Javascript对象属性遍历的方法。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_js.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;Javascript&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://pygo2.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DB-Oracle密码过期的处理</title>
    <link href="http://pygo2.top/articles/32323/"/>
    <id>http://pygo2.top/articles/32323/</id>
    <published>2022-01-04T14:08:48.000Z</published>
    <updated>2022-01-04T14:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_oracle.jpeg" alt></p><div class="note info">            <p>今天下午处理了一下Oracle账户过期的问题，记录一下处理的过程，密码过期+杀死死锁。</p>          </div><span class="label info">Oracle</span> <span class="label primary">密码过期</span><a id="more"></a><hr><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>4号刚休完元旦的假期下午来到项目上，发现系统的调度停止了，修改系统状态又重新了一次，发现还是报错，第一个调度都跑不过去，这记录一下，后面杀死死锁进程要考。<br>因为在节前psql已经提示账户密码马上过期了，需要重制密码，没有理会，所以第一时间想到了是这个原因造成的，于是打开plsq输入登录密码，已经登录不上去了，问题已经确定了，那么就针对问题处理问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>具体Oracle数据库运维没什么经验，增删改查用的还是多，但是涉及到操作了，还是要谨慎一些，问了自己的好朋友、同事，以及结合baidu，处理了这次密码过期造成的问题。不多说，看下处理过程。</p><h4 id="切换oracle用户"><a href="#切换oracle用户" class="headerlink" title="切换oracle用户"></a>切换oracle用户</h4><p>登录服务器，切换到oracle用户，执行<strong><em>sqlplus / as sysdba</em></strong>操纵，如果能顺利登录Oracle数据库，直接下下个阶段。<br>我这的Oracle数据库部署的有问题，执行sqlplus发现提示一些错误，具体的错误就不写了，反正就是当时这个Oracle环境遍历没有配置好。打开/home/oracle/.bash_profile环境变量文件，发现以及配置如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">umask 022</span><br><span class="line">ORACLE_HOSTNAME=aespas</span><br><span class="line">ORACLE_BASE=/u01/app/oracle</span><br><span class="line">ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line">export ORACLE_SID=aespas</span><br><span class="line">PATH=$PATH:$HOME/bin:$ORACLE_HOME/bin:$ORACLE_HOME/jdk/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">export ORACLE_HOME</span><br><span class="line">LC_ALL=&quot;en_US&quot;</span><br><span class="line">LANG=&quot;en_US&quot;</span><br><span class="line">export NLS_LANG=&quot;AMERICAN_AMERICA.ZHS16GBK&quot;</span><br><span class="line">export NLS_DATE_FORMAT=&apos;YYYY-MM-DD HH24:MI:SS&apos;</span><br></pre></td></tr></table></figure></p><p>需要执行一下命令使环境变量生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /home/oracle/.bash_profile</span><br></pre></td></tr></table></figure></p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ul><li><p>登录Oracle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure></li><li><p>查看指定的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username, profile from dba_users where username = &apos;PAS&apos;;</span><br></pre></td></tr></table></figure></li><li><p>查看用户指定profile密码有效期设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from dba_profiles s where s.profile=&apos;DEFAULT&apos; AND resource_name=&apos;PASSWORD_LIFE_TIME&apos;;</span><br></pre></td></tr></table></figure></li><li><p>密码有效期由默认的180天修改成“无限制”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure></li><li><p>重新设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER PAS identified by pas</span><br></pre></td></tr></table></figure></li></ul><h4 id="杀死死锁"><a href="#杀死死锁" class="headerlink" title="杀死死锁"></a>杀死死锁</h4><ul><li><p>查看哪些表锁住了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select b.owner,b.object_name,a.session_id,a.locked_mode</span><br><span class="line">from v$locked_object a,dba_objects b</span><br><span class="line">where b.object_id = a.object_id;̨̨̨̨̨</span><br></pre></td></tr></table></figure></li><li><p>查看锁死的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select b.username,b.sid,b.serial#,logon_time</span><br><span class="line">from v$locked_object a,v$session b</span><br><span class="line">where a.session_id = b.sid order by b.logon_time;</span><br></pre></td></tr></table></figure></li><li><p>杀死锁死的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter system kill session &apos;sid,serial&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>其中sid、serial为上一步查询的锁死会话。</p><h4 id="运行调度"><a href="#运行调度" class="headerlink" title="运行调度"></a>运行调度</h4><p>重新运行系统的调度</p><h3 id="注意要点"><a href="#注意要点" class="headerlink" title="注意要点"></a>注意要点</h3><ul><li>sqlplus登录数据库的所有sql建议手动输入，不要粘贴复制。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_oracle.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;今天下午处理了一下Oracle账户过期的问题，记录一下处理的过程，密码过期+杀死死锁。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;密码过期&lt;/span&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://pygo2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://pygo2.top/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm新文件模板配置</title>
    <link href="http://pygo2.top/articles/10539/"/>
    <id>http://pygo2.top/articles/10539/</id>
    <published>2022-01-01T10:05:33.000Z</published>
    <updated>2022-01-01T10:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_pycharm.jpeg" alt></p><div class="note primary">            <font color="red" size="4.5">Pycharm关于文件创建File and Code Template的配置</font>          </div><span class="label default">Python</span> <span class="label primary">Pycharm</span><a id="more"></a><hr><p>今天元旦了，吃过饭后晚上还是写了会代码，用Pycharm写项目每次创建新文件的时候，都有一些文件初始化的默认内容，本人Pycharm File and Code Template配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">describe:</span><br><span class="line"></span><br><span class="line">base_info:</span><br><span class="line">    __author__ = &quot;PyGo&quot;</span><br><span class="line">    __time__ = &quot;$&#123;DATE&#125;&quot;</span><br><span class="line">    __version__ = &quot;v.1.0.0&quot;</span><br><span class="line">    __mail__ = &quot;gaoming971366@163.com&quot;</span><br><span class="line">    __project__ = &quot;$&#123;PROJECT_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">usage:</span><br><span class="line"></span><br><span class="line">design:</span><br><span class="line"></span><br><span class="line">reference urls:</span><br><span class="line"></span><br><span class="line">python version:</span><br><span class="line">    python3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enjoy the good time everyday！！!</span><br><span class="line">Life is short, I use python.</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"># usage: /usr/bin/python $&#123;NAME&#125;.py</span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><p>常用的变量如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ &#123;PROJECT_NAME&#125; - 项目的名称。</span><br><span class="line">$ &#123;NAME&#125; - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。</span><br><span class="line">$ &#123;USER&#125; - 当前用户的登录名。</span><br><span class="line">$ &#123;DATE&#125; - 当前的系统日期。</span><br><span class="line">$ &#123;TIME&#125; - 当前系统时间。</span><br><span class="line">$ &#123;YEAR&#125; - 今年。</span><br><span class="line">$ &#123;MONTH&#125; - 当月。</span><br><span class="line">$ &#123;DAY&#125; - 当月的当天。</span><br><span class="line">$ &#123;HOUR&#125; - 目前的小时。</span><br><span class="line">$ &#123;MINUTE&#125; - 当前分钟。</span><br><span class="line">$ &#123;PRODUCT_NAME&#125; - 将在其中创建文件的IDE的名称。</span><br><span class="line">$ &#123;MONTH_NAME_SHORT&#125; - 月份名称的前3个字母。 示例：1月，2月等</span><br><span class="line">$ &#123;MONTH_NAME_FULL&#125; - 一个月的全名。 示例：1月，2月等</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_pycharm.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;Pycharm关于文件创建File and Code Template的配置&lt;/font&gt;
          &lt;/div&gt;
&lt;span class=&quot;label default&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;Pycharm&lt;/span&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://pygo2.top/categories/IDE/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="IDE" scheme="http://pygo2.top/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>弥留之城的爱丽丝</title>
    <link href="http://pygo2.top/articles/41087/"/>
    <id>http://pygo2.top/articles/41087/</id>
    <published>2021-12-31T07:06:19.000Z</published>
    <updated>2021-12-31T07:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_miliuzhicheng.jpeg" alt></p><div class="post_cus_note">《弥留之城的爱丽丝》</div><span class="label default">死亡游戏</span> <span class="label info">悬疑</span> <span class="label danger">惊悚</span><a id="more"></a><hr><div class="note success">            <p><font size="4" color="red"><strong>简介</strong></font><br>目前只有第一季，但是蛮好看的，在第一季最后一节留了彩蛋，等待第二季</p>          </div><blockquote><p>推荐指数</p></blockquote><pre><code>⭐️⭐️⭐️⭐️</code></pre><blockquote><p>主线剧情</p></blockquote><p>男主、女主组队通关现实中的死亡游戏。</p><blockquote><p>观看地址</p></blockquote><p><strong><em>baidu</em></strong>自行下载<br>或者<br>链接: <a href="https://pan.baidu.com/s/1ju1E4FfIMlZs5Acn2Ec8Ag" target="_blank" rel="noopener">https://pan.baidu.com/s/1ju1E4FfIMlZs5Acn2Ec8Ag</a><br>提取码: v44f。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_miliuzhicheng.jpeg&quot; alt&gt;&lt;/p&gt;

&lt;div class=&quot;post_cus_note&quot;&gt;《弥留之城的爱丽丝》&lt;/div&gt;

&lt;span class=&quot;label default&quot;&gt;死亡游戏&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;悬疑&lt;/span&gt; &lt;span class=&quot;label danger&quot;&gt;惊悚&lt;/span&gt;
    
    </summary>
    
      <category term="影视说" scheme="http://pygo2.top/categories/%E5%BD%B1%E8%A7%86%E8%AF%B4/"/>
    
    
      <category term="电视剧" scheme="http://pygo2.top/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>Github个人Overview展示</title>
    <link href="http://pygo2.top/articles/61451/"/>
    <id>http://pygo2.top/articles/61451/</id>
    <published>2021-12-26T11:47:04.000Z</published>
    <updated>2021-12-26T11:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>前几天看到一个项目，在README.md上有彩色标签、Github个人统计信息，挺有趣的，然后在Github上查到有一个专门的项目用来做这个，学习记录一下。</p>          </div><p><img src="/images/article_github_1.webp" alt></p><span class="label info">git</span><a id="more"></a><hr><p>先来看下原本的Github Overview试图：<br><img src="overview_src.png" alt></p><p>接下来，对其进行优化。</p><blockquote><p>创建新的Repository</p></blockquote><p>首先，在Github中创建一个新的repository，Owner与Repository name保持一致。比如你的Owner为ABC，那么就创建一个ABC仓库。<br>选择Public、Add a README file选项。</p><blockquote><p>编辑README.md文件</p></blockquote><p>创建好了之后，直接对仓库README.md文件进行编辑，这里简单对标签、GitHub Readme Stats进行举例，详情请查阅官网，本人也是探索阶段。</p><blockquote><p>README.md标签</p></blockquote><p>打开标签牌官网：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a></p><p><img src="shields.io.png" alt></p><p>最简单标签：</p><ul><li>label：标签体的前半部分，比如：Development Language</li><li>message：标签体的后半部分，比如：Python</li><li>color：选择一个颜色，也可以输入十六进制代码</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://img.shields.io/badge/Development%20Language-Python-FF0000)</span><br></pre></td></tr></table></figure></p><p><img src="https://img.shields.io/badge/Development%20Language-Python-FF0000" alt="标签牌"></p><blockquote><p>GitHub统计</p></blockquote><p>官网：<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md" target="_blank" rel="noopener">https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md</a><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![GitHub stats](https://github-readme-stats.vercel.app/api?username=GIS90&amp;theme=highcontrast&amp;show_icons=true&amp;hide=contribs,prs&amp;count_private=true)</span><br></pre></td></tr></table></figure></p><p><img src="https://github-readme-stats.vercel.app/api?username=GIS90&amp;theme=highcontrast&amp;show_icons=true&amp;hide=contribs,prs&amp;count_private=true" alt="GitHub stats"></p><p>官网介绍的很明白，请自行查阅。</p><p>看下最终效果：<br><img src="overview_tar.png" alt></p><blockquote><p>学习参考</p></blockquote><p>README标签：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a><br>GitHub统计：<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md" target="_blank" rel="noopener">https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md</a></p><font color="red" size="6.5">Enjoy the good life everyday！</font>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;前几天看到一个项目，在README.md上有彩色标签、Github个人统计信息，挺有趣的，然后在Github上查到有一个专门的项目用来做这个，学习记录一下。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_github_1.webp&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习</title>
    <link href="http://pygo2.top/articles/56016/"/>
    <id>http://pygo2.top/articles/56016/</id>
    <published>2021-12-20T13:30:51.000Z</published>
    <updated>2021-12-20T13:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_es6.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">ES6</span><a id="more"></a><hr><p>最近学习了VUE3，所有的语法是以ECMAScript6为基础的，参考学习了廖雪峰的ES6教程，<strong><em>URL</em></strong>如下：</p><p><a href="https://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/intro</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_es6.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;ES6&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="转载文章" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/%E8%BD%AC%E8%BD%BD%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>GIT删除tag</title>
    <link href="http://pygo2.top/articles/53395/"/>
    <id>http://pygo2.top/articles/53395/</id>
    <published>2021-12-15T12:15:25.000Z</published>
    <updated>2021-12-15T12:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <font color="red" size="4.5">总结一下GIT删除本地tag以及远程tag的操作！！！。</font>          </div><span class="label info">git</span> <span class="label success">tag</span><a id="more"></a><hr><p>示例中以v-2021-12-15-01为tag示例。</p><h4 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v-2021-12-15-01</span><br></pre></td></tr></table></figure><p><img src="loca_del.png" alt></p><h4 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/v-2021-12-15-01</span><br></pre></td></tr></table></figure><p><img src="remote_show.png" alt></p><h4 id="显示本地tag"><a href="#显示本地tag" class="headerlink" title="显示本地tag"></a>显示本地tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -l</span><br></pre></td></tr></table></figure><p><img src="local_show.png" alt></p><h4 id="显示远程tag"><a href="#显示远程tag" class="headerlink" title="显示远程tag"></a>显示远程tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show-ref --tag</span><br></pre></td></tr></table></figure><p><img src="remote_del.png" alt></p><h4 id="删除多个"><a href="#删除多个" class="headerlink" title="删除多个"></a>删除多个</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本地</span><br><span class="line">git tag -l | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git tag -d</span><br><span class="line"></span><br><span class="line"># 远程</span><br><span class="line">git show-ref --tag | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git push origin :refs/tags/</span><br></pre></td></tr></table></figure><p>还没尝试，只是觉得这么可以实现，待测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;总结一下GIT删除本地tag以及远程tag的操作！！！。&lt;/font&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;label success&quot;&gt;tag&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
</feed>
