<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PyGo²</title>
  
  <subtitle>一个爱&lt;font size=&quot;5&quot; color=&quot;#BF0060&quot;&gt;老婆&lt;/font&gt;的&lt;font size=&quot;5&quot; color=&quot;#FF4500&quot;&gt;Python&lt;/font&gt;程序猿。。。。。。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pygo2.top/"/>
  <updated>2022-02-26T12:09:42.000Z</updated>
  <id>http://pygo2.top/</id>
  
  <author>
    <name>mingliang.gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DB2死锁的处理过程</title>
    <link href="http://pygo2.top/articles/18147/"/>
    <id>http://pygo2.top/articles/18147/</id>
    <published>2022-02-26T12:09:42.000Z</published>
    <updated>2022-02-26T12:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<font size="6.5" color="red">学习中。。。。。。</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;6.5&quot; color=&quot;red&quot;&gt;学习中。。。。。。&lt;/font&gt;

      
    
    </summary>
    
      <category term="数据库" scheme="http://pygo2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="DB2" scheme="http://pygo2.top/tags/DB2/"/>
    
  </entry>
  
  <entry>
    <title>gitea代码库的环境搭建</title>
    <link href="http://pygo2.top/articles/3042/"/>
    <id>http://pygo2.top/articles/3042/</id>
    <published>2022-02-22T13:43:18.000Z</published>
    <updated>2022-02-22T13:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<font size="6.5" color="red">学习中。。。。。。</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;6.5&quot; color=&quot;red&quot;&gt;学习中。。。。。。&lt;/font&gt;

      
    
    </summary>
    
      <category term="服务器" scheme="http://pygo2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://pygo2.top/tags/Linux/"/>
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
      <category term="gitea" scheme="http://pygo2.top/tags/gitea/"/>
    
  </entry>
  
  <entry>
    <title>ES6Async与Await方法的学习</title>
    <link href="http://pygo2.top/articles/17064/"/>
    <id>http://pygo2.top/articles/17064/</id>
    <published>2022-02-18T11:39:37.000Z</published>
    <updated>2022-02-18T11:39:37.000Z</updated>
    
    <content type="html"><![CDATA[<font size="6.5" color="red">学习中。。。。。。</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;6.5&quot; color=&quot;red&quot;&gt;学习中。。。。。。&lt;/font&gt;

      
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>Flask请求参数的总结</title>
    <link href="http://pygo2.top/articles/40970/"/>
    <id>http://pygo2.top/articles/40970/</id>
    <published>2022-02-11T07:22:56.000Z</published>
    <updated>2022-02-11T07:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_python.jpg" alt></p><span class="label primary">Python</span> <span class="label danger">Flask</span><a id="more"></a><hr><p>日常写项目用Flask比较多，不管是写成前端集成的还是单独作为API项目性能都还是很不错的，对Flask API接收参数做一个总结，记录一下。<br>首先，引用flask对象的request。</p><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/user/info&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">@cross_origin(supports_credentials=True)</span><br><span class="line">def info():</span><br><span class="line">    print(request.args)</span><br><span class="line">    print(request.values)</span><br></pre></td></tr></table></figure><blockquote><p>requests.args</p></blockquote><p>平常开发用这个获取get参数比较多，数据类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutableMultiDict([(&apos;rtx&apos;, &apos;mingliang.gao&apos;)])</span><br></pre></td></tr></table></figure></p><blockquote><p>request.values</p></blockquote><p>也可以用这个获取参数，但是values同时获取get以及post请求的参数，数据类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CombinedMultiDict([ImmutableMultiDict([(&apos;rtx&apos;, &apos;mingliang.gao&apos;)]), ImmutableMultiDict([])])</span><br></pre></td></tr></table></figure></p><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/user/info&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">@cross_origin(supports_credentials=True)</span><br><span class="line">def info():</span><br><span class="line">    print(request.form)</span><br><span class="line">    print(request.data)</span><br><span class="line">    print(request.get_json())</span><br></pre></td></tr></table></figure><blockquote><p>requests.form</p></blockquote><p>主要是对于前端form表单的参数获取，数据类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutableMultiDict([])</span><br></pre></td></tr></table></figure></p><blockquote><p>request.data</p></blockquote><p>json数据的获取方式之一，但是数据是byte类型，不建议使用。</p><blockquote><p>request.get_json()</p></blockquote><p>json数据最常用的方式，直接就是dict类型。</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/file/&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">@cross_origin(supports_credentials=True)</span><br><span class="line">def file():</span><br><span class="line">    print(request.files)</span><br></pre></td></tr></table></figure><blockquote><p>requests.files</p></blockquote><p>用files去获取请求的文件，数据流是二进制文件，stream写入文件。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><blockquote><p>requests.method</p></blockquote><p>用来获取当前请求的方法，get、post等。</p><blockquote><p>requests.url</p></blockquote><p>请求的URL地址。</p><blockquote><p>requests.headers</p></blockquote><p>http请求的headers内容，可以直接用get方法进行数据获取，例如：request.headers.get(‘rtx-id’)。</p><blockquote><p>requests.blueprint</p></blockquote><p>获取请求的蓝图。</p><blockquote><p>requests.endpoint</p></blockquote><p>请求方法的endpoint。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_python.jpg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label danger&quot;&gt;Flask&lt;/span&gt;
    
    </summary>
    
      <category term="Python" scheme="http://pygo2.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="Flask" scheme="http://pygo2.top/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Python项目API请求CORS跨域的问题</title>
    <link href="http://pygo2.top/articles/44368/"/>
    <id>http://pygo2.top/articles/44368/</id>
    <published>2022-01-23T15:22:39.000Z</published>
    <updated>2022-01-23T15:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<span class="label info">Python</span> <span class="label primary">CORS</span><div class="note primary">            <p>记录一下前端请求后台造成<strong><em>CORS</em></strong>跨域的问题，本文以Python为开发语言，讲述解决跨域的问题，其他后台API语言也都类似。</p>          </div><a id="more"></a><hr><p>之前的项目差不多都是使用Jijia2模板去搞的web服务，最近新起了一个新项目，打算采用VUE框架写前端，主要使用到了VUE-Element-Admin这个框架，是一位字节跳动的大佬开发的，具体的详情可以去学习：<a href="https://panjiachen.github.io/vue-element-admin-site/zh/" target="_blank" rel="noopener">https://panjiachen.github.io/vue-element-admin-site/zh/</a><br>基于这个前端框架去开发自己的系统，用的Flask去写接口，启动2个项目之后，发现前端get数据失败，打开控制台去看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &apos;http://127.0.0.1:9999/user/info?token=098f6bcd4621d373cade4e832627b4f8&apos; from origin &apos;http://localhost:10000&apos; has been blocked by CORS policy: Response to preflight request doesn&apos;t pass access control check: The &apos;Access-Control-Allow-Origin&apos; header has a value &apos;http://localhost:9527&apos; that is not equal to the supplied origin.</span><br></pre></td></tr></table></figure></p><p>大致的错误就是CORS跨域请求的问题。</p><div class="post_cus_note">解决方案</div><blockquote><p>安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_cros</span><br></pre></td></tr></table></figure><blockquote><p>全局资源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask_cors import CORS, cross_origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SECRET_KEY&apos;] = &apos;PythonNB&apos;</span><br><span class="line">CORS(app, supports_credentials=True)</span><br></pre></td></tr></table></figure><blockquote><p>蓝图资源</p></blockquote><p>这里主要使用了蓝图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from flask_cors import CORS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = Blueprint(&apos;user&apos;, __name__, url_prefix=&apos;/user&apos;)</span><br><span class="line">CORS(user, supports_credentials=True)</span><br></pre></td></tr></table></figure></p><blockquote><p>特定资源</p></blockquote><p>在特定的方法上加上修饰器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask_cors import cross_origin</span><br><span class="line"></span><br><span class="line">@cross_origin(supports_credentials=True)</span><br></pre></td></tr></table></figure></p><p>本人的前端功底比较弱，但是发现学完vue之后，不管是语法还是UI界面都是很不错的，有想学习前端的同学还是推荐学习vue的，<font size="6.5" color="red">坚持每天学习，爱变编程。</font></p>]]></content>
    
    <summary type="html">
    
      &lt;span class=&quot;label info&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;CORS&lt;/span&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;记录一下前端请求后台造成&lt;strong&gt;&lt;em&gt;CORS&lt;/em&gt;&lt;/strong&gt;跨域的问题，本文以Python为开发语言，讲述解决跨域的问题，其他后台API语言也都类似。&lt;/p&gt;
          &lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://pygo2.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="Flask" scheme="http://pygo2.top/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>ES6之扩展运算符三个点</title>
    <link href="http://pygo2.top/articles/3828/"/>
    <id>http://pygo2.top/articles/3828/</id>
    <published>2022-01-20T10:50:58.000Z</published>
    <updated>2022-01-20T10:50:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_es6_1.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">ES6</span><a id="more"></a><hr><p>最近也写了不少的VUE的代码，发现…这个新的运算符用的还是比较多的，总结记录下。<br>总结一句话：</p><font size="6.5" color="red">把参数对象中可以遍历的属性都取出来放在新的对象中，实现多个对象扁平化。</font><p>不多说，直接看例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [&apos;a&apos;, &apos;b&apos;];</span><br><span class="line">const arr2 = [&apos;c&apos;];</span><br><span class="line">const arr3 = [&apos;d&apos;, &apos;e&apos;];</span><br><span class="line">console.log([...arr1, ...arr2, ...arr3])</span><br><span class="line"></span><br><span class="line"># 结果：</span><br><span class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]</span><br></pre></td></tr></table></figure></p><p>以此类推，开发中最常用就是把abc字符串等数据换成Object对象的数据，不过记住原理，万变不离其宗。<br>再来个对象的例子加深下印象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj1 = &#123; name: &apos;mingliang.gao&apos; &#125;</span><br><span class="line">let obj2 = &#123; sex: &apos;man&apos; &#125;</span><br><span class="line">let obj = &#123; ...obj1, ...obj2 &#125;</span><br><span class="line">console.log(obj)</span><br><span class="line"></span><br><span class="line"># 结果：</span><br><span class="line">&#123; name: &apos;mingliang.gao&apos;, sex: &apos;man&apos; &#125;</span><br></pre></td></tr></table></figure></p><p>学习参考：<a href="https://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/array</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_es6_1.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;ES6&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>快速清空大文件</title>
    <link href="http://pygo2.top/articles/27322/"/>
    <id>http://pygo2.top/articles/27322/</id>
    <published>2022-01-16T14:14:34.000Z</published>
    <updated>2022-01-16T14:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_linux_yun.jpg" alt></p><span class="label info">Linux快速清空大文件</span><a id="more"></a><hr><blockquote><p>1.echo</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&quot; &gt; filename.log</span><br></pre></td></tr></table></figure><blockquote><p>2.cat</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/null &gt; access.log</span><br></pre></td></tr></table></figure><blockquote><p>3.dd</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/null of=access.log</span><br></pre></td></tr></table></figure><p>清空的原理就是重定向，方法很多，不局限。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_linux_yun.jpg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;Linux快速清空大文件&lt;/span&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://pygo2.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://pygo2.top/tags/Linux/"/>
    
      <category term="Linux其他篇" scheme="http://pygo2.top/tags/Linux%E5%85%B6%E4%BB%96%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>Javascript对象属性的遍历</title>
    <link href="http://pygo2.top/articles/27964/"/>
    <id>http://pygo2.top/articles/27964/</id>
    <published>2022-01-09T07:20:30.000Z</published>
    <updated>2022-01-09T07:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>7种Javascript对象属性遍历的方法。</p>          </div><p><img src="/images/article_js.jpeg" alt></p><span class="label info">Javascript</span><a id="more"></a><hr><blockquote><p>测试数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;mingliang.gao&apos;;</span><br><span class="line">var demo = &#123;</span><br><span class="line">    name,</span><br><span class="line">    language: &apos;js&apos;,</span><br><span class="line">    say() &#123;</span><br><span class="line">        return (&apos;name: &apos;, name, &apos;language: &apos;, language)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法一：for…in"><a href="#方法一：for…in" class="headerlink" title="方法一：for…in"></a>方法一：for…in</h4><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let k in demo)&#123;</span><br><span class="line">    console.log(k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">language</span><br><span class="line">say</span><br></pre></td></tr></table></figure></p><h4 id="方法二：Object-keys-obj"><a href="#方法二：Object-keys-obj" class="headerlink" title="方法二：Object.keys(obj)"></a>方法二：Object.keys(obj)</h4><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.keys(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法三：Object-getOwnPropertyNames-obj"><a href="#方法三：Object-getOwnPropertyNames-obj" class="headerlink" title="方法三：Object.getOwnPropertyNames(obj)"></a>方法三：Object.getOwnPropertyNames(obj)</h4><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.getOwnPropertyNames(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法四：Object-getOwnPropertySymbols-obj"><a href="#方法四：Object-getOwnPropertySymbols-obj" class="headerlink" title="方法四：Object.getOwnPropertySymbols(obj)"></a>方法四：Object.getOwnPropertySymbols(obj)</h4><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.getOwnPropertySymbols(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法五：Reflect-ownKeys-obj"><a href="#方法五：Reflect-ownKeys-obj" class="headerlink" title="方法五：Reflect.ownKeys(obj)"></a>方法五：Reflect.ownKeys(obj)</h4><p>Reflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Reflect.ownKeys(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法六：getOwnPropertyDescriptor-obj-‘属性名’"><a href="#方法六：getOwnPropertyDescriptor-obj-‘属性名’" class="headerlink" title="方法六：getOwnPropertyDescriptor(obj, ‘属性名’)"></a>方法六：getOwnPropertyDescriptor(obj, ‘属性名’)</h4><p>对象的每个属性都有一个描述对象（Descriptor），Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(getOwnPropertyDescriptor(demo, &apos;name&apos;))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; value: &apos;mingliang.gao&apos;,</span><br><span class="line">  writable: true,</span><br><span class="line">  enumerable: true,</span><br><span class="line">  configurable: true &#125;</span><br></pre></td></tr></table></figure></p><h4 id="方法七：解构赋值"><a href="#方法七：解构赋值" class="headerlink" title="方法七：解构赋值"></a>方法七：解构赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123; name, language, say, ...args &#125; = demo;</span><br><span class="line">console.log(language)</span><br><span class="line">console.log(say)</span><br><span class="line">console.log(args)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mingliang.gao</span><br><span class="line">python</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;7种Javascript对象属性遍历的方法。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_js.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;Javascript&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://pygo2.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DB-Oracle密码过期的处理</title>
    <link href="http://pygo2.top/articles/32323/"/>
    <id>http://pygo2.top/articles/32323/</id>
    <published>2022-01-04T14:08:48.000Z</published>
    <updated>2022-01-04T14:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_oracle.jpeg" alt></p><div class="note info">            <p>今天下午处理了一下Oracle账户过期的问题，记录一下处理的过程，密码过期+杀死死锁。</p>          </div><span class="label info">Oracle</span> <span class="label primary">密码过期</span><a id="more"></a><hr><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>4号刚休完元旦的假期下午来到项目上，发现系统的调度停止了，修改系统状态又重新了一次，发现还是报错，第一个调度都跑不过去，这记录一下，后面杀死死锁进程要考。<br>因为在节前psql已经提示账户密码马上过期了，需要重制密码，没有理会，所以第一时间想到了是这个原因造成的，于是打开plsq输入登录密码，已经登录不上去了，问题已经确定了，那么就针对问题处理问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>具体Oracle数据库运维没什么经验，增删改查用的还是多，但是涉及到操作了，还是要谨慎一些，问了自己的好朋友、同事，以及结合baidu，处理了这次密码过期造成的问题。不多说，看下处理过程。</p><h4 id="切换oracle用户"><a href="#切换oracle用户" class="headerlink" title="切换oracle用户"></a>切换oracle用户</h4><p>登录服务器，切换到oracle用户，执行<strong><em>sqlplus / as sysdba</em></strong>操纵，如果能顺利登录Oracle数据库，直接下下个阶段。<br>我这的Oracle数据库部署的有问题，执行sqlplus发现提示一些错误，具体的错误就不写了，反正就是当时这个Oracle环境遍历没有配置好。打开/home/oracle/.bash_profile环境变量文件，发现以及配置如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">umask 022</span><br><span class="line">ORACLE_HOSTNAME=aespas</span><br><span class="line">ORACLE_BASE=/u01/app/oracle</span><br><span class="line">ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line">export ORACLE_SID=aespas</span><br><span class="line">PATH=$PATH:$HOME/bin:$ORACLE_HOME/bin:$ORACLE_HOME/jdk/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">export ORACLE_HOME</span><br><span class="line">LC_ALL=&quot;en_US&quot;</span><br><span class="line">LANG=&quot;en_US&quot;</span><br><span class="line">export NLS_LANG=&quot;AMERICAN_AMERICA.ZHS16GBK&quot;</span><br><span class="line">export NLS_DATE_FORMAT=&apos;YYYY-MM-DD HH24:MI:SS&apos;</span><br></pre></td></tr></table></figure></p><p>需要执行一下命令使环境变量生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /home/oracle/.bash_profile</span><br></pre></td></tr></table></figure></p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ul><li><p>登录Oracle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure></li><li><p>查看指定的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username, profile from dba_users where username = &apos;PAS&apos;;</span><br></pre></td></tr></table></figure></li><li><p>查看用户指定profile密码有效期设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from dba_profiles s where s.profile=&apos;DEFAULT&apos; AND resource_name=&apos;PASSWORD_LIFE_TIME&apos;;</span><br></pre></td></tr></table></figure></li><li><p>密码有效期由默认的180天修改成“无限制”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure></li><li><p>重新设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER PAS identified by pas</span><br></pre></td></tr></table></figure></li></ul><h4 id="杀死死锁"><a href="#杀死死锁" class="headerlink" title="杀死死锁"></a>杀死死锁</h4><ul><li><p>查看哪些表锁住了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select b.owner,b.object_name,a.session_id,a.locked_mode</span><br><span class="line">from v$locked_object a,dba_objects b</span><br><span class="line">where b.object_id = a.object_id;̨̨̨̨̨</span><br></pre></td></tr></table></figure></li><li><p>查看锁死的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select b.username,b.sid,b.serial#,logon_time</span><br><span class="line">from v$locked_object a,v$session b</span><br><span class="line">where a.session_id = b.sid order by b.logon_time;</span><br></pre></td></tr></table></figure></li><li><p>杀死锁死的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter system kill session &apos;sid,serial&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>其中sid、serial为上一步查询的锁死会话。</p><h4 id="运行调度"><a href="#运行调度" class="headerlink" title="运行调度"></a>运行调度</h4><p>重新运行系统的调度</p><h3 id="注意要点"><a href="#注意要点" class="headerlink" title="注意要点"></a>注意要点</h3><ul><li>sqlplus登录数据库的所有sql建议手动输入，不要粘贴复制。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_oracle.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;今天下午处理了一下Oracle账户过期的问题，记录一下处理的过程，密码过期+杀死死锁。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;密码过期&lt;/span&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://pygo2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://pygo2.top/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm新文件模板配置</title>
    <link href="http://pygo2.top/articles/10539/"/>
    <id>http://pygo2.top/articles/10539/</id>
    <published>2022-01-01T10:05:33.000Z</published>
    <updated>2022-01-01T10:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_pycharm.jpeg" alt></p><div class="note primary">            <font color="red" size="4.5">Pycharm关于文件创建File and Code Template的配置</font>          </div><span class="label default">Python</span> <span class="label primary">Pycharm</span><a id="more"></a><hr><p>今天元旦了，吃过饭后晚上还是写了会代码，用Pycharm写项目每次创建新文件的时候，都有一些文件初始化的默认内容，本人Pycharm File and Code Template配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">describe:</span><br><span class="line"></span><br><span class="line">base_info:</span><br><span class="line">    __author__ = &quot;PyGo&quot;</span><br><span class="line">    __time__ = &quot;$&#123;DATE&#125;&quot;</span><br><span class="line">    __version__ = &quot;v.1.0.0&quot;</span><br><span class="line">    __mail__ = &quot;gaoming971366@163.com&quot;</span><br><span class="line">    __project__ = &quot;$&#123;PROJECT_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">usage:</span><br><span class="line"></span><br><span class="line">design:</span><br><span class="line"></span><br><span class="line">reference urls:</span><br><span class="line"></span><br><span class="line">python version:</span><br><span class="line">    python3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enjoy the good time everyday！！!</span><br><span class="line">Life is short, I use python.</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"># usage: /usr/bin/python $&#123;NAME&#125;.py</span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><p>常用的变量如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ &#123;PROJECT_NAME&#125; - 项目的名称。</span><br><span class="line">$ &#123;NAME&#125; - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。</span><br><span class="line">$ &#123;USER&#125; - 当前用户的登录名。</span><br><span class="line">$ &#123;DATE&#125; - 当前的系统日期。</span><br><span class="line">$ &#123;TIME&#125; - 当前系统时间。</span><br><span class="line">$ &#123;YEAR&#125; - 今年。</span><br><span class="line">$ &#123;MONTH&#125; - 当月。</span><br><span class="line">$ &#123;DAY&#125; - 当月的当天。</span><br><span class="line">$ &#123;HOUR&#125; - 目前的小时。</span><br><span class="line">$ &#123;MINUTE&#125; - 当前分钟。</span><br><span class="line">$ &#123;PRODUCT_NAME&#125; - 将在其中创建文件的IDE的名称。</span><br><span class="line">$ &#123;MONTH_NAME_SHORT&#125; - 月份名称的前3个字母。 示例：1月，2月等</span><br><span class="line">$ &#123;MONTH_NAME_FULL&#125; - 一个月的全名。 示例：1月，2月等</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_pycharm.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;Pycharm关于文件创建File and Code Template的配置&lt;/font&gt;
          &lt;/div&gt;
&lt;span class=&quot;label default&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;Pycharm&lt;/span&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://pygo2.top/categories/IDE/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="IDE" scheme="http://pygo2.top/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>弥留之城的爱丽丝</title>
    <link href="http://pygo2.top/articles/41087/"/>
    <id>http://pygo2.top/articles/41087/</id>
    <published>2021-12-31T07:06:19.000Z</published>
    <updated>2021-12-31T07:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_miliuzhicheng.jpeg" alt></p><div class="post_cus_note">《弥留之城的爱丽丝》</div><span class="label default">死亡游戏</span> <span class="label info">悬疑</span> <span class="label danger">惊悚</span><a id="more"></a><hr><div class="note success">            <p><font size="4" color="red"><strong>简介</strong></font><br>目前只有第一季，但是蛮好看的，在第一季最后一节留了彩蛋，等待第二季</p>          </div><blockquote><p>推荐指数</p></blockquote><pre><code>⭐️⭐️⭐️⭐️</code></pre><blockquote><p>主线剧情</p></blockquote><p>男主、女主组队通关现实中的死亡游戏。</p><blockquote><p>观看地址</p></blockquote><p><strong><em>baidu</em></strong>自行下载<br>或者<br>链接: <a href="https://pan.baidu.com/s/1ju1E4FfIMlZs5Acn2Ec8Ag" target="_blank" rel="noopener">https://pan.baidu.com/s/1ju1E4FfIMlZs5Acn2Ec8Ag</a><br>提取码: v44f。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_miliuzhicheng.jpeg&quot; alt&gt;&lt;/p&gt;

&lt;div class=&quot;post_cus_note&quot;&gt;《弥留之城的爱丽丝》&lt;/div&gt;

&lt;span class=&quot;label default&quot;&gt;死亡游戏&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;悬疑&lt;/span&gt; &lt;span class=&quot;label danger&quot;&gt;惊悚&lt;/span&gt;
    
    </summary>
    
      <category term="影视说" scheme="http://pygo2.top/categories/%E5%BD%B1%E8%A7%86%E8%AF%B4/"/>
    
    
      <category term="电视剧" scheme="http://pygo2.top/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>Github个人Overview展示</title>
    <link href="http://pygo2.top/articles/61451/"/>
    <id>http://pygo2.top/articles/61451/</id>
    <published>2021-12-26T11:47:04.000Z</published>
    <updated>2021-12-26T11:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>前几天看到一个项目，在README.md上有彩色标签、Github个人统计信息，挺有趣的，然后在Github上查到有一个专门的项目用来做这个，学习记录一下。</p>          </div><p><img src="/images/article_github_1.webp" alt></p><span class="label info">git</span><a id="more"></a><hr><p>先来看下原本的Github Overview试图：<br><img src="overview_src.png" alt></p><p>接下来，对其进行优化。</p><blockquote><p>创建新的Repository</p></blockquote><p>首先，在Github中创建一个新的repository，Owner与Repository name保持一致。比如你的Owner为ABC，那么就创建一个ABC仓库。<br>选择Public、Add a README file选项。</p><blockquote><p>编辑README.md文件</p></blockquote><p>创建好了之后，直接对仓库README.md文件进行编辑，这里简单对标签、GitHub Readme Stats进行举例，详情请查阅官网，本人也是探索阶段。</p><blockquote><p>README.md标签</p></blockquote><p>打开标签牌官网：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a></p><p><img src="shields.io.png" alt></p><p>最简单标签：</p><ul><li>label：标签体的前半部分，比如：Development Language</li><li>message：标签体的后半部分，比如：Python</li><li>color：选择一个颜色，也可以输入十六进制代码</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://img.shields.io/badge/Development%20Language-Python-FF0000)</span><br></pre></td></tr></table></figure></p><p><img src="https://img.shields.io/badge/Development%20Language-Python-FF0000" alt="标签牌"></p><blockquote><p>GitHub统计</p></blockquote><p>官网：<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md" target="_blank" rel="noopener">https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md</a><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![GitHub stats](https://github-readme-stats.vercel.app/api?username=GIS90&amp;theme=highcontrast&amp;show_icons=true&amp;hide=contribs,prs&amp;count_private=true)</span><br></pre></td></tr></table></figure></p><p><img src="https://github-readme-stats.vercel.app/api?username=GIS90&amp;theme=highcontrast&amp;show_icons=true&amp;hide=contribs,prs&amp;count_private=true" alt="GitHub stats"></p><p>官网介绍的很明白，请自行查阅。</p><p>看下最终效果：<br><img src="overview_tar.png" alt></p><blockquote><p>学习参考</p></blockquote><p>README标签：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a><br>GitHub统计：<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md" target="_blank" rel="noopener">https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md</a></p><font color="red" size="6.5">Enjoy the good life everyday！</font>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;前几天看到一个项目，在README.md上有彩色标签、Github个人统计信息，挺有趣的，然后在Github上查到有一个专门的项目用来做这个，学习记录一下。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_github_1.webp&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习</title>
    <link href="http://pygo2.top/articles/56016/"/>
    <id>http://pygo2.top/articles/56016/</id>
    <published>2021-12-20T13:30:51.000Z</published>
    <updated>2021-12-20T13:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_es6.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">ES6</span><a id="more"></a><hr><p>最近学习了VUE3，所有的语法是以ECMAScript6为基础的，参考学习了廖雪峰的ES6教程，<strong><em>URL</em></strong>如下：</p><p><a href="https://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/intro</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_es6.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;ES6&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="转载文章" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/%E8%BD%AC%E8%BD%BD%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>GIT删除tag</title>
    <link href="http://pygo2.top/articles/53395/"/>
    <id>http://pygo2.top/articles/53395/</id>
    <published>2021-12-15T12:15:25.000Z</published>
    <updated>2021-12-15T12:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <font color="red" size="4.5">总结一下GIT删除本地tag以及远程tag的操作！！！。</font>          </div><span class="label info">git</span> <span class="label success">tag</span><a id="more"></a><hr><p>示例中以v-2021-12-15-01为tag示例。</p><h4 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v-2021-12-15-01</span><br></pre></td></tr></table></figure><p><img src="loca_del.png" alt></p><h4 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/v-2021-12-15-01</span><br></pre></td></tr></table></figure><p><img src="remote_show.png" alt></p><h4 id="显示本地tag"><a href="#显示本地tag" class="headerlink" title="显示本地tag"></a>显示本地tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -l</span><br></pre></td></tr></table></figure><p><img src="local_show.png" alt></p><h4 id="显示远程tag"><a href="#显示远程tag" class="headerlink" title="显示远程tag"></a>显示远程tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show-ref --tag</span><br></pre></td></tr></table></figure><p><img src="remote_del.png" alt></p><h4 id="删除多个"><a href="#删除多个" class="headerlink" title="删除多个"></a>删除多个</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本地</span><br><span class="line">git tag -l | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git tag -d</span><br><span class="line"></span><br><span class="line"># 远程</span><br><span class="line">git show-ref --tag | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git push origin :refs/tags/</span><br></pre></td></tr></table></figure><p>还没尝试，只是觉得这么可以实现，待测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;总结一下GIT删除本地tag以及远程tag的操作！！！。&lt;/font&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;label success&quot;&gt;tag&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GIT修改默认分支master改为main</title>
    <link href="http://pygo2.top/articles/28122/"/>
    <id>http://pygo2.top/articles/28122/</id>
    <published>2021-12-08T13:03:57.000Z</published>
    <updated>2021-12-08T13:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>最近git初始化项目，本地都是默认master分支，毕竟发生了“黑人维权”，不管怎么说，github官网发布了消息：GitHub 官方发布信息称，从2020年10月1日起，在 Github平台上创建的所有新的源代码仓库将默认命名为 “main” ，不再是原先的 “master”。<br>我的本地居然还没改，于是，找了下解决办法，配置一下就ok了。</p>          </div><p><img src="/images/article_git.jpg" alt></p><span class="label info">git</span> <span class="label success">tag</span><a id="more"></a><hr><blockquote><p>配置</p></blockquote><p>执行一下的命令，就可以设置默认初始化仓库的时候为main仓库，把这个配置到全局的配置文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure></p><blockquote><p>查看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --list</span><br><span class="line"></span><br><span class="line">init.defaultbranch=main</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;最近git初始化项目，本地都是默认master分支，毕竟发生了“黑人维权”，不管怎么说，github官网发布了消息：GitHub 官方发布信息称，从2020年10月1日起，在 Github平台上创建的所有新的源代码仓库将默认命名为 “main” ，不再是原先的 “master”。&lt;br&gt;我的本地居然还没改，于是，找了下解决办法，配置一下就ok了。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_git.jpg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;label success&quot;&gt;tag&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>DingTalk后台导出人员数据</title>
    <link href="http://pygo2.top/articles/45420/"/>
    <id>http://pygo2.top/articles/45420/</id>
    <published>2021-11-26T15:35:00.000Z</published>
    <updated>2021-11-26T15:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_dingding.jpeg" alt></p><div class="note warning">            <p>程序推送消息需要2个参数，第一个是消息内容，第二个就是消息接受者，利用DingTalk OpenApi，传入的User ID是DingTalk的ID，具体获取方式请查看下列内容。</p>          </div><span class="label primary">DingTalk</span><a id="more"></a><hr><blockquote><p>登录DingTalk官网</p></blockquote><p>官网地址：<a href="https://www.dingtalk.com/" target="_blank" rel="noopener">https://www.dingtalk.com/</a><br>以管理员的角色登录DingTalk，点击快捷入口的通讯录管理。<br><img src="1.png" alt></p><blockquote><p>批量导入/导出/修改</p></blockquote><p>选择批量导入/导出/修改功能。<br><img src="2.png" alt></p><blockquote><p>导出数据</p></blockquote><p>选择导出/修改成员功能，设置导出的员工，点击下载。<br><img src="3.png" alt></p><blockquote><p>数据展示</p></blockquote><p>导出的excel数据中，第一列为DingTalk User ID，需要结合表数据的第二列与绩效明细数据进行vlookup。<br><img src="4.png" alt></p><blockquote><p>其他</p></blockquote><ul><li>DingTalk（钉钉）创建企业内部机器人：<a href="http://pygo2.top/articles/32206/">http://pygo2.top/articles/32206/</a></li><li>DingTalk后台导出人员数据：<a href="http://pygo2.top/articles/45420/">http://pygo2.top/articles/45420/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_dingding.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note warning&quot;&gt;
            &lt;p&gt;程序推送消息需要2个参数，第一个是消息内容，第二个就是消息接受者，利用DingTalk OpenApi，传入的User ID是DingTalk的ID，具体获取方式请查看下列内容。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label primary&quot;&gt;DingTalk&lt;/span&gt;
    
    </summary>
    
      <category term="软件" scheme="http://pygo2.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="DingTalk" scheme="http://pygo2.top/tags/DingTalk/"/>
    
  </entry>
  
  <entry>
    <title>DingTalk（钉钉）创建企业内部机器人</title>
    <link href="http://pygo2.top/articles/32206/"/>
    <id>http://pygo2.top/articles/32206/</id>
    <published>2021-11-26T13:19:51.000Z</published>
    <updated>2021-11-26T13:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_dingding.jpeg" alt></p><blockquote><p>背景</p></blockquote><div class="note primary">            <p>工作上的项目有个简单的需求，说有好的什么方式可以实现工资的明细可以自动化推送，经过沟通，打算把方向定位到钉钉上，并不是打广告啊，钉钉在中小型企业，甚至大企业使用程度还是很广的，于是加班加点近几天写了个简单的程序，功能就是调用钉钉openApi实现绩效工资明细自动化推动到行员钉钉。</p>          </div><span class="label info">DingTalk</span> <span class="label primary">机器人</span><a id="more"></a><hr><p>程序的基本功能已经开发完了，但是需要对DingTalk（钉钉）进行一些设置，本篇为讲述DingTalk创建机器人的相关操作，如果有想了解程序的可以看文章末尾的github地址，后续也会对这个程序写个详细的文章出来。</p><ul><li><p>登录DingTalk官网<br>  以管理员的方式钉钉开发中后台，依次选择应用开发 &gt; 企业内部开发 &gt; 机器人，点击创建应用。<br>  官网地址：<a href="https://open-dev.dingtalk.com/" target="_blank" rel="noopener">https://open-dev.dingtalk.com/</a><br>  <img src="1.png" alt></p></li><li><p>配置机器人<br>  按要求填写应用名称、应用描述以及图标，创建完之后还是可以进行内容修改的。<br>  <img src="2.png" alt></p></li><li><p>查看AppKey与AppSecret<br>  回到主页面选择刚创建的机器人，查看基本信息，记录机器人的AppKey与AppSecret，在程序的config.yaml配置文件中需要配置对应的参数。<br>  <img src="3.png" alt></p></li><li><p>开通权限<br>  选择权限管理 &gt; 机器人 &gt; 企业内机器人发送消息权限，开通这个发消息的权限。<br>  <img src="4.png" alt></p></li><li><p>发布机器人<br>  选择版本管理与发布，发布需要发消息的机器人。<br>  <img src="5.png" alt></p></li></ul><blockquote><p>学习参考</p></blockquote><ul><li>企业自建单聊机器人（官网）：<a href="https://developers.dingtalk.com/document/robots/enterprise-created-chatbot" target="_blank" rel="noopener">https://developers.dingtalk.com/document/robots/enterprise-created-chatbot</a></li><li>项目地址：<a href="https://github.com/GIS90/dtalk_send_pas" target="_blank" rel="noopener">https://github.com/GIS90/dtalk_send_pas</a></li></ul><ul><li>DingTalk（钉钉）创建企业内部机器人：<a href="http://pygo2.top/articles/32206/">http://pygo2.top/articles/32206/</a></li><li>DingTalk后台导出人员数据：<a href="http://pygo2.top/articles/45420/">http://pygo2.top/articles/45420/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_dingding.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;工作上的项目有个简单的需求，说有好的什么方式可以实现工资的明细可以自动化推送，经过沟通，打算把方向定位到钉钉上，并不是打广告啊，钉钉在中小型企业，甚至大企业使用程度还是很广的，于是加班加点近几天写了个简单的程序，功能就是调用钉钉openApi实现绩效工资明细自动化推动到行员钉钉。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;DingTalk&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;机器人&lt;/span&gt;
    
    </summary>
    
      <category term="软件" scheme="http://pygo2.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="DingTalk" scheme="http://pygo2.top/tags/DingTalk/"/>
    
  </entry>
  
  <entry>
    <title>Vant-Dialog的组件调用方式的注意要点</title>
    <link href="http://pygo2.top/articles/50291/"/>
    <id>http://pygo2.top/articles/50291/</id>
    <published>2021-11-23T14:53:41.000Z</published>
    <updated>2021-11-23T14:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习VUE的过程中，使用了移动UI的vant进行实战，在调用Dialog组件的时候，直接在methdod方法中使用没什么问题，但是把vant-dialog用在template标签中，控制台会报出警告，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: Extraneous non-props attributes (show, title, show-cancel-button) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.</span><br><span class="line">at &lt;Dialog show=false onUpdate:show=fn title=&quot;新增&quot; ... &gt;</span><br><span class="line">at &lt;Type onVnodeUnmounted=fn ref=Ref&lt; undefined &gt; &gt;</span><br></pre></td></tr></table></figure></p><span class="label primary">VUE</span><a id="more"></a><hr><p>vant官网提出了dialog的调用方式，函数调用与组件调用。在组件调用方式的时候报以上警告，而且Dialog会直接显示出来，在组件调用的时候需要注意：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Dialog.Component.name]: Dialog.Component,</span><br><span class="line">或者</span><br><span class="line">van-dialog: Dialog.Component,</span><br></pre></td></tr></table></figure></p><p>官网以及vant github都有解决的方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习VUE的过程中，使用了移动UI的vant进行实战，在调用Dialog组件的时候，直接在methdod方法中使用没什么问题，但是把vant-dialog用在template标签中，控制台会报出警告，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Vue warn]: Extraneous non-props attributes (show, title, show-cancel-button) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at &amp;lt;Dialog show=false onUpdate:show=fn title=&amp;quot;新增&amp;quot; ... &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at &amp;lt;Type onVnodeUnmounted=fn ref=Ref&amp;lt; undefined &amp;gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
      <category term="vant" scheme="http://pygo2.top/tags/vant/"/>
    
  </entry>
  
  <entry>
    <title>Jquery数组删除元素的方法</title>
    <link href="http://pygo2.top/articles/43302/"/>
    <id>http://pygo2.top/articles/43302/</id>
    <published>2021-11-17T16:05:51.000Z</published>
    <updated>2021-11-17T16:05:51.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>写项目过程中经常写前端js，记录一下删除数组中指定某个元素的常用方法。</p>          </div><p><img src="/images/article_js.jpeg" alt></p><span class="label info">Javascript</span><a id="more"></a><hr><blockquote><p>测试数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;];</span><br></pre></td></tr></table></figure><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><font color="red" size="5.5"><strong>最常用的方法</strong></font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var index = arr.indexOf(&apos;c&apos;)</span><br><span class="line">if(index &gt; -1)&#123;</span><br><span class="line">    var el = arr.splice(index, 1)</span><br><span class="line">    console.log(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;a&apos; ]</span><br><span class="line">[ &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>splice参数有多个，第一个代表删除元素的位置；第二个为删除的个数。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var index = arr.indexOf(&apos;c&apos;)</span><br><span class="line">if(index &gt; -1)&#123;</span><br><span class="line">    delete arr[index]</span><br><span class="line">    console.log(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;a&apos;, &apos;b&apos;, , &apos;d&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>使用delete删除元素之后数组长度不变，只是被删除元素变为””了。</p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var el = arr.pop()</span><br><span class="line">console.log(el)</span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d</span><br><span class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>pop方法用于删除数组中的最后一项，并且数据返回到新的变量。</p><h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var el = arr.shift()</span><br><span class="line">console.log(el)</span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">[ &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>shift方法用于删除数组中的第一项，并且数据返回到新的变量。</p><p>最常用的数据删除元素方法为splice，用indexOf去获取删除元素的位置。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;写项目过程中经常写前端js，记录一下删除数组中指定某个元素的常用方法。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_js.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;Javascript&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://pygo2.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Server后端API返回JSON格式说明</title>
    <link href="http://pygo2.top/articles/40461/"/>
    <id>http://pygo2.top/articles/40461/</id>
    <published>2021-11-02T15:08:09.000Z</published>
    <updated>2021-11-02T15:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发中经常与前端开发或者自己写的前端项目进行数据交换，总结一下自己常用的数据交换格式，以及状态码对应的内容。</p><span class="label danger">Linux</span> <span class="label info">Python</span><a id="more"></a><hr><blockquote><p>格式</p></blockquote><p><strong>*JSON**</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status_id&quot;: 100,</span><br><span class="line">    &quot;status&quot;: &quot;成功&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;请求内容&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>status_id：状态码</li><li>status：状态内容</li><li>message：错误信息</li><li>data：请求的json数据内容</li></ul><blockquote><p>实例</p></blockquote><table><thead><tr><th style="text-align:center">Status_id</th><th style="text-align:left">Status</th><th style="text-align:left">Msg</th><th style="text-align:left">Data</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:left">success</td><td style="text-align:left">请求成功</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">101</td><td style="text-align:left">success</td><td style="text-align:left">请求成功，查询数据为空</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">201</td><td style="text-align:left">failure</td><td style="text-align:left">请求方法错误</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">202</td><td style="text-align:left">failure</td><td style="text-align:left">缺少请求参数</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">203</td><td style="text-align:left">failure</td><td style="text-align:left">请求参数不合法</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">204</td><td style="text-align:left">failure</td><td style="text-align:left">请求参数为必须信息</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">205</td><td style="text-align:left">failure</td><td style="text-align:left">缺少rtx_id信息</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">206</td><td style="text-align:left">failure</td><td style="text-align:left">缺少上传文件</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">207</td><td style="text-align:left">failure</td><td style="text-align:left">文件格式不支持</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">208</td><td style="text-align:left">failure</td><td style="text-align:left">文件内容不符合要求</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">209</td><td style="text-align:left">failure</td><td style="text-align:left">文件行内容有问题</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">210</td><td style="text-align:left">failure</td><td style="text-align:left">文件存储失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">211</td><td style="text-align:left">failure</td><td style="text-align:left">参数特殊要求</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">212</td><td style="text-align:left">failure</td><td style="text-align:left">文件数据已存在</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">213</td><td style="text-align:left">failure</td><td style="text-align:left">文件导出数据为空</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">301</td><td style="text-align:left">failure</td><td style="text-align:left">数据已存在，无需重新建立</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">302</td><td style="text-align:left">failure</td><td style="text-align:left">数据不存在</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">303</td><td style="text-align:left">failure</td><td style="text-align:left">部分数据处理成功</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">304</td><td style="text-align:left">failure</td><td style="text-align:left">数据已删除，无需处理</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">305</td><td style="text-align:left">failure</td><td style="text-align:left">数据已处理，无须二次处理</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">306</td><td style="text-align:left">failure</td><td style="text-align:left">数据已删除，无须二次删除</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">307</td><td style="text-align:left">failure</td><td style="text-align:left">数据处理失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">308</td><td style="text-align:left">failure</td><td style="text-align:left">数据不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3081</td><td style="text-align:left">failure</td><td style="text-align:left">数据（地址）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3082</td><td style="text-align:left">failure</td><td style="text-align:left">数据（姓名）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3083</td><td style="text-align:left">failure</td><td style="text-align:left">数据（重量）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3084</td><td style="text-align:left">failure</td><td style="text-align:left">数据（电话）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">309</td><td style="text-align:left">failure</td><td style="text-align:left">数据创建用户与当前更改用户不一致</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">310</td><td style="text-align:left">failure</td><td style="text-align:left">非数据相关人员，禁止更新数据</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">401</td><td style="text-align:left">failure</td><td style="text-align:left">图片格式不支持</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">402</td><td style="text-align:left">failure</td><td style="text-align:left">图片存储失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">403</td><td style="text-align:left">failure</td><td style="text-align:left">文章创建者与提交者不符合</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">450</td><td style="text-align:left">failure</td><td style="text-align:left">数据存储失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">501</td><td style="text-align:left">failure</td><td style="text-align:left">Server发生错误，获取数据失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">601</td><td style="text-align:left">failure</td><td style="text-align:left">HTTP请求接口失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">602</td><td style="text-align:left">failure</td><td style="text-align:left">HTTP请求数据为空</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">603</td><td style="text-align:left">failure</td><td style="text-align:left">HTTP请求数据不可用</td><td style="text-align:left">{}</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中经常与前端开发或者自己写的前端项目进行数据交换，总结一下自己常用的数据交换格式，以及状态码对应的内容。&lt;/p&gt;
&lt;span class=&quot;label danger&quot;&gt;Linux&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;Python&lt;/span&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://pygo2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="API" scheme="http://pygo2.top/tags/API/"/>
    
      <category term="JSON" scheme="http://pygo2.top/tags/JSON/"/>
    
  </entry>
  
</feed>
