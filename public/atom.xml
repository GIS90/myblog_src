<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PyGo²</title>
  
  <subtitle>一个爱&lt;font size=&quot;5&quot; color=&quot;#BF0060&quot;&gt;老婆&lt;/font&gt;的&lt;font size=&quot;5&quot; color=&quot;#FF4500&quot;&gt;Python&lt;/font&gt;程序猿。。。。。。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pygo2.top/"/>
  <updated>2022-01-09T07:20:30.000Z</updated>
  <id>http://pygo2.top/</id>
  
  <author>
    <name>mingliang.gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript对象属性的遍历</title>
    <link href="http://pygo2.top/articles/27964/"/>
    <id>http://pygo2.top/articles/27964/</id>
    <published>2022-01-09T07:20:30.000Z</published>
    <updated>2022-01-09T07:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>7种Javascript对象属性遍历的方法。</p>          </div><p><img src="/images/article_js.jpeg" alt></p><span class="label info">Javascript</span><a id="more"></a><hr><blockquote><p>测试数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;mingliang.gao&apos;;</span><br><span class="line">var demo = &#123;</span><br><span class="line">    name,</span><br><span class="line">    language: &apos;js&apos;,</span><br><span class="line">    say() &#123;</span><br><span class="line">        return (&apos;name: &apos;, name, &apos;language: &apos;, language)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法一：for…in"><a href="#方法一：for…in" class="headerlink" title="方法一：for…in"></a>方法一：for…in</h4><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let k in demo)&#123;</span><br><span class="line">    console.log(k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">language</span><br><span class="line">say</span><br></pre></td></tr></table></figure></p><h4 id="方法二：Object-keys-obj"><a href="#方法二：Object-keys-obj" class="headerlink" title="方法二：Object.keys(obj)"></a>方法二：Object.keys(obj)</h4><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.keys(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法三：Object-getOwnPropertyNames-obj"><a href="#方法三：Object-getOwnPropertyNames-obj" class="headerlink" title="方法三：Object.getOwnPropertyNames(obj)"></a>方法三：Object.getOwnPropertyNames(obj)</h4><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.getOwnPropertyNames(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法四：Object-getOwnPropertySymbols-obj"><a href="#方法四：Object-getOwnPropertySymbols-obj" class="headerlink" title="方法四：Object.getOwnPropertySymbols(obj)"></a>方法四：Object.getOwnPropertySymbols(obj)</h4><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.getOwnPropertySymbols(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法五：Reflect-ownKeys-obj"><a href="#方法五：Reflect-ownKeys-obj" class="headerlink" title="方法五：Reflect.ownKeys(obj)"></a>方法五：Reflect.ownKeys(obj)</h4><p>Reflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Reflect.ownKeys(demo))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ]</span><br></pre></td></tr></table></figure></p><h4 id="方法六：getOwnPropertyDescriptor-obj-‘属性名’"><a href="#方法六：getOwnPropertyDescriptor-obj-‘属性名’" class="headerlink" title="方法六：getOwnPropertyDescriptor(obj, ‘属性名’)"></a>方法六：getOwnPropertyDescriptor(obj, ‘属性名’)</h4><p>对象的每个属性都有一个描述对象（Descriptor），Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(getOwnPropertyDescriptor(demo, &apos;name&apos;))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; value: &apos;mingliang.gao&apos;,</span><br><span class="line">  writable: true,</span><br><span class="line">  enumerable: true,</span><br><span class="line">  configurable: true &#125;</span><br></pre></td></tr></table></figure></p><h4 id="方法七：解构赋值"><a href="#方法七：解构赋值" class="headerlink" title="方法七：解构赋值"></a>方法七：解构赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123; name, language, say, ...args &#125; = demo;</span><br><span class="line">console.log(language)</span><br><span class="line">console.log(say)</span><br><span class="line">console.log(args)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mingliang.gao</span><br><span class="line">python</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;7种Javascript对象属性遍历的方法。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_js.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;Javascript&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://pygo2.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DB-Oracle密码过期的处理</title>
    <link href="http://pygo2.top/articles/32323/"/>
    <id>http://pygo2.top/articles/32323/</id>
    <published>2022-01-04T14:08:48.000Z</published>
    <updated>2022-01-04T14:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_oracle.jpeg" alt></p><div class="note info">            <p>今天下午处理了一下Oracle账户过期的问题，记录一下处理的过程，密码过期+杀死死锁。</p>          </div><span class="label info">Oracle</span> <span class="label primary">密码过期</span><a id="more"></a><hr><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>4号刚休完元旦的假期下午来到项目上，发现系统的调度停止了，修改系统状态又重新了一次，发现还是报错，第一个调度都跑不过去，这记录一下，后面杀死死锁进程要考。<br>因为在节前psql已经提示账户密码马上过期了，需要重制密码，没有理会，所以第一时间想到了是这个原因造成的，于是打开plsq输入登录密码，已经登录不上去了，问题已经确定了，那么就针对问题处理问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>具体Oracle数据库运维没什么经验，增删改查用的还是多，但是涉及到操作了，还是要谨慎一些，问了自己的好朋友、同事，以及结合baidu，处理了这次密码过期造成的问题。不多说，看下处理过程。</p><h4 id="切换oracle用户"><a href="#切换oracle用户" class="headerlink" title="切换oracle用户"></a>切换oracle用户</h4><p>登录服务器，切换到oracle用户，执行<strong><em>sqlplus / as sysdba</em></strong>操纵，如果能顺利登录Oracle数据库，直接下下个阶段。<br>我这的Oracle数据库部署的有问题，执行sqlplus发现提示一些错误，具体的错误就不写了，反正就是当时这个Oracle环境遍历没有配置好。打开/home/oracle/.bash_profile环境变量文件，发现以及配置如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">umask 022</span><br><span class="line">ORACLE_HOSTNAME=aespas</span><br><span class="line">ORACLE_BASE=/u01/app/oracle</span><br><span class="line">ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line">export ORACLE_SID=aespas</span><br><span class="line">PATH=$PATH:$HOME/bin:$ORACLE_HOME/bin:$ORACLE_HOME/jdk/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">export ORACLE_HOME</span><br><span class="line">LC_ALL=&quot;en_US&quot;</span><br><span class="line">LANG=&quot;en_US&quot;</span><br><span class="line">export NLS_LANG=&quot;AMERICAN_AMERICA.ZHS16GBK&quot;</span><br><span class="line">export NLS_DATE_FORMAT=&apos;YYYY-MM-DD HH24:MI:SS&apos;</span><br></pre></td></tr></table></figure></p><p>需要执行一下命令使环境变量生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /home/oracle/.bash_profile</span><br></pre></td></tr></table></figure></p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ul><li><p>登录Oracle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure></li><li><p>查看指定的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username, profile from dba_users where username = &apos;PAS&apos;;</span><br></pre></td></tr></table></figure></li><li><p>查看用户指定profile密码有效期设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from dba_profiles s where s.profile=&apos;DEFAULT&apos; AND resource_name=&apos;PASSWORD_LIFE_TIME&apos;;</span><br></pre></td></tr></table></figure></li><li><p>密码有效期由默认的180天修改成“无限制”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure></li><li><p>重新设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER PAS identified by pas</span><br></pre></td></tr></table></figure></li></ul><h4 id="杀死死锁"><a href="#杀死死锁" class="headerlink" title="杀死死锁"></a>杀死死锁</h4><ul><li><p>查看哪些表锁住了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select b.owner,b.object_name,a.session_id,a.locked_mode</span><br><span class="line">from v$locked_object a,dba_objects b</span><br><span class="line">where b.object_id = a.object_id;̨̨̨̨̨</span><br></pre></td></tr></table></figure></li><li><p>查看锁死的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select b.username,b.sid,b.serial#,logon_time</span><br><span class="line">from v$locked_object a,v$session b</span><br><span class="line">where a.session_id = b.sid order by b.logon_time;</span><br></pre></td></tr></table></figure></li><li><p>杀死锁死的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter system kill session &apos;sid,serial&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>其中sid、serial为上一步查询的锁死会话。</p><h4 id="运行调度"><a href="#运行调度" class="headerlink" title="运行调度"></a>运行调度</h4><p>重新运行系统的调度</p><h3 id="注意要点"><a href="#注意要点" class="headerlink" title="注意要点"></a>注意要点</h3><ul><li>sqlplus登录数据库的所有sql建议手动输入，不要粘贴复制。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_oracle.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;今天下午处理了一下Oracle账户过期的问题，记录一下处理的过程，密码过期+杀死死锁。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;密码过期&lt;/span&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://pygo2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://pygo2.top/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm新文件模板配置</title>
    <link href="http://pygo2.top/articles/10539/"/>
    <id>http://pygo2.top/articles/10539/</id>
    <published>2022-01-01T10:05:33.000Z</published>
    <updated>2022-01-01T10:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_pycharm.jpeg" alt></p><div class="note primary">            <font color="red" size="4.5">Pycharm关于文件创建File and Code Template的配置</font>          </div><span class="label default">Python</span> <span class="label primary">Pycharm</span><a id="more"></a><hr><p>今天元旦了，吃过饭后晚上还是写了会代码，用Pycharm写项目每次创建新文件的时候，都有一些文件初始化的默认内容，本人Pycharm File and Code Template配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">describe:</span><br><span class="line"></span><br><span class="line">base_info:</span><br><span class="line">    __author__ = &quot;PyGo&quot;</span><br><span class="line">    __time__ = &quot;$&#123;DATE&#125;&quot;</span><br><span class="line">    __version__ = &quot;v.1.0.0&quot;</span><br><span class="line">    __mail__ = &quot;gaoming971366@163.com&quot;</span><br><span class="line">    __project__ = &quot;$&#123;PROJECT_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">usage:</span><br><span class="line"></span><br><span class="line">design:</span><br><span class="line"></span><br><span class="line">reference urls:</span><br><span class="line"></span><br><span class="line">python version:</span><br><span class="line">    python3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enjoy the good time everyday！！!</span><br><span class="line">Life is short, I use python.</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"># usage: /usr/bin/python $&#123;NAME&#125;.py</span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><p>常用的变量如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ &#123;PROJECT_NAME&#125; - 项目的名称。</span><br><span class="line">$ &#123;NAME&#125; - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。</span><br><span class="line">$ &#123;USER&#125; - 当前用户的登录名。</span><br><span class="line">$ &#123;DATE&#125; - 当前的系统日期。</span><br><span class="line">$ &#123;TIME&#125; - 当前系统时间。</span><br><span class="line">$ &#123;YEAR&#125; - 今年。</span><br><span class="line">$ &#123;MONTH&#125; - 当月。</span><br><span class="line">$ &#123;DAY&#125; - 当月的当天。</span><br><span class="line">$ &#123;HOUR&#125; - 目前的小时。</span><br><span class="line">$ &#123;MINUTE&#125; - 当前分钟。</span><br><span class="line">$ &#123;PRODUCT_NAME&#125; - 将在其中创建文件的IDE的名称。</span><br><span class="line">$ &#123;MONTH_NAME_SHORT&#125; - 月份名称的前3个字母。 示例：1月，2月等</span><br><span class="line">$ &#123;MONTH_NAME_FULL&#125; - 一个月的全名。 示例：1月，2月等</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_pycharm.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;Pycharm关于文件创建File and Code Template的配置&lt;/font&gt;
          &lt;/div&gt;
&lt;span class=&quot;label default&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;Pycharm&lt;/span&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://pygo2.top/categories/IDE/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="IDE" scheme="http://pygo2.top/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>弥留之城的爱丽丝</title>
    <link href="http://pygo2.top/articles/41087/"/>
    <id>http://pygo2.top/articles/41087/</id>
    <published>2021-12-31T07:06:19.000Z</published>
    <updated>2021-12-31T07:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_miliuzhicheng.jpeg" alt></p><div class="post_cus_note">《弥留之城的爱丽丝》</div><span class="label default">死亡游戏</span> <span class="label info">悬疑</span> <span class="label danger">惊悚</span><a id="more"></a><hr><div class="note success">            <p><font size="4" color="red"><strong>简介</strong></font><br>目前只有第一季，但是蛮好看的，在第一季最后一节留了彩蛋，等待第二季</p>          </div><blockquote><p>推荐指数</p></blockquote><pre><code>⭐️⭐️⭐️⭐️</code></pre><blockquote><p>主线剧情</p></blockquote><p>男主、女主组队通关现实中的死亡游戏。</p><blockquote><p>观看地址</p></blockquote><p><strong><em>baidu</em></strong>自行下载<br>或者<br>链接: <a href="https://pan.baidu.com/s/1ju1E4FfIMlZs5Acn2Ec8Ag" target="_blank" rel="noopener">https://pan.baidu.com/s/1ju1E4FfIMlZs5Acn2Ec8Ag</a><br>提取码: v44f。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_miliuzhicheng.jpeg&quot; alt&gt;&lt;/p&gt;

&lt;div class=&quot;post_cus_note&quot;&gt;《弥留之城的爱丽丝》&lt;/div&gt;

&lt;span class=&quot;label default&quot;&gt;死亡游戏&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;悬疑&lt;/span&gt; &lt;span class=&quot;label danger&quot;&gt;惊悚&lt;/span&gt;
    
    </summary>
    
      <category term="影视说" scheme="http://pygo2.top/categories/%E5%BD%B1%E8%A7%86%E8%AF%B4/"/>
    
    
      <category term="电视剧" scheme="http://pygo2.top/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>Github个人Overview展示</title>
    <link href="http://pygo2.top/articles/61451/"/>
    <id>http://pygo2.top/articles/61451/</id>
    <published>2021-12-26T11:47:04.000Z</published>
    <updated>2021-12-26T11:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>前几天看到一个项目，在README.md上有彩色标签、Github个人统计信息，挺有趣的，然后在Github上查到有一个专门的项目用来做这个，学习记录一下。</p>          </div><p><img src="/images/article_github_1.webp" alt></p><span class="label info">git</span><a id="more"></a><hr><p>先来看下原本的Github Overview试图：<br><img src="overview_src.png" alt></p><p>接下来，对其进行优化。</p><blockquote><p>创建新的Repository</p></blockquote><p>首先，在Github中创建一个新的repository，Owner与Repository name保持一致。比如你的Owner为ABC，那么就创建一个ABC仓库。<br>选择Public、Add a README file选项。</p><blockquote><p>编辑README.md文件</p></blockquote><p>创建好了之后，直接对仓库README.md文件进行编辑，这里简单对标签、GitHub Readme Stats进行举例，详情请查阅官网，本人也是探索阶段。</p><blockquote><p>README.md标签</p></blockquote><p>打开标签牌官网：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a></p><p><img src="shields.io.png" alt></p><p>最简单标签：</p><ul><li>label：标签体的前半部分，比如：Development Language</li><li>message：标签体的后半部分，比如：Python</li><li>color：选择一个颜色，也可以输入十六进制代码</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://img.shields.io/badge/Development%20Language-Python-FF0000)</span><br></pre></td></tr></table></figure></p><p><img src="https://img.shields.io/badge/Development%20Language-Python-FF0000" alt="标签牌"></p><blockquote><p>GitHub统计</p></blockquote><p>官网：<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md" target="_blank" rel="noopener">https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md</a><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![GitHub stats](https://github-readme-stats.vercel.app/api?username=GIS90&amp;theme=highcontrast&amp;show_icons=true&amp;hide=contribs,prs&amp;count_private=true)</span><br></pre></td></tr></table></figure></p><p><img src="https://github-readme-stats.vercel.app/api?username=GIS90&amp;theme=highcontrast&amp;show_icons=true&amp;hide=contribs,prs&amp;count_private=true" alt="GitHub stats"></p><p>官网介绍的很明白，请自行查阅。</p><p>看下最终效果：<br><img src="overview_tar.png" alt></p><blockquote><p>学习参考</p></blockquote><p>README标签：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a><br>GitHub统计：<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md" target="_blank" rel="noopener">https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md</a></p><font color="red" size="6.5">Enjoy the good life everyday！</font>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;前几天看到一个项目，在README.md上有彩色标签、Github个人统计信息，挺有趣的，然后在Github上查到有一个专门的项目用来做这个，学习记录一下。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_github_1.webp&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习</title>
    <link href="http://pygo2.top/articles/56016/"/>
    <id>http://pygo2.top/articles/56016/</id>
    <published>2021-12-20T13:30:51.000Z</published>
    <updated>2021-12-20T13:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_es6.jpeg" alt></p><span class="label primary">VUE</span> <span class="label info">ES6</span><a id="more"></a><hr><p>最近学习了VUE3，所有的语法是以ECMAScript6为基础的，参考学习了廖雪峰的ES6教程，<strong><em>URL</em></strong>如下：</p><p><a href="https://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/intro</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_es6.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;ES6&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="转载文章" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/%E8%BD%AC%E8%BD%BD%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>GIT删除tag</title>
    <link href="http://pygo2.top/articles/53395/"/>
    <id>http://pygo2.top/articles/53395/</id>
    <published>2021-12-15T12:15:25.000Z</published>
    <updated>2021-12-15T12:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <font color="red" size="4.5">总结一下GIT删除本地tag以及远程tag的操作！！！。</font>          </div><span class="label info">git</span> <span class="label success">tag</span><a id="more"></a><hr><p>示例中以v-2021-12-15-01为tag示例。</p><h4 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v-2021-12-15-01</span><br></pre></td></tr></table></figure><p><img src="loca_del.png" alt></p><h4 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/v-2021-12-15-01</span><br></pre></td></tr></table></figure><p><img src="remote_show.png" alt></p><h4 id="显示本地tag"><a href="#显示本地tag" class="headerlink" title="显示本地tag"></a>显示本地tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -l</span><br></pre></td></tr></table></figure><p><img src="local_show.png" alt></p><h4 id="显示远程tag"><a href="#显示远程tag" class="headerlink" title="显示远程tag"></a>显示远程tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show-ref --tag</span><br></pre></td></tr></table></figure><p><img src="remote_del.png" alt></p><h4 id="删除多个"><a href="#删除多个" class="headerlink" title="删除多个"></a>删除多个</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本地</span><br><span class="line">git tag -l | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git tag -d</span><br><span class="line"></span><br><span class="line"># 远程</span><br><span class="line">git show-ref --tag | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git push origin :refs/tags/</span><br></pre></td></tr></table></figure><p>还没尝试，只是觉得这么可以实现，待测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;总结一下GIT删除本地tag以及远程tag的操作！！！。&lt;/font&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;label success&quot;&gt;tag&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GIT修改默认分支master改为main</title>
    <link href="http://pygo2.top/articles/28122/"/>
    <id>http://pygo2.top/articles/28122/</id>
    <published>2021-12-08T13:03:57.000Z</published>
    <updated>2021-12-08T13:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>最近git初始化项目，本地都是默认master分支，毕竟发生了“黑人维权”，不管怎么说，github官网发布了消息：GitHub 官方发布信息称，从2020年10月1日起，在 Github平台上创建的所有新的源代码仓库将默认命名为 “main” ，不再是原先的 “master”。<br>我的本地居然还没改，于是，找了下解决办法，配置一下就ok了。</p>          </div><p><img src="/images/article_git.jpg" alt></p><span class="label info">git</span> <span class="label success">tag</span><a id="more"></a><hr><blockquote><p>配置</p></blockquote><p>执行一下的命令，就可以设置默认初始化仓库的时候为main仓库，把这个配置到全局的配置文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure></p><blockquote><p>查看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --list</span><br><span class="line"></span><br><span class="line">init.defaultbranch=main</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;最近git初始化项目，本地都是默认master分支，毕竟发生了“黑人维权”，不管怎么说，github官网发布了消息：GitHub 官方发布信息称，从2020年10月1日起，在 Github平台上创建的所有新的源代码仓库将默认命名为 “main” ，不再是原先的 “master”。&lt;br&gt;我的本地居然还没改，于是，找了下解决办法，配置一下就ok了。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_git.jpg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;label success&quot;&gt;tag&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="git" scheme="http://pygo2.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>DingTalk后台导出人员数据</title>
    <link href="http://pygo2.top/articles/45420/"/>
    <id>http://pygo2.top/articles/45420/</id>
    <published>2021-11-26T15:35:00.000Z</published>
    <updated>2021-11-26T15:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_dingding.jpeg" alt></p><div class="note warning">            <p>程序推送消息需要2个参数，第一个是消息内容，第二个就是消息接受者，利用DingTalk OpenApi，传入的User ID是DingTalk的ID，具体获取方式请查看下列内容。</p>          </div><span class="label primary">DingTalk</span><a id="more"></a><hr><blockquote><p>登录DingTalk官网</p></blockquote><p>官网地址：<a href="https://www.dingtalk.com/" target="_blank" rel="noopener">https://www.dingtalk.com/</a><br>以管理员的角色登录DingTalk，点击快捷入口的通讯录管理。<br><img src="1.png" alt></p><blockquote><p>批量导入/导出/修改</p></blockquote><p>选择批量导入/导出/修改功能。<br><img src="2.png" alt></p><blockquote><p>导出数据</p></blockquote><p>选择导出/修改成员功能，设置导出的员工，点击下载。<br><img src="3.png" alt></p><blockquote><p>数据展示</p></blockquote><p>导出的excel数据中，第一列为DingTalk User ID，需要结合表数据的第二列与绩效明细数据进行vlookup。<br><img src="4.png" alt></p><blockquote><p>其他</p></blockquote><ul><li>DingTalk（钉钉）创建企业内部机器人：<a href="http://pygo2.top/articles/32206/">http://pygo2.top/articles/32206/</a></li><li>DingTalk后台导出人员数据：<a href="http://pygo2.top/articles/45420/">http://pygo2.top/articles/45420/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_dingding.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note warning&quot;&gt;
            &lt;p&gt;程序推送消息需要2个参数，第一个是消息内容，第二个就是消息接受者，利用DingTalk OpenApi，传入的User ID是DingTalk的ID，具体获取方式请查看下列内容。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label primary&quot;&gt;DingTalk&lt;/span&gt;
    
    </summary>
    
      <category term="软件" scheme="http://pygo2.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="DingTalk" scheme="http://pygo2.top/tags/DingTalk/"/>
    
  </entry>
  
  <entry>
    <title>DingTalk（钉钉）创建企业内部机器人</title>
    <link href="http://pygo2.top/articles/32206/"/>
    <id>http://pygo2.top/articles/32206/</id>
    <published>2021-11-26T13:19:51.000Z</published>
    <updated>2021-11-26T13:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_dingding.jpeg" alt></p><blockquote><p>背景</p></blockquote><div class="note primary">            <p>工作上的项目有个简单的需求，说有好的什么方式可以实现工资的明细可以自动化推送，经过沟通，打算把方向定位到钉钉上，并不是打广告啊，钉钉在中小型企业，甚至大企业使用程度还是很广的，于是加班加点近几天写了个简单的程序，功能就是调用钉钉openApi实现绩效工资明细自动化推动到行员钉钉。</p>          </div><span class="label info">DingTalk</span> <span class="label primary">机器人</span><a id="more"></a><hr><p>程序的基本功能已经开发完了，但是需要对DingTalk（钉钉）进行一些设置，本篇为讲述DingTalk创建机器人的相关操作，如果有想了解程序的可以看文章末尾的github地址，后续也会对这个程序写个详细的文章出来。</p><ul><li><p>登录DingTalk官网<br>  以管理员的方式钉钉开发中后台，依次选择应用开发 &gt; 企业内部开发 &gt; 机器人，点击创建应用。<br>  官网地址：<a href="https://open-dev.dingtalk.com/" target="_blank" rel="noopener">https://open-dev.dingtalk.com/</a><br>  <img src="1.png" alt></p></li><li><p>配置机器人<br>  按要求填写应用名称、应用描述以及图标，创建完之后还是可以进行内容修改的。<br>  <img src="2.png" alt></p></li><li><p>查看AppKey与AppSecret<br>  回到主页面选择刚创建的机器人，查看基本信息，记录机器人的AppKey与AppSecret，在程序的config.yaml配置文件中需要配置对应的参数。<br>  <img src="3.png" alt></p></li><li><p>开通权限<br>  选择权限管理 &gt; 机器人 &gt; 企业内机器人发送消息权限，开通这个发消息的权限。<br>  <img src="4.png" alt></p></li><li><p>发布机器人<br>  选择版本管理与发布，发布需要发消息的机器人。<br>  <img src="5.png" alt></p></li></ul><blockquote><p>学习参考</p></blockquote><ul><li>企业自建单聊机器人（官网）：<a href="https://developers.dingtalk.com/document/robots/enterprise-created-chatbot" target="_blank" rel="noopener">https://developers.dingtalk.com/document/robots/enterprise-created-chatbot</a></li><li>项目地址：<a href="https://github.com/GIS90/dtalk_send_pas" target="_blank" rel="noopener">https://github.com/GIS90/dtalk_send_pas</a></li></ul><ul><li>DingTalk（钉钉）创建企业内部机器人：<a href="http://pygo2.top/articles/32206/">http://pygo2.top/articles/32206/</a></li><li>DingTalk后台导出人员数据：<a href="http://pygo2.top/articles/45420/">http://pygo2.top/articles/45420/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_dingding.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;工作上的项目有个简单的需求，说有好的什么方式可以实现工资的明细可以自动化推送，经过沟通，打算把方向定位到钉钉上，并不是打广告啊，钉钉在中小型企业，甚至大企业使用程度还是很广的，于是加班加点近几天写了个简单的程序，功能就是调用钉钉openApi实现绩效工资明细自动化推动到行员钉钉。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;DingTalk&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;机器人&lt;/span&gt;
    
    </summary>
    
      <category term="软件" scheme="http://pygo2.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="DingTalk" scheme="http://pygo2.top/tags/DingTalk/"/>
    
  </entry>
  
  <entry>
    <title>Vant-Dialog的组件调用方式的注意要点</title>
    <link href="http://pygo2.top/articles/50291/"/>
    <id>http://pygo2.top/articles/50291/</id>
    <published>2021-11-23T14:53:41.000Z</published>
    <updated>2021-11-23T14:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习VUE的过程中，使用了移动UI的vant进行实战，在调用Dialog组件的时候，直接在methdod方法中使用没什么问题，但是把vant-dialog用在template标签中，控制台会报出警告，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: Extraneous non-props attributes (show, title, show-cancel-button) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.</span><br><span class="line">at &lt;Dialog show=false onUpdate:show=fn title=&quot;新增&quot; ... &gt;</span><br><span class="line">at &lt;Type onVnodeUnmounted=fn ref=Ref&lt; undefined &gt; &gt;</span><br></pre></td></tr></table></figure></p><span class="label primary">VUE</span><a id="more"></a><hr><p>vant官网提出了dialog的调用方式，函数调用与组件调用。在组件调用方式的时候报以上警告，而且Dialog会直接显示出来，在组件调用的时候需要注意：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Dialog.Component.name]: Dialog.Component,</span><br><span class="line">或者</span><br><span class="line">van-dialog: Dialog.Component,</span><br></pre></td></tr></table></figure></p><p>官网以及vant github都有解决的方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习VUE的过程中，使用了移动UI的vant进行实战，在调用Dialog组件的时候，直接在methdod方法中使用没什么问题，但是把vant-dialog用在template标签中，控制台会报出警告，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Vue warn]: Extraneous non-props attributes (show, title, show-cancel-button) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at &amp;lt;Dialog show=false onUpdate:show=fn title=&amp;quot;新增&amp;quot; ... &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at &amp;lt;Type onVnodeUnmounted=fn ref=Ref&amp;lt; undefined &amp;gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
      <category term="vant" scheme="http://pygo2.top/tags/vant/"/>
    
  </entry>
  
  <entry>
    <title>Jquery数组删除元素的方法</title>
    <link href="http://pygo2.top/articles/43302/"/>
    <id>http://pygo2.top/articles/43302/</id>
    <published>2021-11-17T16:05:51.000Z</published>
    <updated>2021-11-17T16:05:51.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>写项目过程中经常写前端js，记录一下删除数组中指定某个元素的常用方法。</p>          </div><p><img src="/images/article_js.jpeg" alt></p><span class="label info">Javascript</span><a id="more"></a><hr><blockquote><p>测试数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;];</span><br></pre></td></tr></table></figure><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><font color="red" size="5.5"><strong>最常用的方法</strong></font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var index = arr.indexOf(&apos;c&apos;)</span><br><span class="line">if(index &gt; -1)&#123;</span><br><span class="line">    var el = arr.splice(index, 1)</span><br><span class="line">    console.log(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;a&apos; ]</span><br><span class="line">[ &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>splice参数有多个，第一个代表删除元素的位置；第二个为删除的个数。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var index = arr.indexOf(&apos;c&apos;)</span><br><span class="line">if(index &gt; -1)&#123;</span><br><span class="line">    delete arr[index]</span><br><span class="line">    console.log(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ &apos;a&apos;, &apos;b&apos;, , &apos;d&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>使用delete删除元素之后数组长度不变，只是被删除元素变为””了。</p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var el = arr.pop()</span><br><span class="line">console.log(el)</span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d</span><br><span class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>pop方法用于删除数组中的最后一项，并且数据返回到新的变量。</p><h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var el = arr.shift()</span><br><span class="line">console.log(el)</span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">[ &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]</span><br></pre></td></tr></table></figure></p><p>说明：<br>shift方法用于删除数组中的第一项，并且数据返回到新的变量。</p><p>最常用的数据删除元素方法为splice，用indexOf去获取删除元素的位置。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;写项目过程中经常写前端js，记录一下删除数组中指定某个元素的常用方法。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_js.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label info&quot;&gt;Javascript&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://pygo2.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Server后端API返回JSON格式说明</title>
    <link href="http://pygo2.top/articles/40461/"/>
    <id>http://pygo2.top/articles/40461/</id>
    <published>2021-11-02T15:08:09.000Z</published>
    <updated>2021-11-02T15:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发中经常与前端开发或者自己写的前端项目进行数据交换，总结一下自己常用的数据交换格式，以及状态码对应的内容。</p><span class="label danger">Linux</span> <span class="label info">Python</span><a id="more"></a><hr><blockquote><p>格式</p></blockquote><p><strong>*JSON**</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status_id&quot;: 100,</span><br><span class="line">    &quot;status&quot;: &quot;成功&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;请求内容&quot;,</span><br><span class="line">    &quot;data&quot;: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>status_id：状态码</li><li>status：状态内容</li><li>message：错误信息</li><li>data：请求的json数据内容</li></ul><blockquote><p>实例</p></blockquote><table><thead><tr><th style="text-align:center">Status_id</th><th style="text-align:left">Status</th><th style="text-align:left">Msg</th><th style="text-align:left">Data</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:left">success</td><td style="text-align:left">请求成功</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">101</td><td style="text-align:left">success</td><td style="text-align:left">请求成功，查询数据为空</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">201</td><td style="text-align:left">failure</td><td style="text-align:left">请求方法错误</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">202</td><td style="text-align:left">failure</td><td style="text-align:left">缺少请求参数</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">203</td><td style="text-align:left">failure</td><td style="text-align:left">请求参数不合法</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">204</td><td style="text-align:left">failure</td><td style="text-align:left">请求参数为必须信息</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">205</td><td style="text-align:left">failure</td><td style="text-align:left">缺少rtx_id信息</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">206</td><td style="text-align:left">failure</td><td style="text-align:left">缺少上传文件</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">207</td><td style="text-align:left">failure</td><td style="text-align:left">文件格式不支持</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">208</td><td style="text-align:left">failure</td><td style="text-align:left">文件内容不符合要求</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">209</td><td style="text-align:left">failure</td><td style="text-align:left">文件行内容有问题</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">210</td><td style="text-align:left">failure</td><td style="text-align:left">文件存储失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">211</td><td style="text-align:left">failure</td><td style="text-align:left">参数特殊要求</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">212</td><td style="text-align:left">failure</td><td style="text-align:left">文件数据已存在</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">213</td><td style="text-align:left">failure</td><td style="text-align:left">文件导出数据为空</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">301</td><td style="text-align:left">failure</td><td style="text-align:left">数据已存在，无需重新建立</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">302</td><td style="text-align:left">failure</td><td style="text-align:left">数据不存在</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">303</td><td style="text-align:left">failure</td><td style="text-align:left">部分数据处理成功</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">304</td><td style="text-align:left">failure</td><td style="text-align:left">数据已删除，无需处理</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">305</td><td style="text-align:left">failure</td><td style="text-align:left">数据已处理，无须二次处理</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">306</td><td style="text-align:left">failure</td><td style="text-align:left">数据已删除，无须二次删除</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">307</td><td style="text-align:left">failure</td><td style="text-align:left">数据处理失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">308</td><td style="text-align:left">failure</td><td style="text-align:left">数据不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3081</td><td style="text-align:left">failure</td><td style="text-align:left">数据（地址）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3082</td><td style="text-align:left">failure</td><td style="text-align:left">数据（姓名）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3083</td><td style="text-align:left">failure</td><td style="text-align:left">数据（重量）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">3084</td><td style="text-align:left">failure</td><td style="text-align:left">数据（电话）不可用</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">309</td><td style="text-align:left">failure</td><td style="text-align:left">数据创建用户与当前更改用户不一致</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">310</td><td style="text-align:left">failure</td><td style="text-align:left">非数据相关人员，禁止更新数据</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">401</td><td style="text-align:left">failure</td><td style="text-align:left">图片格式不支持</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">402</td><td style="text-align:left">failure</td><td style="text-align:left">图片存储失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">403</td><td style="text-align:left">failure</td><td style="text-align:left">文章创建者与提交者不符合</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">450</td><td style="text-align:left">failure</td><td style="text-align:left">数据存储失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">501</td><td style="text-align:left">failure</td><td style="text-align:left">Server发生错误，获取数据失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">601</td><td style="text-align:left">failure</td><td style="text-align:left">HTTP请求接口失败</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">602</td><td style="text-align:left">failure</td><td style="text-align:left">HTTP请求数据为空</td><td style="text-align:left">{}</td></tr><tr><td style="text-align:center">603</td><td style="text-align:left">failure</td><td style="text-align:left">HTTP请求数据不可用</td><td style="text-align:left">{}</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中经常与前端开发或者自己写的前端项目进行数据交换，总结一下自己常用的数据交换格式，以及状态码对应的内容。&lt;/p&gt;
&lt;span class=&quot;label danger&quot;&gt;Linux&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;Python&lt;/span&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://pygo2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="API" scheme="http://pygo2.top/tags/API/"/>
    
      <category term="JSON" scheme="http://pygo2.top/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Vue第三方组件</title>
    <link href="http://pygo2.top/articles/5638/"/>
    <id>http://pygo2.top/articles/5638/</id>
    <published>2021-11-02T14:43:52.000Z</published>
    <updated>2021-11-02T14:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_vue.jpeg" alt></p><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><div class="note primary">            <p>记录学习VUE过程中用到的第三方组件。</p>          </div><span class="label danger">VUE</span> <span class="label info">第三方组件</span><a id="more"></a><hr><p>前端框架出现之后，组件化成为了前端开发的趋势，对于开发者来说，尤其是初学者，直接引用别人封装好的组件，在开发成本、样式上会节省一把时间，记录一下VUE学习过程中使用过的第三方组件。<br>至于，优劣势分析会在日后进行分析。</p><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Name</th><th style="text-align:left">Url</th><th style="text-align:left">DevTeam</th><th style="text-align:left">VUE Support</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">vant</td><td style="text-align:left"><a href="https://vant-contrib.gitee.io/" target="_blank" rel="noopener">https://vant-contrib.gitee.io/</a></td><td style="text-align:left">有赞前端团队</td><td style="text-align:left">Vue2, Vue3</td></tr></tbody></table><font size="5.5" color="red"><strong><em>持续更新中。。。。。。</em></strong></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_vue.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;h4 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h4&gt;&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;记录学习VUE过程中用到的第三方组件。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label danger&quot;&gt;VUE&lt;/span&gt; &lt;span class=&quot;label info&quot;&gt;第三方组件&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>ATOM安装插件的方式</title>
    <link href="http://pygo2.top/articles/10421/"/>
    <id>http://pygo2.top/articles/10421/</id>
    <published>2021-10-24T14:05:31.000Z</published>
    <updated>2021-10-24T14:05:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><strong>ATOM</strong></p></blockquote><div class="note warning">            <p>之前写过一片关于ATOM的快捷键以及相关的一些基础插件，今日再把安装插件的方式记录一下，还是比较简单的。</p>          </div><span class="label primary">ATOM</span> <span class="label success">IDE</span><a id="more"></a><hr><blockquote><p>IDE安装</p></blockquote><p>1.打开Atom-&gt;Perferences，快捷键：command+,<br>2.找到左侧的install菜单，输入你想要安装的Packages插件名/Theme名<br><img src="atom_install1.png" alt></p><blockquote><p>APM命令安装</p></blockquote><p>1.打开terminal控制台<br>2.执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询是否有apm命令</span><br><span class="line">which apm</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">apm install</span><br><span class="line"></span><br><span class="line"># 查看插件安装列表</span><br><span class="line">apm list</span><br></pre></td></tr></table></figure></p><p>具体的命令查询help，其实大部分安装包的命令都一样，npm、pip等等等，安装install、列表list、卸载uninstall/remove。<br><img src="atom_install2.png" alt></p><blockquote><p>手动安装</p></blockquote><p>上面2种安装解决了大部分安装插件的问题，如果在库中没有，需要手动git项目进行安装，步骤如下：<br>1.进入到atom的插件目录（cd ~/.atom/package），再通过git clone克隆仓库到本地<br>2.cd到插件的目录，执行apm install命令进行插件的安装</p><font size="6.5" color="red">最近有些懈怠了，写写文章、学学习，让自己充实起来，人生需要不断的前进。</font>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;strong&gt;ATOM&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note warning&quot;&gt;
            &lt;p&gt;之前写过一片关于ATOM的快捷键以及相关的一些基础插件，今日再把安装插件的方式记录一下，还是比较简单的。&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label primary&quot;&gt;ATOM&lt;/span&gt; &lt;span class=&quot;label success&quot;&gt;IDE&lt;/span&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://pygo2.top/categories/IDE/"/>
    
    
      <category term="Atom" scheme="http://pygo2.top/tags/Atom/"/>
    
      <category term="IDE" scheme="http://pygo2.top/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu-Unable to locate package错误解决办法</title>
    <link href="http://pygo2.top/articles/53363/"/>
    <id>http://pygo2.top/articles/53363/</id>
    <published>2021-10-22T00:50:45.000Z</published>
    <updated>2021-10-22T00:50:45.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>在Windows Terminal上集成了Ubuntu Terminal，安装小火车sl的时候，出现以下的错误：<br><img src="/images/article_ubuntu_error.jpg" alt></p>          </div><span class="label info">Ubuntu</span><a id="more"></a><hr><p>Unable to locate package大概意思就是找不到需要安装的包，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>这个命令会访问apt配置文件中所有的源，会读取源的软件列表保存在本地。以后使用apt、apt-get命令去install的时候会遍历本机保存的软件列表，所以需要定期对软件列表进行update命令更新源的软件列表。<br>在去执行刚才需要安装的命令。</p><div class="post_cus_note">拓展</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>执行upgrade命令会把本机安装的packages与上述update更新的软件列表进行比对，如果版本低于软件列表，会进行更新操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;
            &lt;p&gt;在Windows Terminal上集成了Ubuntu Terminal，安装小火车sl的时候，出现以下的错误：&lt;br&gt;&lt;img src=&quot;/images/article_ubuntu_error.jpg&quot; alt&gt;&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;Ubuntu&lt;/span&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://pygo2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Ubuntu" scheme="http://pygo2.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门系列-VUE全家桶架构图</title>
    <link href="http://pygo2.top/articles/54029/"/>
    <id>http://pygo2.top/articles/54029/</id>
    <published>2021-09-12T05:54:57.000Z</published>
    <updated>2021-09-12T05:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_vue.jpeg" alt></p><p>前段时间在慕课网学习了基础的VUE视频，受益匪浅啊，决定把自己从VUE入门的学习过程写一个系列的文章做一个分享，如果学习过程有错误的理解或者有什么记录不对的地方，可以留言进行交流。</p><span class="label primary">VUE</span><a id="more"></a><hr><p><img src="VUE.jpg" alt></p><p>从这个架构图上可以看出，我把VUE分为4个部分，分别是：</p><ul><li>基础环境</li><li>VUE基础知识</li><li>VUE其他</li><li>部署<br>最后一个是要做一个实战，实现todolist的功能，后端代码打算用python3实现API对接。</li></ul><font size="5.5" color="red"><strong><em>持续更新中。。。。。。</em></strong></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_vue.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;前段时间在慕课网学习了基础的VUE视频，受益匪浅啊，决定把自己从VUE入门的学习过程写一个系列的文章做一个分享，如果学习过程有错误的理解或者有什么记录不对的地方，可以留言进行交流。&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;VUE&lt;/span&gt;
    
    </summary>
    
      <category term="前端" scheme="http://pygo2.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://pygo2.top/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>413 Request Entity Too Large</title>
    <link href="http://pygo2.top/articles/60121/"/>
    <id>http://pygo2.top/articles/60121/</id>
    <published>2021-08-23T14:51:13.000Z</published>
    <updated>2021-08-23T14:51:13.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <p>在发布的pyhton web项目上传2M的文件，提示<font color="red" size="4.5">413 Request Entity Too Large</font>，请求实体过大也就是requests的Content-Length过大，记得当时本机开发的时候没有报过这个问题，为何上线就有了，大概率是域名、nginx那的问题。</p>          </div><p><img src="/images/article_nginx413.jpeg" alt></p><span class="label primary">Nginx</span><a id="more"></a><hr><p>确认问题出处之后就好解决，baidu查了一下，是因为nginx的配置问题，找到云服务器nginx的配置：/etc/nginx/nginx.conf<br>在http配置处添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 100M;</span><br></pre></td></tr></table></figure></p><p>重启nginx，搞定。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;在发布的pyhton web项目上传2M的文件，提示&lt;font color=&quot;red&quot; size=&quot;4.5&quot;&gt;413 Request Entity Too Large&lt;/font&gt;，请求实体过大也就是requests的Content-Length过大，记得当时本机开发的时候没有报过这个问题，为何上线就有了，大概率是域名、nginx那的问题。&lt;/p&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/article_nginx413.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;span class=&quot;label primary&quot;&gt;Nginx&lt;/span&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://pygo2.top/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="Nginx" scheme="http://pygo2.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>openpyxl写入性能的比较</title>
    <link href="http://pygo2.top/articles/24240/"/>
    <id>http://pygo2.top/articles/24240/</id>
    <published>2021-08-08T03:47:56.000Z</published>
    <updated>2021-08-08T03:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><font size="6.5" color="red">简单比较一下openpyxl在行写入与单元格写入性能上的对比。</font></p><p><hr><br><span class="label info">Python</span> <span class="label primary">Excel</span></p><a id="more"></a><hr><blockquote><p>简述</p></blockquote><p>之前一直用xlrd、xlwt处理表格，但是发现限制台，超过了65535就不能读取了，改用openpyxl，了解了一下之后，发现openpyxl可以行写入，测试一下行写入与单元格写入二者的性能。</p><blockquote><p>样本</p></blockquote><p>表格元数据176233行、7列，数据包含字符串类型、数字、时间等常见类型。</p><blockquote><p>试验体</p></blockquote><p>PC：MacOS<br>openpyxl版本：3.0.7</p><blockquote><p>源代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import openpyxl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读取</span><br><span class="line">reader_workbook = openpyxl.load_workbook(&apos;data/LLBB_GRCKYE1.xlsx&apos;)</span><br><span class="line">sheet = reader_workbook.get_sheet_by_name(reader_workbook.sheetnames[0])</span><br><span class="line">sheet_row = sheet.max_row</span><br><span class="line">sheet_col = sheet.max_column</span><br><span class="line"># ===================================</span><br><span class="line"># 行写入</span><br><span class="line">start1 = datetime.datetime.now()</span><br><span class="line">new_wb = openpyxl.Workbook()</span><br><span class="line">new_sheet = new_wb.create_sheet(title=&apos;Sheet&apos;, index=0)</span><br><span class="line">for row in sheet.values:</span><br><span class="line">    new_sheet.append(row)</span><br><span class="line">new_wb.save(&apos;result/res2.xlsx&apos;)</span><br><span class="line">end1 = datetime.datetime.now()</span><br><span class="line">print((end1-start1).seconds)</span><br><span class="line"># ===================================</span><br><span class="line"># 单元格写入</span><br><span class="line">start2 = datetime.datetime.now()</span><br><span class="line">new_wb = openpyxl.Workbook()</span><br><span class="line">new_sheet = new_wb.create_sheet(title=&apos;Sheet&apos;, index=0)</span><br><span class="line">for row in range(1, sheet_row + 1, 1):</span><br><span class="line">    for col in range(1, sheet_col + 1, 1):</span><br><span class="line">        new_sheet.cell(row=row,</span><br><span class="line">                       column=col,</span><br><span class="line">                       value=sheet.cell(row=row, column=col).value</span><br><span class="line">                       )</span><br><span class="line">new_wb.save(&apos;result/res3.xlsx&apos;)</span><br><span class="line">end2 = datetime.datetime.now()</span><br><span class="line">print((end2-start2).seconds)</span><br></pre></td></tr></table></figure><blockquote><p>比较结果</p></blockquote><p>单位：s</p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">第1次</th><th style="text-align:center">第2次</th><th style="text-align:center">第3次</th><th style="text-align:center">第4次</th><th style="text-align:center">第5次</th><th style="text-align:center">第6次</th><th style="text-align:center">第7次</th><th style="text-align:center">第8次</th><th style="text-align:center">第9次</th><th style="text-align:center">第10次</th><th style="text-align:center">平均值</th></tr></thead><tbody><tr><td style="text-align:center">行</td><td style="text-align:center">25</td><td style="text-align:center">26</td><td style="text-align:center">28</td><td style="text-align:center">29</td><td style="text-align:center">27</td><td style="text-align:center">28</td><td style="text-align:center">27</td><td style="text-align:center">26</td><td style="text-align:center">26</td><td style="text-align:center">26</td><td style="text-align:center">26.8</td></tr><tr><td style="text-align:center">单元格</td><td style="text-align:center">26</td><td style="text-align:center">28</td><td style="text-align:center">30</td><td style="text-align:center">28</td><td style="text-align:center">30</td><td style="text-align:center">29</td><td style="text-align:center">27</td><td style="text-align:center">27</td><td style="text-align:center">26</td><td style="text-align:center">29</td><td style="text-align:center">28.0</td></tr></tbody></table><blockquote><p>总结</p></blockquote><p>总体来说，大数据量可以看出行写入的速率较快，如果是数据量在几万行，性能都差不多，而且行写入代码也比较简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;6.5&quot; color=&quot;red&quot;&gt;简单比较一下openpyxl在行写入与单元格写入性能上的对比。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;span class=&quot;label info&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;label primary&quot;&gt;Excel&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://pygo2.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="Excel" scheme="http://pygo2.top/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>解决Python处理Excel65535的问题</title>
    <link href="http://pygo2.top/articles/26307/"/>
    <id>http://pygo2.top/articles/26307/</id>
    <published>2021-08-05T14:31:28.000Z</published>
    <updated>2021-08-05T14:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/article_python_excel.jpeg" alt></p><div class="note primary">            <blockquote><p>问题描述</p></blockquote><p>使用Python去处理表格的时候，居然报错，提示为：<br>undefined</p>          </div><span class="label info">Python</span><a id="more"></a><hr><p>基于xlrd、xlwt进行Excel的处理，其包中对单个Sheet限制最大行数为65535，当读写数据超出这个范围就会出现如上错误。</p><blockquote><p>解决方案</p></blockquote><p>可以使用openpyxl包，其最大行数为1048576，存储的文件类型为xlsx，但是弊端就是不能读取xls老的Excel格式文件。<br>对于这个，我在项目中想了一个解决方案，判断是xls格式就用xlrd、xlwt包的方法；xlsx就用openpyxl。<br>如果是xls并且行数超过65536，让用户上传xlsx格式的文件，网上有xls、xlsx格式的转换，有需要的可以找找。</p><p>如果使用openpyxl读取.xls文件，报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">raise InvalidFileException(msg)</span><br><span class="line">openpyxl.utils.exceptions.InvalidFileException: openpyxl does not support the old .xls file format,</span><br><span class="line">please use xlrd to read this file, or convert it to the more recent .xlsx file format.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/article_python_excel.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;div class=&quot;note primary&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;问题描述&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;使用Python去处理表格的时候，居然报错，提示为：&lt;br&gt;undefined&lt;/p&gt;
          &lt;/div&gt;
&lt;span class=&quot;label info&quot;&gt;Python&lt;/span&gt;
    
    </summary>
    
      <category term="Python" scheme="http://pygo2.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://pygo2.top/tags/Python/"/>
    
      <category term="Excel" scheme="http://pygo2.top/tags/Excel/"/>
    
  </entry>
  
</feed>
