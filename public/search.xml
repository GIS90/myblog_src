<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Oracle数据库ORA32001问题的解决]]></title>
    <url>%2Farticles%2F47484%2F</url>
    <content type="text"><![CDATA[Oracle ORA32001 环境信息 Oracle 版本：11g Enterprise Edition Release 11.2.0.4.0 - 64bit Linux 版本：Red Hat Enterprise Linux Server release 7.6 问题描述在进行Oracle数据库备份的时候，执行DEFERRED_SEGMENT_CREATION参数报错。备份参数DEFERRED_SEGMENT_CREATION {true | flase}【必须设置参数】–true 当该参数值等于true的时候，我们数据库中新创建的表，并且没有insert过任何数据的情况下，采用导出时不会将该表导出， 因为在dba_segments和user_segments是查不到该表的信息，只有当我们插入记录才会在两表中生成段的信息，并能导出该表。–flase 当此参数为false时，不存在dba_segments和user_segments中的段表也可以通过导出的方式将该表导出。设置false导出所有表：查询：show parameter DEFERRED_SEGMENT_CREATION;更改：alter system set DEFERRED_SEGMENT_CREATION=false scope=both; 问题原因数据库服务器Oracle数据库缺少spfile文件，需要新建配置文件。 解决方案1、切换oraclesu - oracle2、执行创建spfile文件的命令create spfile from pfile;3、重启数据库停止数据库：shutdown immediate启动数据库：startup4、查看系统是否有spfile配置文件show parameter spfile; 结束语坚持学习。。。。。。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之装饰器]]></title>
    <url>%2Farticles%2F29210%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 语法糖个人的理解，总结起来一句话就是把方法作为参数的方法。 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: Decoratorsbase_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2023/10/22 20:58&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __blog__ = &quot;www.pygo2.top&quot; __project__ = &quot;open2lisapi&quot;usage: @deprecated @timer @debug def add(a, b, *args, **kwargs): for i in range(10): print(i) add(100, 300, 1000, c=2000, d=2000)design:reference urls:python version: python3Enjoy the good life everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python decorators.py# ------------------------------------------------------------from datetime import datetimefrom functools import wrapsimport warningsdef decorator(func): &quot;&quot;&quot; 装饰器模板 &quot;&quot;&quot; @wraps(func) def __wrapper(*args, **kwargs): # 额外功能 result = func(*args, **kwargs) # 额外功能 print(&quot;[Decorator] &gt;&gt;&gt;&gt;&gt; %s.&quot; % func.__name__) return result return __wrapper# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *def timer(func): &quot;&quot;&quot; 方法执行时间装饰器 &quot;&quot;&quot; @wraps(func) def __wrapper(*args, **kwargs): start_time = datetime.now() result = func(*args, **kwargs) end_time = datetime.now() cost = round((end_time - start_time).microseconds * pow(0.1, 6), 3) print(&quot;[timer] &gt;&gt;&gt;&gt;&gt; %s cost %s seconds.&quot; % (func.__name__, cost)) return result return __wrapper# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *def debug(func): &quot;&quot;&quot; debug装饰器 &quot;&quot;&quot; @wraps(func) def __wrapper(*args, **kwargs): print(&apos;* &apos; * 55) print(&quot;[Debugging] &gt;&gt;&gt;&gt;&gt; %s - args: %s, kwargs: %s&quot; % (func.__name__, args, kwargs)) print(&apos;* &apos; * 55) return func(*args, **kwargs) return __wrapper# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *def deprecated(func): &quot;&quot;&quot; 方法过时提示 &quot;&quot;&quot; @wraps(func) def __wrapper(*args, **kwargs): warnings.warn(&quot;[%s] is deprecated and will be removed in future versions.&quot; % func.__name__, DeprecationWarning) return func(*args, **kwargs) return __wrapper 坚持学习。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE开源前端低代码平台]]></title>
    <url>%2Farticles%2F19243%2F</url>
    <content type="text"><![CDATA[VUE 低代码平台 在微信公众号中学习看到，收藏一下，日后学习。 https://mp.weixin.qq.com/s/6w5Njegv1FgGAkMMujmeFg]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE组件库]]></title>
    <url>%2Farticles%2F63670%2F</url>
    <content type="text"><![CDATA[前端框架出现之后，组件化成为了前端开发的趋势，对于开发者来说，尤其是初学者，直接引用别人封装好的组件，在开发成本、样式上会节省一把时间，记录一下VUE学习过程中使用过的第三方组件。 VUE 第三方组件 组件库使用方式都一样，就看自己喜欢什么风格。 https://mp.weixin.qq.com/s/75dc4GRk53Ylg8SeN87GfA https://mp.weixin.qq.com/s/HyPGgXdtDFJQPaXB0ifi2Q 持续更新中。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库一次异常处理的解决经历]]></title>
    <url>%2Farticles%2F29163%2F</url>
    <content type="text"><![CDATA[记录一次Oracle数据库挂载mount数据库失败的经历，过程中除了多次问题，在错误中寻找解决方案。 Oracle 背景去了一个新项目，发现用sqlplus和sqlldr导出dat数据报错，接二连三的报了好几个，下面是解决遇到的问题与解决方案。 问题一 问题 12ORA-01078: failure in processingsystem parametersLRM-00109: could not openparameterfile &apos;/u01/app/oracle/product/11.2.0/db_1/dbs/initORA10G.ora&apos; 解决方案 找到$ORACLE_BASE/admin/数据库名称/pfile目录下的init.ora形式的文件，复制到$ORACLE_HOME/dbs目录下，并且改成wlhtpas.ora文件名称，其中wlhtpas.ora是oracle数据库实例名ORACLE_SID。 原因 文件初始化spfile缺失，具体原因不详，可能是安装问题，也可能是异常断电导致。 问题二解决了之后，重新startup启动数据的时候，又有新问题。 问题 1ORA-01102: cannot mount database in EXCLUSIVE mode 查看Oracle数据库日志，发现文件被占用。 解决方案 1.进入/u01/app/oracle/product/11.2.0/db_1/dbs/目录2.删除lkPOD文件 在这里有个小技巧，用lsof去查看哪些进程使用了lkPOD文件，需要kill掉。 12lsof lkPODkill -9 进程ID 原因 文件被重复占用，导致启动失败。 结束语坚持学习。。。。。。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE3的watch和watchEffect区别]]></title>
    <url>%2Farticles%2F58210%2F</url>
    <content type="text"><![CDATA[VUE 监听器 最近官网学习了VUE3基础教程，跟VUE2比起来，改变还是挺大的，不过好多也很多，性能、开发效率，新增的组合式API很喜欢，也算下一步搞一个VUE3项目练练手，学完了不写，几天就生疏了。不过学习的过程中发现VUE3新增了一个watchEffect，具体分别如下： watch和watchEffect都能监听响应式数据的变化，不同的是它们监听数据变化的方式不同。 watch会明确监听某一个响应数据，而watchEffect则是隐式的监听回调函数中响应数据。 watch在响应数据初始化时是不会执行回调函数的，watchEffect在响应数据初始化时就会立即执行回调函数。 watchEffect更好用。 坚持学习。。。。。。]]></content>
      <categories>
        <category>VUE</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片hover动画效果，另一种动画方式]]></title>
    <url>%2Farticles%2F37930%2F</url>
    <content type="text"><![CDATA[VUE 动画 用transition实现动画样式，也是css中实现动画的常用方式之一，本人用的最多的就是transition、animation，VUE还有自带的Transition组件，但是Transition是切换的效果。 实现代码鼠标划过图片的时候有动画效果，直接上代码实现结果：1234567891011121314151617&lt;style scoped&gt;.viewer-box &#123; text-align: center;&#125;.viewer-box-image &#123; width: 120px; height: 120px; margin: 5px 6px 5px 6px; transition: transform .4s ease-in-out; transform-origin: center center; /* 中心点 */&#125;.viewer-box-image:hover &#123; transform: scale(1.2) rotate(360deg); /* 缩放+旋转 */&#125;&lt;/style&gt; 语法糖 transition: transform .4s ease-in-out; transition-property: none| all | property &gt;&gt;&gt; all表示所有属性都有过渡效果，property定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔 transition-duration: time值； &gt;&gt;&gt; 默认是0 没有动画效果，以秒或者毫秒计 transition-timing-function:linear|ease|ease-in|ease-out|ease-in-out &gt;&gt;&gt; 动画效果 transform: scale(1.2) rotate(360deg) transform: scale(1.2); 缩放 transform: translate(10px, 10px); 平移 transform: rotate(360deg); 旋转 transform: skew(90deg, 10deg); 斜切skewX, skewY 注意 关于transition，transform，translate三者的关系可以先搞清楚了，不然很容易蒙了。]]></content>
      <categories>
        <category>VUE</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片增加选中animation动画效果]]></title>
    <url>%2Farticles%2F65418%2F</url>
    <content type="text"><![CDATA[前几天用v-viewerjs写了一个头像设置页面，用css的animation给图片选中加了一个动画效果，记录一下animation的基础用法以及实现的代码。 VUE animation 动画 上篇博客记录了图片的选择事件，其中通过ref去对img元素进行样式修改，viewer-select-image样式类就是图片选择的效果，通过animation实现图片的方法缩小，效果简简单单，但是瞬间高大上了许多，代码也不多。 代码1234567891011121314@keyframes select-image-an &#123; 0% &#123; border: 27px solid; border-image: linear-gradient(#FF0000FF, #84cdfa, #FFFF00FF) 1; &#125; 100% &#123; border: 7px solid; border-image: linear-gradient(#FF0000FF, #84cdfa, #FFFF00FF) 1; &#125;&#125;.viewer-select-image &#123; animation: select-image-an 1.5s linear infinite alternate;&#125; 语法糖animation: select-image-an 1.5s linear infinite alternate;select-image-an：动画名称，与@keyframes select-image-an关联，其中0%是初始状态，100%为全状态，在0-100之间也可以在一些效果1.5s：动画一次的持续时间linear：动画运动轨迹的速度，linear为匀速，默认是ease（低俗-&gt;加速-&gt;减速）infinite：动画播放次数，infinite无限次执行alternate：往返动画 相关学习 菜鸟：https://www.runoob.com/cssref/css3-pr-animation.html 度娘：一搜一大推，问什么度娘都会告诉你]]></content>
      <categories>
        <category>VUE</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于VUE2的通过v-for动态变量的ref标签]]></title>
    <url>%2Farticles%2F32337%2F</url>
    <content type="text"><![CDATA[最近使用到了VUE2的ref这个功能吧，其实功能就等于id，但是比id更好用，只要对标签注册了ref变量，那么在this.$refs中可用使用这个元素了，对元素可以进行相关的js操作。 背景ref不仅可以对标签注册，还可以对组件注册，自己写前端代码的时候用到了对img标签的v-for操作，每个img标签都进行ref注册，具体代码如下：123&lt;viewer ref=&quot;viewer&quot; :options=&quot;viewerOption&quot; :images=&quot;images&quot; @inited=&quot;viewerInited&quot;&gt; &lt;img v-for=&quot;(img, index) in images&quot; :id=&quot;img.md5_id&quot; :ref=&quot;img.md5_id&quot; :key=&quot;index&quot; :src=&quot;img.url&quot; class=&quot;viewer-box-image&quot; @click=&quot;selectViewerImage(index)&quot;&gt;&lt;/viewer&gt; 其中，images是个字典数组，格式：[{id: 1, md5_id: 1, url: 1}]。对每一个图片都有一个点击事件，触发事件代码如下：1234567891011121314151617181920selectViewerImage(selectIndex) &#123; if (this.images &amp;&amp; selectIndex &gt;= 0) &#123; // 设置当前图片选择的索引 this.curImageIndex = selectIndex // 设置选择的样式 this.images.forEach((item, index) =&gt; &#123; // 清空image选择样式 // document.getElementById(item.md5_id).classList.remove(&apos;viewer-select-image&apos;) this.$refs[item.md5_id][0].classList.remove(&apos;viewer-select-image&apos;) // ref动态变量[0] if (index === selectIndex) &#123; // 当前选择image-md5 this.curImage = item.md5_id // 当前被选择查看的image的样式 // document.getElementById(item.md5_id).classList.add(&apos;viewer-select-image&apos;) this.$refs[item.md5_id][0].classList.add(&apos;viewer-select-image&apos;) &#125; &#125;) &#125;&#125; 方法的意思就是对所有的图片清除选择的样式，对选择的图片新增选中样式。但是当时我用this.$refs[item.md5_id]去获取对应的img元素的时候，发现元素获取不到，查阅了相关资料，说如果是v-for使用ref的动态变量，获取元素需要获取第一个值，也就是this.$refs[item.md5_id][0]，这个写法。 ref的v-for用法 VUE中如果通过v-for遍历的方式注册ref的时候，如果是变量写法为：:ref = 变量，:（冒号）为代表这个为变量；如果是固定值就去掉 :号。 通过v-for注册的ref，获取指定的ref时需要加 [0]，写法：this.$refs[变量][0]；如果是固定值或者非v-for遍历的方式，写法都是this.$refs[变量]，不需要添加[0]。 每天一点点，坚持学习。。。。。。]]></content>
      <categories>
        <category>VUE</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免费的网站工具]]></title>
    <url>%2Farticles%2F34113%2F</url>
    <content type="text"><![CDATA[收藏一下网上好用、免费的网站。 网站工具 序号 名称 地址 1 代码转图片 https://carbon.now.sh/ 2 JavaScript正则表达式可视化工具 https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24 3 图片压缩 https://tinypng.com/ 4 Codepen https://codepen.io/ 5 阿里开源图标 https://www.iconfont.cn/ 6 在线调色板 https://colorhunt.co/palettes/pastel 7 开发文档 https://devdocs.io/ 8 一键抠图 https://www.remove.bg/zh 9 自述文件 https://readme.so/editor 10 测试网站加载速度 https://gtmetrix.com/ 11 12 持续更新中。。。。。。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端JavaScript全局对象获取通用方法]]></title>
    <url>%2Farticles%2F19661%2F</url>
    <content type="text"><![CDATA[在学习ES6语法的过程中，看到了JavaScript获取全局对象的通用方法，记录上，以防日后用的上。 方法一1234567(typeof window !== &apos;undefined&apos; ? window : (typeof process === &apos;object&apos; &amp;&amp; typeof require === &apos;function&apos; &amp;&amp; typeof global === &apos;object&apos;) ? global : this); 方法二123456var getGlobal = function () &#123; if (typeof self !== &apos;undefined&apos;) &#123; return self; &#125; if (typeof window !== &apos;undefined&apos;) &#123; return window; &#125; if (typeof global !== &apos;undefined&apos;) &#123; return global; &#125; throw new Error(&apos;unable to locate global object&apos;);&#125;; 坚持学习。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七牛API上传文件发送ProtocolError-Connection-aborted错误]]></title>
    <url>%2Farticles%2F43878%2F</url>
    <content type="text"><![CDATA[Python 背景 自己开发的OPENTOOL-Z系统在PDF转WORD功能文件上传上发送上传失败，后台查看日志发送了ProtocolError(‘Connection aborted.’, timeout(‘timed out’))的错误，记录以下解决方法。 开发完PDF转WORD功能之后测试了几个小文件的都是1.2M大小的PDF文件，上传与转换都没有问题，突然有一天同事找我让我转换一个6.3M大小的文件，上传了好几次都是显示上传失败。 报错于是，登录到服务器，查看存储的文件，发现服务器本地存储成功了，是上传到七牛云对象存储失败，打开日志错误如下：123[WARNING] Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &apos;ProtocolError(&apos;Connection aborted.&apos;, timeout(&apos;timed out&apos;))&apos;: /buckets/open2lstore/objects/MjAyMzAzMjUv6KGl5YWF5Y2P6K6uMjAyMjA5MTXmiavmj4_ku7YucGRm/uploads/641e55eff67b72651c9d93c0region09cn-east-2/1None_ResponseInfo__response:None, exception:HTTPConnectionPool(host=&apos;upload-cn-east-2.qiniup.com&apos;, port=80): Max retries exceeded with url: /buckets/open2lstore/objects/MjAyMzAzMjUv6KGl5YWF5Y2P6K6uMjAyMjA5MTXmiavmj4_ku7YucGRm/uploads/641e55eff67b72651c9d93c0region09cn-east-2/1 (Caused by ProtocolError(&apos;Connection aborted.&apos;, timeout(&apos;timed out&apos;))), status_code:-1, text_body:None, req_id:None, x_log:None, error:HTTPConnectionPool(host=&apos;upload-cn-east-2.qiniup.com&apos;, port=80): Max retries exceeded with url: /buckets/open2lstore/objects/MjAyMzAzMjUv6KGl5YWF5Y2P6K6uMjAyMjA5MTXmiavmj4_ku7YucGRm/uploads/641e55eff67b72651c9d93c0region09cn-east-2/1 (Caused by ProtocolError(&apos;Connection aborted.&apos;, timeout(&apos;timed out&apos;)) 解决方案一开始我本地开启项目上传10M大小的文件都没有问题，大概拆到了是服务器带宽的问题，因为服务器我买的是腾讯云新用户99一年的服务器，配置都是最低的，于是安装了nload命令去观察上传带宽，果然上传的带宽限制了文件上传的问题。我在官网提了相关错误的报错工单，官网工程师给出的解决方案： 就是修改官网Pyhton SDK的参数，修改后的参数：1234567891011_config = &#123; &apos;default_zone&apos;: zone.Zone(), &apos;default_rs_host&apos;: RS_HOST, &apos;default_rsf_host&apos;: RSF_HOST, &apos;default_api_host&apos;: API_HOST, &apos;default_uc_host&apos;: UC_HOST, &apos;connection_timeout&apos;: 120, # 链接超时为时间为30s &apos;connection_retries&apos;: 3, # 链接重试次数为3次 &apos;connection_pool&apos;: 10, # 链接池个数为10 &apos;default_upload_threshold&apos;: 2 * _BLOCK_SIZE # put_file上传方式的临界默认值&#125; 把connection_timeout连接时间由默认的30秒修改为120秒。 其他在解决过程中学到了一个新的实时测带宽的命令nload。 nload 除了nload，也可以使用speedtest-cli进行网速测评。 speedtest-cli 总结虽然服务器配置较低，如果可以利用起来，还是可以干很多事情的，而且在自己搞的时候，遇到了别人没有遇到过的问题，总结起来，慢慢会的就多了。 坚持学习，总会有收获。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库dat数据导入双引号问题]]></title>
    <url>%2Farticles%2F42107%2F</url>
    <content type="text"><![CDATA[解决Oracle数据库导入dat数据出现的报错：second enclosure string not present。 Oracle 背景今天系统调度跑批，发现17号数据导入有问题。于是用sqlplus、sqlldr手工导入dat数据，打开.log日志有4条数据失败了，提示如下：123456789101112131415Record 36187: Rejected - Error on table T05_HIST_JRNL_FILE_INF, column SMY.second enclosure string not presentRecord 36188: Rejected - Error on table T05_HIST_JRNL_FILE_INF, column SMY.second enclosure string not presentRecord 43289: Rejected - Error on table T05_HIST_JRNL_FILE_INF, column SMY.second enclosure string not presentRecord 43290: Rejected - Error on table T05_HIST_JRNL_FILE_INF, column SMY.second enclosure string not presentTable T05_HIST_JRNL_FILE_INF: 54833 Rows successfully loaded. 4 Rows not loaded due to data errors. 0 Rows not loaded because all WHEN clauses were failed. 0 Rows not loaded because all fields were null. 大概意思是引号缺失，上网查了一下引号可以没有，或者成对出现， 解决方案：打开报错的dat数据，搜索找到双引号并删除，重新导入就解决了。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Element-ui框架el-date-picker的清除之后NULL的问题]]></title>
    <url>%2Farticles%2F63642%2F</url>
    <content type="text"><![CDATA[问题描述在写一个高级筛选的VUE代码，使用到了el-date-picker日期选择器组件，设置了daterange类型，并且设置了可以清除的功能。但是使用清除之后，在提交高级筛选的查询，发现报错了，查了好久的问题所在，记录一下。 VUE Element-UI 下面是VUE开发的高级筛选，el-date-picker日期选择器组件使用清除功能之后，组件变量会设置NULL。 报错报错的截图。 123456789101112131415161718192021222324252627282930313233343536vue.runtime.esm.js?2b0e:619 [Vue warn]: Error in v-on handler: &quot;TypeError: Cannot read properties of null (reading &apos;0&apos;)&quot;found in---&gt; &lt;ElButton&gt; at packages/button/src/button.vue &lt;ElRow&gt; &lt;ElForm&gt; at packages/form/src/form.vue &lt;ApiFilter&gt; at src/services/info/ApiFilter.vue &lt;Api&gt; at src/views/info/api.vue &lt;AppMain&gt; at src/layout/components/AppMain.vue &lt;Layout&gt; at src/layout/index.vue &lt;App&gt; at src/App.vue &lt;Root&gt;warn @ vue.runtime.esm.js?2b0e:619logError @ vue.runtime.esm.js?2b0e:1884globalHandleError @ vue.runtime.esm.js?2b0e:1879handleError @ vue.runtime.esm.js?2b0e:1839invokeWithErrorHandling @ vue.runtime.esm.js?2b0e:1862invoker @ vue.runtime.esm.js?2b0e:2179invokeWithErrorHandling @ vue.runtime.esm.js?2b0e:1854Vue.$emit @ vue.runtime.esm.js?2b0e:3882handleClick @ element-ui.common.js?5c96:9417invokeWithErrorHandling @ vue.runtime.esm.js?2b0e:1854invoker @ vue.runtime.esm.js?2b0e:2179original._wrapper @ vue.runtime.esm.js?2b0e:6911vue.runtime.esm.js?2b0e:1888 TypeError: Cannot read properties of null (reading &apos;0&apos;) at VueComponent.filterQuery (ApiFilter.vue?9380:279:1) at click (ApiFilter.vue?f585:309:1) at invokeWithErrorHandling (vue.runtime.esm.js?2b0e:1854:1) at VueComponent.invoker (vue.runtime.esm.js?2b0e:2179:1) at invokeWithErrorHandling (vue.runtime.esm.js?2b0e:1854:1) at Vue.$emit (vue.runtime.esm.js?2b0e:3882:1) at VueComponent.handleClick (element-ui.common.js?5c96:9417:1) at invokeWithErrorHandling (vue.runtime.esm.js?2b0e:1854:1) at HTMLButtonElement.invoker (vue.runtime.esm.js?2b0e:2179:1) at original._wrapper (vue.runtime.esm.js?2b0e:6911:1) 原因直接说问题所在，使用el-date-picker日期选择器组件的清除功能，会把组件的变量设置NULL，所以导致在获取时间的时候报错。 解决方案1234567if (this.create_date !== null &amp;&amp; this.create_date !== &apos;&apos; &amp;&amp; this.create_date !== undefined) &#123; this.searchData.create_time_start = this.create_date[0] + &apos; 00:00:00&apos; this.searchData.create_time_end = this.create_date[1] + &apos; 23:59:59&apos;&#125; else &#123; this.searchData.create_time_start = &apos;&apos; this.searchData.create_time_end = &apos;&apos;&#125;]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>Element-UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端脚手架管理系统模板]]></title>
    <url>%2Farticles%2F38070%2F</url>
    <content type="text"><![CDATA[记录下前端好用的管理系统模板脚手架（引用参考） https://mp.weixin.qq.com/s/j6Nwmn-f9L2w83sy_t71Pg https://mp.weixin.qq.com/s/NOoGMkF3Ct2OobCopltTsg https://mp.weixin.qq.com/s/sznpqdGGWLffI8pnBdGB4w 持续更新中。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>REACT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库连接工具PLSQL快捷配置]]></title>
    <url>%2Farticles%2F13254%2F</url>
    <content type="text"><![CDATA[PLSQL工具日常快捷配置说明 正所谓“功先利其事，必先利其器”，把PLSQL的快捷方式设置好，在写SQL以及操作方面会大大提高效率，分享下本人PLSQL的快捷配置： 显示行号 用户界面 &gt; 编辑器 &gt; 显示行号 可以显示SQL窗口的行号。 关键词大写 用户界面 &gt; 编辑器 &gt; 关键词大小写 &gt; 大写 这个看个人喜好，如果想把关键字都大写可以进行设置，这样写出来的SQL也比较好看，关键字都是大写并且带颜色。 高亮显示编辑行 用户界面 &gt; 编辑器 &gt; 高亮显示编辑行 可以高亮SQL窗口的编辑行，一下子就找到鼠标在哪，方便继续编辑SQL。 延时tip设置 用户界面 &gt; 代码助手 &gt; 延时 设置自动提示的时间，最小值100，不喜欢立马提示的可以值设置的打点。 不自动提交 窗口类型 &gt; SQL窗口 &gt; 自动提交SQL 设置不自动提交，否则一下子做的危险UPDATE、DELETE等操作，想想都是泪，千万别设置自动提交。 SQL快捷语句 用户界面 &gt; 编辑器 &gt; 自动替换 设置之后，写SQL非常的高效，只需要把缩写写完一个空格，就可以替换设定的SQL语句或关键字。 12345678910111213sf=SELECT * FROMsw=SELECT * FROM WHEREw=WHEREor=ORDER BYorder=ORDER BYij=INNER JOINin=INNER JOINinn=INNER JOINlj=LEFT JOINle=LEFT JOINrj=RIGHT JOINri=RIGHT JOINdrop=DROP TABLE 快捷键配置PLSQL自带了许多快捷键配置，但是习惯了IDE写代码的快捷键，所以对部分配置、以及未配置的功能进行了更改，快捷键配置说明【修改部分】： 序号 功能 快捷键 1 文件/打开/新建(N)/SQL窗口(S) Ctrl+Alt+A 2 文件/关闭/关闭(C) Ctrl+Alt+W 3 编辑/选择/缩进(I) Tab 4 编辑/选择/取消缩进(U) Shift+Tab 5 编辑/选择/注释(O) Ctrl+/ 6 编辑/选择/取消注释(N) Ctrl+Shift+/ 7 编辑/选择/转到行(G) Ctrl+G 8 工具/源/PL/SQL Beautifier Ctrl+Shift+F 9 删除行(Editor:Delete Line) Ctrl+Y 10 PLSQL切换窗口(Editor:Navigate Forward) Alt+Left上一个窗口 11 PLSQL切换窗口(Editor:Navigate Back) Alt+Right下一个窗口 持续更新中。。。。。。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>PLSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle备份expdp与恢复impdp]]></title>
    <url>%2Farticles%2F48068%2F</url>
    <content type="text"><![CDATA[主备恢复流程摘要1、停止【主服务器】tomcat服务(./shutdown.sh) 2、停止【主服务器】oracle监听服务（lsnrctl stop） 3、【主服务器】切换oracle用户进行expdp备份 4、主备服务器传输备份文件（MD5SUM查看是否文件完整） 5、【备服务器】impdp数据恢复 6、启动tomcat服务(./start.sh) 7、启动oracle监听服务（lsnrctl start） 备份前数据库参数设置 备份参数DEFERRED_SEGMENT_CREATION {true | flase}【非必须设置参数】 –true 当该参数值等于true的时候，我们数据库中新创建的表，并且没有insert过任何数据的情况下，采用导出时不会将该表导出， 因为在dba_segments和user_segments是查不到该表的信息，只有当我们插入记录才会在两表中生成段的信息，并能导出该表。 –flase 当此参数为false时，不存在dba_segments和user_segments中的段表也可以通过导出的方式将该表导出。 查询：show parameter DEFERRED_SEGMENT_CREATION; 更改：alter system set DEFERRED_SEGMENT_CREATION=false scope=both; expdp备份目录【必须设置参数】 select * from dba_directories; 创建/修改：create or replace directory 备份目录名称 as ‘备份绝对路径’; 授权：grant read,write on dirrectory 备份目录名称 to 用户; 删除：drop directory 备份目录名称; 普通用户授权导出全库【非必要设置参数】： grant datadump_exp_full_database to test; 备份命令普通用户：expdp 账户/密码 directory=备份目录名称 dumpfile=备份文件名称.dmp logfile=备份日志名称.log compression=all reuse_dumpfiles=y 例子：1expdp pas/pas directory=DMPDID_PAS dumpfile=AESPAS_20230213_01.dmp logfile=AESPAS_20230213_01.log compression=all reuse_dumpfiles=y system用户：expdp system/密码 directory=备份目录名称 schema=策略名称 dumpfile=备份文件名称.dmp logfile=备份日志名称.log compression=all reuse_dumpfiles=y – directory：指定转储文件和日志文件所在的目录（数据库设置） – dumpfile：备份文件的名称 – schema：策略名称，如果system导出全库去掉schema参数，加上full=y – logfile：备份日志名称 – reuse_dumpfiles：是否覆盖备份文件，Y覆盖N不覆盖 – FULL：指定数据库模式导出,默认为N，{Y | N}为Y时,标识执行数据库导出 – tables：导出指定的表名，%代表通配符，如果是system可以加上：策略名称.表名 – exclude：排除指定的表名不导出 – content：导出内容{ALL | DATA_ONLY | METADATA_ONLY}当设置CONTENT为ALL时,将导出对象定义及其所有数据.为DATA_ONLY时,只导出对象数据,为METADATA_ONLY时,只导出对象定义 – FLASHBACK_TIME：指定导出特定时间点的表数据（FLASHBACK_TIME=“TO_TIMESTAMP(’25-08-2004 14:35:00’,’DD-MM-YYYY HH24:MI:SS’)”） – FILESIZE：指定导出文件的最大尺寸,默认为0 – NOLOGFILE：该选项用于指定禁止生成导出日志文件,默认值为N – QUERY：用于指定过滤导出数据的where条件 – compression：ALL ：对导出的元数据和表数据都进行压缩，得到的导出文件是最小的，耗时也是最长的。DATA_ONLY ：仅对表数据进行压缩，对于大数据量的导出效果明显，会比METADATA_ONLY方式得到更小的压缩文件。METADATA_ONLY ：仅对元数据进行压缩，而不会对表数据进行压缩，这种压缩执行后效果一般不是很明显，不过速度比较快。NONE ：不进行任何的压缩，导出后的文件也是最大的。DEFAULT ：默认方式，即不指定COMPRESSION参数，会采用默认的压缩方式METADATA_ONLY。 导出表：expdp 账户/密码 directory=备份目录名称 dumpfile=备份文件名称.dmp logfile=备份日志名称.log compression=all reuse_dumpfiles=y tables=表名称1,表名称2,表名称N 恢复命令impdp 账户/密码 directory=备份目录名称 dumpfile=备份文件名称.dmp exclude=statistics table_exists_action=replace例子：1impdp pas/pas directory=DMPDID_PAS dumpfile=AESPAS_20230213_01.dmp exclude=statistics table_exists_action=replace 查看存在的job：1SELECT * FROM DBA_DATAPUMP_JOBS;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NODE17或者18版本启动NODE16版本的项目:0308010C:digital envelope routines::unsupported]]></title>
    <url>%2Farticles%2F40755%2F</url>
    <content type="text"><![CDATA[问题背景前端项目open2lui一直都用的是node/16.9.1版本，最近用n更新了最新版、lts版本，分别是node/18.14.0、node/19.6.0，完了用18活着19版本npm去运行npm run dev的时候报错了，导致项目起不来，后台查询资料解决了高版本启动项目的问题。 NODE VUE 在项目的package.json文件中记录了npm scripts，如下：12345678910111213141516&quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vue-cli-service serve --open --copy --mode development&quot;, &quot;devs&quot;: &quot;vue-cli-service serve --open --copy --https --mode development&quot;, &quot;prod&quot;: &quot;vue-cli-service serve --open --copy --mode production&quot;, &quot;prods&quot;: &quot;vue-cli-service serve --open --copy --https --mode production&quot;, &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;, &quot;lint-fix&quot;: &quot;eslint --ext .js,.vue src --fix&quot;, &quot;build&quot;: &quot;vue-cli-service build --report&quot;, &quot;build:prod&quot;: &quot;vue-cli-service build --report --mode production --dest dist&quot;, &quot;build:dev&quot;: &quot;vue-cli-service build --report --mode development --dest dist&quot;, &quot;preview&quot;: &quot;node build/index.js --preview&quot;, &quot;new&quot;: &quot;plop&quot;, &quot;svgo&quot;: &quot;svgo -f src/icons/svg --config=src/icons/svgo.yml&quot;, &quot;test:unit&quot;: &quot;jest --clearCache &amp;&amp; vue-cli-service test:unit&quot;, &quot;test:ci&quot;: &quot;npm run lint &amp;&amp; npm run test:unit&quot;&#125;, 用18/19高版本的node运行npm run dev，发生了错误。 错误123456789101112131415161718192021222324252627Error: error:0308010C:digital envelope routines::unsupported at new Hash (node:internal/crypto/hash:71:19) at Object.createHash (node:crypto:133:10) at module.exports (/Users/gaomingliang/gitee/open2lui/node_modules/webpack/lib/util/createHash.js:135:53) at NormalModule._initBuildHash (/Users/gaomingliang/gitee/open2lui/node_modules/webpack/lib/NormalModule.js:417:16) at handleParseError (/Users/gaomingliang/gitee/open2lui/node_modules/webpack/lib/NormalModule.js:471:10) at /Users/gaomingliang/gitee/open2lui/node_modules/webpack/lib/NormalModule.js:503:5 at /Users/gaomingliang/gitee/open2lui/node_modules/webpack/lib/NormalModule.js:358:12 at /Users/gaomingliang/gitee/open2lui/node_modules/loader-runner/lib/LoaderRunner.js:373:3 at iterateNormalLoaders (/Users/gaomingliang/gitee/open2lui/node_modules/loader-runner/lib/LoaderRunner.js:214:10) at Array.&lt;anonymous&gt; (/Users/gaomingliang/gitee/open2lui/node_modules/loader-runner/lib/LoaderRunner.js:205:4) at Storage.finished (/Users/gaomingliang/gitee/open2lui/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:55:16) at /Users/gaomingliang/gitee/open2lui/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:91:9 at /Users/gaomingliang/gitee/open2lui/node_modules/graceful-fs/graceful-fs.js:123:16 at FSReqCallback.readFileAfterClose [as oncomplete] (node:internal/fs/read_file_context:68:3) &#123; opensslErrorStack: [ &apos;error:03000086:digital envelope routines::initialization error&apos; ], library: &apos;digital envelope routines&apos;, reason: &apos;unsupported&apos;, code: &apos;ERR_OSSL_EVP_UNSUPPORTED&apos;&#125;Node.js v18.14.0npm noticenpm notice New minor version of npm available! 9.3.1 -&gt; 9.4.2npm notice Changelog: https://github.com/npm/cli/releases/tag/v9.4.2npm notice Run npm install -g npm@9.4.2 to update!npm notice 问题原因对前端不是特别精通，具体什么原因上网查了下，大致理解原因：出现这个错误是因为node.js V17、18、19高版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响. 解决方案 方案一 在控制台中进行变量设置：1export NODE_OPTIONS=--openssl-legacy-provider 把NODE_OPTIONS变量设置为环境变量，在运行的时候直接export导入，npm run dev运行。 方案二 直接修改package.json scripts内容如下：1export NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve --open --copy --mode development 运行npm run dev，高版本node的问题解决。但是，这么处理有个问题，就是其他的script脚本也需要加上变量，不如直接在控制台活着配置文件中添加。 开发工具IDE：WebStormOS：MacOSnode多版本管理用的为n。 坚持学习。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>NPM</tag>
        <tag>NODE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Window Server 2012R2添加我的电脑]]></title>
    <url>%2Farticles%2F7239%2F</url>
    <content type="text"><![CDATA[新服务器刚装的Window Server 2012R2系统，打开服务器发现找不到我的电脑，需要对其进行简单操作下才可以显示。 Window Server 系统版本 名称 版本 服务器系统 Windows Server2012 R2 Standard 我的电脑1、运行win徽标键+R，输入下列代码：1rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0 逗号一定要用英文逗号,逗号一定要用英文逗号,逗号一定要用英文逗号, 2、确定之后，会出现以下设置配置的项目，勾选我的电脑以及需要桌面显示快捷入口。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Window Server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle报错监听TNS-01155]]></title>
    <url>%2Farticles%2F4107%2F</url>
    <content type="text"><![CDATA[Oracle TNS-01155 背景今天对线上数据库进行expdp备份，先lsntctl stop停止了监听，然后expdp进行数据库备份，备份完之后在启动监听发现直接报：TNS-01155的错误。 解决方案：找到Oracle数据库的listener.ora文件中，vim删除以下内容代码： 启动监听]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows安装2个Tomcat]]></title>
    <url>%2Farticles%2F27869%2F</url>
    <content type="text"><![CDATA[Java Tomcat 背景 在Windows上运行Tomcat6、Tomcat8，Tomcat与对应的Java有版本关系。 环境 id Tomcat版本 Java版本 1 6 1.6 2 8 1.8 特殊说明第一套Tomcat6与Java1.6正常配置，这里不做详细描述 操作方式安装JDK1.8与TOMCAT8，环境已经已存在tomcat6，如果只有一个tomcat不需要设置。TOMCAT8/Bin/startup.bat、TOMCAT8/bin/setclasspath.bat最上面添加：123456789rem =====================================================================rem tomcatSET CATALINA_HOME=D:\apache-tomcat-8.5.59SET CATALINA_BASE=D:\apache-tomcat-8.5.59SET CATALINA_TMPDIR=D:\apache-tomcat-8.5.59\temprem javaSET JAVA_HOME=C:\Program Files\Java\jdk1.8.0_271rem ===================================================================== 坚持学习。。。。。。！！！。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE之input只允许输入数字]]></title>
    <url>%2Farticles%2F18893%2F</url>
    <content type="text"><![CDATA[加工INPUT标签，只允许输入数字 VUE INPUT 在写前端代码的时候，经常会遇到手机号的input输入框，除了位数限制，还有数字等判断，对input进行加工，满足纯数字输入： 方式一：直接用oninput事件处理输入的内容，正则匹配内容1234567891011&lt;el-input v-model.trim=&quot;formData.start&quot; placeholder=&quot;文档转换的起始页码，默认首页开始&quot; :size=&quot;inputAttrs.size&quot; :maxlength=&quot;formDataLimit.start&quot; :clearable=&quot;inputAttrs.clear&quot; :show-word-limit=&quot;inputAttrs.limit&quot; :prefix-icon=&quot;inputAttrs.prefixIcon&quot; :disabled=&quot;!formData.mode&quot; oninput=&quot;this.value=this.value.replace(/[^\d]/g,&apos;&apos;);&quot;/&gt; 方式二：直接使用Element-UI的el-input-number组件。1&lt;el-input-number v-model=&quot;num&quot; @change=&quot;handleChange&quot; :min=&quot;1&quot; :max=&quot;10&quot; label=&quot;描述文字&quot;&gt;&lt;/el-input-number&gt; END]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE富文本编辑器学习]]></title>
    <url>%2Farticles%2F8950%2F</url>
    <content type="text"><![CDATA[VUE 富文本编辑器 背景 最近的OpenTool平台集成了SQLBase功能，大致就是采集日常用的SQL语句，供使用的人参考，所以在富文本这搜索一下，自己使用的是wangeditor（国产）。 参考下面2个文章是 11款vue富文本编辑器推荐：https://www.geekku.com/spec/vue/1574.html 最好用的8款Vue富文本编辑器测评与推荐：https://kalacloud.com/blog/vue-richtext-editor/ 学习国内外有很多VUE富文本组件，有TinyMCE、CKEditor5等等，太多了，在本次开发中我使用的wangeditor，是一位国内友人开源的一款富文本，总体来说文档、使用还是很方便的。 官网：https://www.wangeditor.com/ 具体的代码、ISSUE、API都有很详细的说明，而且还支持二次开发。 坚持每天学习。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pycharm出现Non-Project-Files-Protection的解决方法]]></title>
    <url>%2Farticles%2F62345%2F</url>
    <content type="text"><![CDATA[Pycharm打开Python项目出现Non Project Files Protection提示，并且处理项目文件需要确认，度娘上找了下解决方案，记录一下 Python Pycharm 从远程git仓库clone项目的时候，如果项目包含.idea文件夹，直接用Pycharm工具打开的时候，会提示：Non Project Files Protection。关闭Pycharm，找到项目目录，删除.idea文件夹即可。 win 1.需要设置文件夹显示隐藏文件、文件夹2.资源管理器删除.idea文件夹 MacOS 123cd 项目目录llrm -rf .idea Pycharm工具重新打开项目。]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端栅格布局xs sm md lg xl详解]]></title>
    <url>%2Farticles%2F6149%2F</url>
    <content type="text"><![CDATA[在写VUE的时候用到了Layout布局组件，el-col里面有多个属性是控制大小的，一直都是搞后台的，css基本是小白，查阅资料记录一下学习的内容。 前端 看下官网实例，响应式设计：123456&lt;el-row :gutter=&quot;10&quot;&gt; &lt;el-col :xs=&quot;8&quot; :sm=&quot;6&quot; :md=&quot;4&quot; :lg=&quot;3&quot; :xl=&quot;1&quot;&gt;&lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;&lt;/el-col&gt; &lt;el-col :xs=&quot;4&quot; :sm=&quot;6&quot; :md=&quot;8&quot; :lg=&quot;9&quot; :xl=&quot;11&quot;&gt;&lt;div class=&quot;grid-content bg-purple-light&quot;&gt;&lt;/div&gt;&lt;/el-col&gt; &lt;el-col :xs=&quot;4&quot; :sm=&quot;6&quot; :md=&quot;8&quot; :lg=&quot;9&quot; :xl=&quot;11&quot;&gt;&lt;div class=&quot;grid-content bg-purple&quot;&gt;&lt;/div&gt;&lt;/el-col&gt; &lt;el-col :xs=&quot;8&quot; :sm=&quot;6&quot; :md=&quot;4&quot; :lg=&quot;3&quot; :xl=&quot;1&quot;&gt;&lt;div class=&quot;grid-content bg-purple-light&quot;&gt;&lt;/div&gt;&lt;/el-col&gt;&lt;/el-row&gt; 里面包含了xs sm md lg xl属性来控制宽度，对这几个值进行详解： xl【extra large】：屏幕 &gt;= 1920px，超大显示器 lg【large】：1200px &lt;= 屏幕 &lt;= 1920px，台式1920*1080显示器 md【middle】：992px&lt;= 屏幕 &lt;= 1200px，适合笔记本 sm【small】：768px &lt;= 屏幕 &lt;= 992px，适合平板 xs【extra small】：屏幕&lt;=768，手机端屏幕 优点 如果屏幕的大小发生改变，系统会根据设置的大小进行分别显示，感觉挺好用的。 测试 正常分辨率 更改分辨率]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bash脚本之自动解压zip]]></title>
    <url>%2Farticles%2F42651%2F</url>
    <content type="text"><![CDATA[Bash Bash脚本系列 Bash脚本系列 记录日常服务器运维用到的Bash脚本。 简介每天新接收新的zip文件，并且zip文件压缩的时候是直接集成了文件，没有把文件放在一个目录里面在进行压缩。 源码12345678910111213141516#!/usr/bin/bashLDIR=/home/mingliang.gao/newdircd $LDIRfiles=$(ls | grep &quot;.zip&quot;)for file in $filesdo echo $file NAME=`echo &quot;$file&quot; | cut -d&apos;.&apos; -f1` #EXTENSION=`echo &quot;$file&quot; | cut -d&apos;.&apos; -f2` if [ ! -e &quot;$&#123;NAME&#125;&quot; ]; then unzip $&#123;LDIR&#125;/$&#123;file&#125; -d $&#123;LDIR&#125;/$&#123;NAME&#125; fidone 配置LDIR：*.zip文件所在的目录 系列其他Bash系列请点击tag标签进行查看。 Bash脚本系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Linux</category>
        <category>Bash</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
        <tag>Bash脚本系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle手工导入dat数据]]></title>
    <url>%2Farticles%2F30542%2F</url>
    <content type="text"><![CDATA[最近开始搞Oracle数据库，看存储过程学习了一下Oracle怎么导入dat数据的，这里记录一下，方便日后查询使用。 Oracle sqlplus sqlldr SQL语句 第一步：生成ctl文件 1/u01/app/oracle/product/11.2.0/dbhome_1/bin/sqlplus pas/pas @/home/oracle/pas_control/control.sql T01_CPCT_BSC_INF_FILE_H T01_CPCT_BSC_INF_FILE_H.dat /data/gtp/20220830/ /u01/app/oracle/product/11.2.0/dbhome_1/bin/sqlplus：为sqlplus命令的绝对路径，根据环境不同进行更改 pas/pas：账户/密码 @/home/oracle/pas_control/control.sql：下面会有control.sql文件详解，这里也是绝对路径 T01_CPCT_BSC_INF_FILE_H：表名，control.sql文件会用到列举表字段信息 T01_CPCT_BSC_INF_FILE_H.dat：dat文件名称 /data/gtp/20220830/：dat数据存放的绝对路径 第二步：根据生成的ctl导入数据 1/u01/app/oracle/product/11.2.0/dbhome_1/bin/sqlldr userid=pas/pas control=/data/gtp/20220830/T01_CPCT_BSC_INF_FILE_H.ctl log=/data/gtp/20220830/T01_CPCT_BSC_INF_FILE_H.log direct=true /u01/app/oracle/product/11.2.0/dbhome_1/bin/sqlldr：sqlldr命令的绝对路径 userid=pas/pas：账户/密码 control=/data/gtp/20220830/T01_CPCT_BSC_INF_FILE_H.ctl：执行第一步sqlplus会生成新的ctl文件，存放的导入命令 log=/data/gtp/20220830/T01_CPCT_BSC_INF_FILE_H.log：导入日志 direct=true：是否为直接路径 sqlldr是Oracle数据加载工具，还有bad、data、discard、skip等很多参数，详细查看man命令或者官网。 control.sql目的产生新的ctl文件，导入数据时候使用。 12345678910111213141516171819202122232425262728293031323334353637383940414243set echo offset heading offset verify offset feedback offset show offset trim offset pages 0set concat onset lines 300set trimspool onset trimout onspool &amp;3&amp;1..ctlselect &apos;LOAD DATA&apos;||chr (10)|| &apos;CHARACTERSET ZHS16GBK&apos;||chr (10)|| &apos;INFILE &apos;&apos;&amp;3&amp;2&apos;&apos;&apos;||chr (10)|| &apos;APPEND INTO TABLE &apos;||table_name||chr (10)|| &apos;FIELDS TERMINATED BY &quot;&quot; optionally enclosed by &apos;&apos;&quot;&apos;&apos;&apos;||chr (10)|| &apos;TRAILING NULLCOLS&apos;||chr (10)||&apos;(&apos;from USER_TABLESwhere table_name = upper (&apos;&amp;1&apos;);select decode (column_id, 1, &apos; &apos;, &apos; , &apos;)|| rpad (column_name, 33, &apos; &apos;)|| decode (data_type, &apos;VARCHAR2&apos;, &apos;CHAR(2000) NULLIF (&apos;||column_name||&apos;=BLANKS)&apos;, &apos;FLOAT&apos;, &apos;DECIMAL EXTERNAL NULLIF(&apos;||column_name||&apos;=BLANKS)&apos;, &apos;NUMBER&apos;, decode (data_precision, 0, &apos;INTEGER EXTERNAL NULLIF (&apos;||column_name|| &apos;=BLANKS)&apos;, decode (data_scale, 0, &apos;INTEGER EXTERNAL NULLIF (&apos;|| column_name||&apos;=BLANKS)&apos;, &apos;DECIMAL EXTERNAL NULLIF (&apos;|| column_name||&apos;=BLANKS)&apos;)), &apos;DATE&apos;, &apos;DATE &quot;MM/DD/YY&quot; NULLIF (&apos;||column_name||&apos;=BLANKS)&apos;, null)from user_tab_columnswhere table_name = upper (&apos;&amp;1&apos;)order by column_id;select &apos;)&apos;from sys.dual;spool offexit]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之企业微信消息]]></title>
    <url>%2Farticles%2F33254%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述企业微信消息通知腾讯企业微信官网提供一整套WebHook API接口，内容相当丰富，可以实现内部、第三方等各种各样的功能详情参考reference urls 设计运用requests模拟API请求，这里主要实现了2大请求： ACCESS TOKEN：认证token获取 SEND MESSAGE：发送消息 使用12qywx_lib = QYWXLib(corp_id=企业号标识, secret=管理组凭证密钥, agent_id=机器人应用ID)qywx_lib.send_to_user_by_markdown(to_user, message) 初始化必须的参数： corp_id: 企业号标识 secret: 管理组凭证密钥 agent_id: 机器人应用ID 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: 企业微信消息通知 腾讯企业微信官网提供一整套WebHook API接口，内容相当丰富，可以实现内部、第三方等各种各样的功能 详情参考reference urlsbase_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2022/9/14&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;quality-inspect&quot;usage: qywx_lib = QYWXLib(corp_id=企业号标识, secret=管理组凭证密钥, agent_id=机器人应用ID) qywx_lib.send_to_user_by_markdown(to_user, message) 初始化必须的参数： - corp_id: 企业号标识 - secret: 管理组凭证密钥 - agent_id: 机器人应用IDdesign: 运用requests模拟API请求，这里主要实现了2大请求： - ACCESS TOKEN：认证token获取 - SEND MESSAGE：发送消息reference urls: - ACCESS TOKEN：https://developer.work.weixin.qq.com/document/path/91039 - 发送应用消息：https://developer.work.weixin.qq.com/document/path/90236 - 全局错误码：https://developer.work.weixin.qq.com/document/path/90313#10649 -------------------------------------------------------------------------------------- 企业微信API response： &#123; &quot;errcode&quot; : 0, &quot;errmsg&quot; : &quot;ok&quot;, &quot;invaliduser&quot; : &quot;userid1|userid2&quot;, &quot;invalidparty&quot; : &quot;partyid1|partyid2&quot;, &quot;invalidtag&quot;: &quot;tagid1|tagid2&quot;, &quot;unlicenseduser&quot; : &quot;userid3|userid4&quot;, &quot;msgid&quot;: &quot;xxxx&quot;, &quot;response_code&quot;: &quot;xyzxyz&quot; &#125; -------------------------------------------------------------------------------------- - 错误码查询工具：https://open.work.weixin.qq.com/devtool/query - 发消息API参考：https://developer.work.weixin.qq.com/document/path/90236 - MARKDOWN语法：https://developer.work.weixin.qq.com/document/path/90236#%E6%94%AF%E6%8C%81%E7%9A%84markdown%E8%AF%AD%E6%B3%95python version: python3Enjoy the good time everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python qywx_lib.py# ------------------------------------------------------------import requestsfrom deploy.status import Statusfrom config import QYWX_SEND_MESSAGE, \ QYWX_ACCESS_TOKEN, DEBUGfrom deploy.logger import logger as LOGclass QYWXLib(object): &quot;&quot;&quot; QYWX class &quot;&quot;&quot; def __init__(self, corp_id, secret, agent_id): &quot;&quot;&quot; Initialize parameter :param corp_id: 企业号标识 :param secret: 管理组凭证密钥 :param agent_id: 机器人应用ID &quot;&quot;&quot; if DEBUG: LOG.debug(&apos;QYWX lib is loading.&apos;) self.CORP_ID = corp_id self.SECRET = secret self.AGENT_ID = agent_id self.token = self.__init_token() # 每次实例化调用初始化access token def __init_token(self): &quot;&quot;&quot; Initialize access token :return: string 请求方式： GET（HTTPS） 请求地址： https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=ID&amp;corpsecret=SECRET - ID：企业号标识 - SECRET：管理组凭证密钥 返回示例： &#123; &quot;errcode&quot;: 0, &quot;errmsg&quot;: &quot;ok&quot;, &quot;access_token&quot;: &quot;accesstoken000001&quot;, &quot;expires_in&quot;: 7200 &#125; - errcode：出错返回码，为0表示成功，非0表示调用失败 - errmsg：返回码提示语 - access_token：获取到的凭证，最长为512字节 - expires_in：凭证的有效时间（秒） ACCESS TOKEN API参考：https://developer.work.weixin.qq.com/document/path/91039 TODO 7200秒（2小时）后续优化为缓存机制，避免在有效期内频繁调用 &quot;&quot;&quot; if DEBUG: LOG.debug(&apos;QYWX lib start to apply access token.&apos;) data = &#123; &quot;corpid&quot;: self.CORP_ID, &quot;corpsecret&quot;: self.SECRET &#125; req = requests.get(url=QYWX_ACCESS_TOKEN, params=data) res = req.json() if res.get(&quot;errcode&quot;) == 0 and res.get(&quot;errmsg&quot;) == &quot;ok&quot;: if DEBUG: LOG.debug(&apos;QYWX lib access token apply success.&apos;) return res.get(&quot;access_token&quot;) else: LOG.error(&apos;QYWX lib access token apply failure: %s&apos; % res.get(&apos;errmsg&apos;)) return None def check_token(self): &quot;&quot;&quot; check access token is or not available :return: bool &quot;&quot;&quot; return True if self.token else False def send_to_user_by_markdown(self, to_user: list, content: str, **kwargs): &quot;&quot;&quot; 用户私发消息 &gt;&gt;&gt; markdown语法消息体 send message to user list by the content of markdown type data :param to_user: 企业微信用户ID列表，列表类型参数 :param content: markdown消息体 :param kwargs: 其他key-value参数 :return: json 请求方式：POST（HTTPS） 请求地址： https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN - ACCESS_TOKEN：access token 请求数据： &#123; &quot;touser&quot; : &quot;UserID1|UserID2|UserID3&quot;, &quot;toparty&quot; : &quot;PartyID1|PartyID2&quot;, &quot;totag&quot; : &quot;TagID1 | TagID2&quot;, &quot;msgtype&quot;: &quot;markdown&quot;, &quot;agentid&quot; : 1, &quot;markdown&quot;: &#123; &quot;content&quot;: &quot;&quot; &#125;, &quot;enable_duplicate_check&quot;: 0, &quot;duplicate_check_interval&quot;: 1800 &#125; 参数说明： 参数 是否必须 说明 touser 否 成员ID列表（消息接收者，多个接收者用‘|’分隔，最多支持1000个）。特殊情况：指定为@all，则向关注该企业应用的全部成员发送 toparty 否 部门ID列表，多个接收者用‘|’分隔，最多支持100个。当touser为@all时忽略本参数 totag 否 标签ID列表，多个接收者用‘|’分隔，最多支持100个。当touser为@all时忽略本参数 msgtype 是 消息类型，此时固定为：markdown agentid 是 企业应用的id，整型。企业内部开发，可在应用的设置页面查看；第三方服务商，可通过接口 获取企业授权信息 获取该参数值 content 是 markdown内容，最长不超过2048个字节，必须是utf8编码 enable_duplicate_check 否 表示是否开启重复消息检查，0表示否，1表示是，默认0 duplicate_check_interval 否 表示是否重复消息检查的时间间隔，默认1800s，最大不超过4小时 返回示例： &#123; &quot;errcode&quot; : 0, &quot;errmsg&quot; : &quot;ok&quot;, &quot;invaliduser&quot; : &quot;userid1|userid2&quot;, &quot;invalidparty&quot; : &quot;partyid1|partyid2&quot;, &quot;invalidtag&quot;: &quot;tagid1|tagid2&quot;, &quot;unlicenseduser&quot; : &quot;userid3|userid4&quot;, &quot;msgid&quot;: &quot;xxxx&quot;, &quot;response_code&quot;: &quot;xyzxyz&quot; &#125; - errcode：返回码 - errmsg：对返回码的文本描述内容 - invaliduser：不合法的userid，不区分大小写，统一转为小写 - invalidparty：不合法的partyid - invalidtag：不合法的标签id - unlicenseduser：没有基础接口许可(包含已过期)的userid - msgid：消息id，用于撤回应用消息 - response_code：仅消息类型为“按钮交互型”，“投票选择型”和“多项选择型”的模板卡片消息返回，应用可使用response_code调用更新模版卡片消息接口，24小时内有效，且只能使用一次 发消息API参考：https://developer.work.weixin.qq.com/document/path/90236 MARKDOWN语法：https://developer.work.weixin.qq.com/document/path/90236#%E6%94%AF%E6%8C%81%E7%9A%84markdown%E8%AF%AD%E6%B3%95 &quot;&quot;&quot; if not self.token: return Status(212, &apos;failure&apos;, &apos;请检查access token是否获取成功&apos;, &#123;&#125;).json() if not to_user: return Status(212, &apos;failure&apos;, &apos;缺少用户列表&apos;, &#123;&#125;).json() if not isinstance(to_user, list): return Status(213, &apos;failure&apos;, &apos;用户列表必须为List类型&apos;, &#123;&#125;).json() if not content: return Status(212, &apos;failure&apos;, &apos;缺少消息内容&apos;, &#123;&#125;).json() url = &quot;%s?access_token=%s&quot; % (QYWX_SEND_MESSAGE, self.token) data = &#123; &quot;touser&quot;: &quot;|&quot;.join(to_user), &quot;msgtype&quot;: &quot;markdown&quot;, &quot;agentid&quot;: self.AGENT_ID, &quot;markdown&quot;: &#123; &quot;content&quot;: content &#125;, &quot;enable_duplicate_check&quot;: 0, &quot;duplicate_check_interval&quot;: 1800 &#125; req = requests.post(url=url, json=data) res = req.json() if res.get(&quot;errcode&quot;) == 0 and res.get(&quot;errmsg&quot;) == &quot;ok&quot;: return Status(100, &apos;success&apos;, &apos;成功&apos;, &#123;&#125;).json() else: return Status(501, &apos;failure&apos;, res.get(&apos;errmsg&apos;), &#123;&#125;).json() 官网API教程 ACCESS TOKEN：https://developer.work.weixin.qq.com/document/path/91039 发送应用消息：https://developer.work.weixin.qq.com/document/path/90236 全局错误码：https://developer.work.weixin.qq.com/document/path/90313#10649 1234567891011企业微信API response：&#123; &quot;errcode&quot; : 0, &quot;errmsg&quot; : &quot;ok&quot;, &quot;invaliduser&quot; : &quot;userid1|userid2&quot;, &quot;invalidparty&quot; : &quot;partyid1|partyid2&quot;, &quot;invalidtag&quot;: &quot;tagid1|tagid2&quot;, &quot;unlicenseduser&quot; : &quot;userid3|userid4&quot;, &quot;msgid&quot;: &quot;xxxx&quot;, &quot;response_code&quot;: &quot;xyzxyz&quot;&#125; 错误码查询工具：https://open.work.weixin.qq.com/devtool/query 发消息API参考：https://developer.work.weixin.qq.com/document/path/90236 MARKDOWN语法：https://developer.work.weixin.qq.com/document/path/90236#%E6%94%AF%E6%8C%81%E7%9A%84markdown%E8%AF%AD%E6%B3%95 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之dtalk钉钉消息]]></title>
    <url>%2Farticles%2F58292%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述DingApi类，主要用请求dingTalk openApi来操作DingDing进行发消息等操作。目前，只支持机器人推送消息操作类添加了is_avail对access token进行判断是否可用，如果不可用中止程序 设计 官网发消息API：https://developers.dingtalk.com/document/robots/chatbots-send-one-on-one-chat-messages-in-batches/h2-xsq-kwt-wyg Status JSON说明：http://pygo2.top/articles/40461/ 使用12345678json_message = &#123; &quot;title&quot;: &quot;2021-12绩效明细&quot;, &quot;text&quot;: &quot;#### 2021-11绩效明细 \n - 个人存款绩效：278 \n - 贷款绩效：278 \n - 部门履职绩效：278 \n - 存款下降扣发：278 \n - ![screenshot](https://img.alicdn.com/tfs/TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png)&quot;&#125;user = &apos;manager2730&apos;dapi = DingApi()res = dapi.robot2send(message=json_message, to_id=user)print(res) 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: DingTalk Api class, it use to push message 采用单例模式的DingApi类，主要用请求dingTalk openApi来操作DingDing进行发消息等操作。 目前，只支持机器人推送消息操作 类添加了is_avail对access token进行判断是否可用，如果不可用中止程序base_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2021/11/23&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;open2lisapi&quot;usage: json_message = &#123; &quot;title&quot;: &quot;2021-12绩效明细&quot;, &quot;text&quot;: &quot;#### 2021-11绩效明细 \n - 个人存款绩效：278 \n - 贷款绩效：278 \n - 部门履职绩效：278 \n - 存款下降扣发：278 \n - ![screenshot](https://img.alicdn.com/tfs/TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png)&quot; &#125; user = &apos;manager2730&apos; dapi = DingApi() res = dapi.robot2send(message=json_message, to_id=user) print(res)design: DingDing官网开放平台reference urls: 官网发消息API：https://developers.dingtalk.com/document/robots/chatbots-send-one-on-one-chat-messages-in-batches/h2-xsq-kwt-wyg Status JSON说明：http://pygo2.top/articles/40461/python version: python3Enjoy the good life everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;import sysimport jsonimport requestsfrom deploy.utils.base_class import Singletonfrom deploy.utils.status import Statusfrom deploy.config import DTALK_TOKEN_URL, DTALK_BASE_URL, DEBUGfrom deploy.utils.logger import logger as LOGfrom alibabacloud_dingtalk.robot_1_0.client import Client as dingtalkrobot_1_0Clientfrom alibabacloud_tea_openapi import models as open_api_modelsfrom alibabacloud_dingtalk.robot_1_0 import models as dingtalkrobot__1__0_modelsfrom alibabacloud_tea_util import models as util_modelsfrom alibabacloud_tea_util.client import Client as UtilClientclass DtalkLib(object): &quot;&quot;&quot; dingTalk Api class &quot;&quot;&quot; def __init__(self, app_key, app_secret): if DEBUG: LOG.debug(&quot;DingApi class start initialize.&quot;) self.RC = 0 self.app_key = app_key self.app_secret = app_secret self.base_api_url = DTALK_BASE_URL self.token_api_url = DTALK_TOKEN_URL self.msg_type = &apos;sampleMarkdown&apos; self.access_token = self.get_token() self.client = self.create_client() def is_avail(self): &quot;&quot;&quot; 是否有access token，如果没有token，则中止发信息请求 建议用sys.exit()优雅的方式退出 &quot;&quot;&quot; return True if self.access_token else False def close(self): &quot;&quot;&quot; 关闭实例，清除access token &quot;&quot;&quot; self.access_token = &apos;&apos; def get_token(self) -&gt; str: &quot;&quot;&quot; 获取唯一access token，2h有效期 this function is static method, it use to get access token code from dingTalk open api :return: access token result type is string &quot;&quot;&quot; if DEBUG: LOG.debug(&quot;DingApi get access token.&quot;) headers = &#123; &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos; &#125; params = &#123;&quot;appkey&quot;: self.app_key, &quot;appsecret&quot;: self.app_secret&#125; url = &quot;%s%s&quot; % (self.base_api_url, self.token_api_url) try: response = requests.get(url=url, headers=headers, params=params) if response.status_code == 200: json_res = response.json() if json_res and json_res.get(&quot;errcode&quot;) == 0: return json_res.get(&quot;access_token&quot;) except Exception as e: LOG.error(&apos;Initialize dingTalk openApi access token occur error: %s&apos; % e) return &apos;&apos; LOG.error(&apos;Initialize dingTalk openApi get access token failure, please try again later.&apos;) return &apos;&apos; @staticmethod def create_client() -&gt; dingtalkrobot_1_0Client: &quot;&quot;&quot; 初始化账号Client @return: Client @throws Exception &quot;&quot;&quot; config = open_api_models.Config() config.protocol = &apos;https&apos; config.region_id = &apos;central&apos; return dingtalkrobot_1_0Client(config) def robot2send(self, message: json, to_id: str) -&gt; json: &quot;&quot;&quot; use dingtalk openApi to send message :param message: DingDing消息体，为MarkDown语法 :param to_id: 接收人ID :return: json type result status_id: 状态码, status: success or failure, msg: 消息体 data: 数据体（diact类型） 具体说明：http://pygo2.top/articles/40461/ &quot;&quot;&quot; # check access token &amp;&amp; parameters if not self.access_token: return Status( 202, &quot;failure&quot;, &quot;Not found access token.&quot;, &#123;&#125;).status_body batch_send_otoheaders = dingtalkrobot__1__0_models.BatchSendOTOHeaders() batch_send_otoheaders.x_acs_dingtalk_access_token = self.access_token batch_send_otorequest = dingtalkrobot__1__0_models.BatchSendOTORequest( robot_code=self.app_key, user_ids=[to_id], msg_key=self.msg_type, msg_param=json.dumps(message) ) try: response = self.client.batch_send_otowith_options(batch_send_otorequest, batch_send_otoheaders, util_models.RuntimeOptions()) json_resp = &#123; &apos;process&apos;: response.body.process_query_key or &apos;&apos;, &apos;failure&apos;: response.body.invalid_staff_id_list or [], &apos;control&apos;: response.body.flow_controlled_staff_id_list or [] &#125; return Status( 100, &quot;success&quot;, &quot;成功&quot;, json_resp).status_body except Exception as e: msg = &apos;DingTalk send message to [%s] occur error: %s&apos; % (to_id, e) LOG.error(msg) return Status( 601, &quot;failure&quot;, msg, &#123;&#125;).status_body 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之config配置解析]]></title>
    <url>%2Farticles%2F51787%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述用来解析config.yaml配置文件，添加默认值。 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: 解析配置base_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2022/9/14&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;quality-inspect&quot;usage:design:reference urls:python version: python3Enjoy the good time everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python config.py# ------------------------------------------------------------import osimport sysimport yamlimport inspectimport logging# logging.basicConfig()logger = logging.getLogger(__name__)# get current folder, solve is or not frozen of the scriptdef _get_cur_folder(): if getattr(sys, &quot;frozen&quot;, False): return os.path.dirname(os.path.abspath(__file__)) else: cur_folder = os.path.dirname(inspect.getfile(inspect.currentframe())) return os.path.abspath(cur_folder)# get global projects by modedef _get_global_projects(mode=&apos;dev&apos;): if mode not in [&apos;dev&apos;, &apos;prod&apos;]: return None return os.path.join(os.path.join(os.path.join(_get_cur_folder(), &apos;etc&apos;), mode), &apos;projects.json&apos;)# get current run config by modedef _get_config(mode=&apos;dev&apos;): if mode not in [&apos;dev&apos;, &apos;prod&apos;]: return None return os.path.join(os.path.join(os.path.join(_get_cur_folder(), &apos;etc&apos;), mode), &apos;config.yaml&apos;)# default log dirdef __get_log_dir(): return os.path.join(_get_cur_folder(), &apos;log&apos;)# default log dirdef __get_result_dir(): return os.path.join(_get_cur_folder(), &apos;result&apos;)&quot;&quot;&quot;default config&quot;&quot;&quot;# SERVERNAME = &apos;quality-inspect&apos;VERSION = &apos;v1.0.0&apos;DEBUG = TrueSECRET_KEY = &apos;BelivemeIcanfly&apos;&quot;&quot;&quot;enrty: initializate config&quot;&quot;&quot;mode = os.environ.get(&apos;mode&apos;) or &apos;dev&apos;_config_file = _get_config(mode)if not os.path.exists(_config_file): logger.critical(&apos;====== config file is not exist, exit ======&apos;) sys.exit(1)with open(_config_file, &apos;r&apos;, encoding=&apos;UTF-8&apos;) as f: _config_info = yaml.safe_load(f) if not _config_info: logger.critical(&apos;====== config file is unavail, exit ======&apos;) sys.exit(1) # SERVER NAME = _config_info[&apos;SERVER&apos;][&apos;NAME&apos;] or NAME VERSION = _config_info[&apos;SERVER&apos;][&apos;VERSION&apos;] or VERSION DEBUG = _config_info[&apos;SERVER&apos;][&apos;DEBUG&apos;] DEBUG = False if not DEBUG else DEBUG SECRET_KEY = _config_info[&apos;SERVER&apos;][&apos;SECRET_KEY&apos;] or SECRET_KEY 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之watcher打点]]></title>
    <url>%2Farticles%2F31232%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述用于API计时打点，写入request表。 设计装饰器。 使用装饰器的方式使用。1234from flask import request@watcher(watcher_args=request)watcher_args参数为request对象，里面包含blueprint, endpoint, method, path, header等请求参数 源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: watcher 用于API计时打点，写入request表base_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2022/8/26 23:02&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __blog__ = &quot;www.pygo2.top&quot; __project__ = &quot;open2lisapi&quot;usage: from flask import request @watcher(watcher_args=request) watcher_args参数为request对象，里面包含blueprint, endpoint, method, path, header等请求参数design:reference urls:python version: python3Enjoy the good life everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python watcher.py# ------------------------------------------------------------from datetime import datetimefrom functools import wrapsfrom pprint import pprintfrom deploy.utils.logger import logger as LOGfrom deploy.utils.utils import get_rtx_idfrom deploy.services.request import RequestService# 声明一个全局RequestService对象request_service = RequestService()GLOBAL_NEW_ENDPOINR = [ &apos;dashboard.pan&apos;, &apos;dashboard.pan_chart&apos;, &apos;dashboard.index&apos;, &apos;auth.user_list&apos;, &apos;info.dict_list&apos;]# method desc: API request to write database table [request]def __add_request(request, cost, rtx=None): &quot;&quot;&quot; API request information to insert into request table :param request: API request object parameters :param cost: API run time, unit is second :param rtx: request user rtx-id - 1.request get &quot;X-Rtx-Id&quot; - 2.no request by manual set &quot;&quot;&quot; rtx_id = get_rtx_id(request) or rtx # not rtx_id, no insert if not rtx_id: return False method = getattr(request, &apos;method&apos;) # method allow only get or post if method and str(method).upper() not in [&apos;GET&apos;, &apos;POST&apos;]: return False if hasattr(request, &apos;endpoint&apos;) and getattr(request, &apos;endpoint&apos;) in GLOBAL_NEW_ENDPOINR: RequestService().add_request(request=request, cost=cost, rtx=rtx_id) else: request_service.add_request(request=request, cost=cost, rtx=rtx_id)# &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; API打点计时器 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;def watcher(watcher_args): def _watcher(fn): @wraps(fn) def _wrapper(*args, **kwargs): start = datetime.now() res = fn(*args, **kwargs) end = datetime.now() cost = round((end-start).microseconds * pow(0.1, 6), 4) # API run time, unit is second if watcher_args: __add_request(request=watcher_args, cost=cost) # API request to write database table [request] LOG.info(&apos;@Watcher [%s] is run: %s&apos; % (getattr(watcher_args, &apos;endpoint&apos;) or fn.__name__, cost)) return res return _wrapper return _watcher 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之utils公共方法]]></title>
    <url>%2Farticles%2F61799%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述公共方法模块。 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: utils methodbase_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2022/9/14&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;quality-inspect&quot;usage:design:reference urls:python version: python3Enjoy the good time everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python utils.py# ------------------------------------------------------------import osimport sysimport inspectsimport hashlibimport timeimport subprocessfrom datetime import datetime, timedeltafrom functools import wrapsfrom deploy.logger import logger as LOGdef get_cur_folder(): &quot;&quot;&quot; # get current folder, solve is or not frozen of the script :return: the file current folder &quot;&quot;&quot; if getattr(sys, &quot;frozen&quot;, False): return os.path.dirname(os.path.abspath(__file__)) else: cur_folder = os.path.dirname(inspects.getfile(inspects.currentframe())) return os.path.abspath(cur_folder)def md5(v): &quot;&quot;&quot; # md5加密 :param v: value :return: md5 value &quot;&quot;&quot; if isinstance(v, str): v = v.encode(&apos;utf-8&apos;) return hashlib.md5(v).hexdigest()def s2d(s, fmt=&quot;%Y-%m-%d %H:%M:%S&quot;): &quot;&quot;&quot; # 字符串转日期 :param s: string type time :param fmt: transfer to formatter :return: datetime type time &quot;&quot;&quot; return datetime.strptime(s, fmt)def d2s(d, fmt=&quot;%Y-%m-%d %H:%M:%S&quot;): &quot;&quot;&quot; # 日期转字符串 :param d: datetime type time :param fmt: transfer to formatter :return: string type time &quot;&quot;&quot; return d.strftime(fmt)def d2ts(d): &quot;&quot;&quot; # 日期转ts :param d: datetime type parameter :return: time.time type &quot;&quot;&quot; return time.mktime(d.timetuple())def s2ts(s, format=&quot;%Y-%m-%d %H:%M:%S&quot;): &quot;&quot;&quot; # 字符串转ts :param s: sting type parameter :return: time.time type &quot;&quot;&quot; d = s2d(s, format) return d2ts(d)def dura_date(d1, d2, need_d=False): &quot;&quot;&quot; # get datetime1 and datatime difference 时间差 :param d1: datetime parameter 1 :param d2: datetime parameter 2 :param need_d: is or not need hours, minutes, seconds :return: result 1: seconds result 2: hours, minutes, seconds &quot;&quot;&quot; if type(d1) is str: d1 = s2d(d1) if type(d2) is str: d2 = s2d(d2) d = d2 - d1 if need_d is False: seconds = d.seconds mins = seconds / 60.00 hours = mins / 60.00 return seconds, mins, hours return ddef get_now_time(): &quot;&quot;&quot; # 获取当前时间 :return: to return the now of datetime type &quot;&quot;&quot; return datetime.now()def get_now_date(): &quot;&quot;&quot; # 获取当前日期 :return: to return the now of date type &quot;&quot;&quot; return datetime.now().date()def get_now(format=&quot;%Y-%m-%d %H:%M:%S&quot;): &quot;&quot;&quot; # 获取当前时间str :return: to return the now of string type &quot;&quot;&quot; return d2s(datetime.now(), format)def get_week_day(date): &quot;&quot;&quot; # 获取weekday :param date: date :return: week &quot;&quot;&quot; weekdaylist = (&apos;星期一&apos;, &apos;星期二&apos;, &apos;星期三&apos;, &apos;星期四&apos;, &apos;星期五&apos;, &apos;星期六&apos;, &apos;星期天&apos;) weekday = weekdaylist[date.weekday()] return weekday# 计时器def timeer(fn): @wraps(fn) def _wrapper(*args, **kwargs): start = datetime.now() res = fn(*args, **kwargs) end = datetime.now() LOG.info(&apos;@timeer %s is run: %s&apos; % (fn.__name__, (end-start).seconds)) return res return _wrapper# 真实IPdef get_real_ip(request): &quot;&quot;&quot; flask api request object &quot;&quot;&quot; if not request.headers.getlist(&quot;X-Forwarded-For&quot;): ip = request.remote_addr else: ip = request.headers.getlist(&quot;X-Forwarded-For&quot;)[0] return ip# rtx-id by request configdef get_rtx_id(request): &quot;&quot;&quot; flask api request object &quot;&quot;&quot; return request.headers.get(&quot;X-Rtx-Id&quot;) \ if request.headers.get(&quot;X-Rtx-Id&quot;) else &apos;&apos;def mk_dirs(path): &quot;&quot;&quot; # mdkirs folder 建立文件夹（递归） :param path: to make folder path :return: path &quot;&quot;&quot; os.makedirs(path) return pathdef get_base_dir(): &quot;&quot;&quot; # 获取项目base目录（deploy） :return: deploy base path &quot;&quot;&quot; return os.path.dirname(get_cur_folder())def v2decimal(x, y): &quot;&quot;&quot; # 保留小数 :param x: value :param y: point decimal :return: &quot;&quot;&quot; if not x: return None if x.find(&apos;.&apos;) &gt; 0: return round(x, y) return int(x)def get_month_list(): &quot;&quot;&quot; static method # 获取月份list :return: list data &quot;&quot;&quot; return [u&apos;1月&apos;, u&apos;2月&apos;, u&apos;3月&apos;, u&apos;4月&apos;, u&apos;5月&apos;, u&apos;6月&apos;, u&apos;7月&apos;, u&apos;8月&apos;, u&apos;9月&apos;, u&apos;10月&apos;, u&apos;11月&apos;, u&apos;12月&apos;]def filename2md5(rtx_id: str = None, file_name: str = None, _type: str = &apos;file&apos;): &quot;&quot;&quot; get local store file name by md5 value 获取本地存储文件名称md5 :param rtx_id: rtx id :param file_name: file name :param _type: file type, is file,image, and so on. :return: result is tuple param1: md5 value no suffix param2: md5 value have suffix &quot;&quot;&quot; file_names = os.path.splitext(file_name) suffix = (file_names[1]).lower() if len(file_names) &gt; 1 else &apos;&apos; _v = file_name + get_now() + _type + rtx_id if rtx_id \ else file_name + get_now() + _type md5_v = md5(_v) return md5_v, md5_v + suffix if suffix else md5_vdef check_length(data, limit=10): &quot;&quot;&quot; check data length :param data: check data :param limit: length limit return True or False &quot;&quot;&quot; if not data: return True return True if len(data) &lt;= limit else Falsedef get_day_week_date(query_date): &quot;&quot;&quot; get query day current week :param query_date: query day, is str return dict format: - start_time - end_time - [星期一date, 星期二date, 星期三date, 星期四date, 星期五date, 星期六date, 星期日date] &quot;&quot;&quot; if not query_date: query_date = get_now_date() if isinstance(query_date, str): query_date = s2d(query_date, fmt=&quot;%Y-%m-%d&quot;) current_week = query_date.isoweekday() # 当前时间所在本周第几天 start_week_date = (query_date - timedelta(days=current_week - 1)) end_week_date = (query_date + timedelta(days=7 - current_week)) _week = list() for day_num in range(0, 7, 1): _week.append(d2s(start_week_date + timedelta(days=day_num), fmt=&quot;%Y-%m-%d&quot;)) _res = &#123; &quot;start_week_date&quot;: d2s(start_week_date, fmt=&quot;%Y-%m-%d&quot;), # 本周起始日期 &quot;end_week_date&quot;: d2s(end_week_date, fmt=&quot;%Y-%m-%d&quot;), # 本周结束日期 &quot;week_date&quot;: _week # 本周日期列表 &#125; return _resdef ping(ip: str, **kwargs): &quot;&quot;&quot; insect to ping the ip connection :param ip: the target ip or 域名 :param kwargs: the ping other parameters :return: bool **kwargs: -a 将地址解析为主机名。 -n count 要发送的回显请求数。 -l size 发送缓冲区大小。 -w timeout 等待每次回复的超时时间(毫秒)。 usage: ping(ip=&apos;www.baidu.com&apos;, n=4, w=2000, l=32) or ping(ip=&apos;127.0.0.1&apos;, n=4, w=2000, l=32) param default value: - count: 4 - size: 32 - timeout: 2000 &quot;&quot;&quot; cmd = [&apos;ping&apos;] # **kwargs &gt; ping &gt; a if kwargs.get(&apos;a&apos;): cmd.append(&apos;-a&apos;) # **kwargs &gt; ping &gt; n if kwargs.get(&apos;n&apos;) or kwargs.get(&apos;count&apos;): count = kwargs.get(&apos;n&apos;) or kwargs.get(&apos;count&apos;) or 4 if not isinstance(count, int): count = 4 if count &gt; 0: cmd.append(&apos;-n %s&apos; % count) # **kwargs &gt; ping &gt; l if kwargs.get(&apos;l&apos;) or kwargs.get(&apos;size&apos;): size = kwargs.get(&apos;l&apos;) or kwargs.get(&apos;size&apos;) or 32 if not isinstance(size, int): size = 0 if size &gt; 0: cmd.append(&apos;-l %s&apos; % size) # **kwargs &gt; ping &gt; w if kwargs.get(&apos;w&apos;) or kwargs.get(&apos;timeout&apos;): timeout = kwargs.get(&apos;w&apos;) or kwargs.get(&apos;timeout&apos;) or 2000 if not isinstance(timeout, int): timeout = 0 if timeout &gt; 0: cmd.append(&apos;-w %s&apos; % timeout) cmd.append(ip) cmd_str = &apos; &apos;.join(cmd) ret_res = subprocess.call(cmd_str, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) return True if ret_res == 0 else False 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之logger日志]]></title>
    <url>%2Farticles%2F5145%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述日志模块。 使用1234567from app.utils.logger import loggerlogger.debug(&apos;message&apos;)logger.info(&apos;message&apos;)logger.warning(&apos;message&apos;)logger.error(&apos;message&apos;)logger.critical(&apos;message&apos;) 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: 日志 record system information level: debug, info, warning, error, critical CRITICAL 50 ERROR 40 WARNING 30 INFO 20 DEBUG 10formatter： %(levelno)s：打印日志级别的数值。 %(levelname)s：打印日志级别的名称。 %(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]。 %(filename)s：打印当前执行程序名。 %(funcName)s：打印日志的当前函数。 %(lineno)d：打印日志的当前行号。 %(asctime)s：打印日志的时间。 %(thread)d：打印线程ID。 %(threadName)s：打印线程名称。 %(process)d：打印进程ID。 %(processName)s：打印线程名称。 %(module)s：打印模块名称。 %(message)s：打印日志信息。base_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2022/9/14&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;quality-inspect&quot;usage: from app.utils.logger import logger logger.debug(&apos;message&apos;) logger.info(&apos;message&apos;) logger.warning(&apos;message&apos;) logger.error(&apos;message&apos;) logger.critical(&apos;message&apos;)design:reference urls:python version: python3Enjoy the good time everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python logger.py# ------------------------------------------------------------import datetimeimport inspectimport loggingimport osimport sysfrom logging.handlers import RotatingFileHandlerfrom config import LOG_DIR, LOG_LEVEL, LOG_FORMATTER, LOG_FILENAME_PREFIXLEVEL = &#123; &apos;debug&apos;: logging.DEBUG, &apos;info&apos;: logging.INFO, &apos;warning&apos;: logging.WARNING, &apos;error&apos;: logging.ERROR, &apos;critical&apos;: logging.CRITICAL&#125;logger = logging.getLogger(__name__)# get current folder, solve is or not frozen of the scriptdef _get_cur_folder(): if getattr(sys, &quot;frozen&quot;, False): return os.path.dirname(os.path.abspath(__file__)) else: cur_folder = os.path.dirname(inspect.getfile(inspect.currentframe())) return os.path.abspath(cur_folder)def _get_now(format=&quot;%Y-%m-%d %H:%M:%S&quot;): return datetime.datetime.strftime(datetime.datetime.now(), format)# default log dirdef __get_log_dir(): return os.path.join(_get_cur_folder(), &apos;log&apos;)logdir = LOG_DIRlevel = LOG_LEVELformatter = LOG_FORMATTERfilename_prefix = LOG_FILENAME_PREFIXif not logdir: logdir = __get_log_dir()if not os.path.exists(logdir): try: os.makedirs(logdir) logger.critical(&apos;====== log dir is not exist, create: %s ======&apos; % logdir) except: logger.critical(&apos;====== log dir is not exist and create failure, exist: %s ======&apos; % logdir) sys.exit(1)if not level: level = &apos;debug&apos;# 格式if not formatter: formatter = &apos;%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s - %(message)s&apos;formatter = logging.Formatter(formatter, datefmt=&apos;%Y/%m/%d %H:%M:%S&apos;)log_level = LEVEL.get(level)logger.setLevel(level=log_level)# 定义一个RotatingFileHandler，最多备份10个日志文件，每个日志文件最大10Mlog_name = filename_prefix + &apos;_&apos; + _get_now(format=&quot;%Y-%m-%d&quot;) \ if filename_prefix and filename_prefix != &apos;-&apos; else _get_now(format=&quot;%Y-%m-%d&quot;)log_file = os.path.join(logdir, (log_name + &apos;.log&apos;))file_handler = RotatingFileHandler(log_file, mode=&apos;a&apos;, maxBytes=10*1024*1024, backupCount=10, encoding=&apos;utf-8&apos;)file_handler.setLevel(log_level)file_handler.setFormatter(formatter)logger.addHandler(file_handler)# 控制台stream_handler = logging.StreamHandler()stream_handler.setLevel(log_level)stream_handler.setFormatter(formatter)logger.addHandler(stream_handler) 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之excel模块]]></title>
    <url>%2Farticles%2F19275%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述Excel表读取、写入工具使用了xlrd、xlwt，Excel表格处理包进行开发的lib工具包 read write其中，在写入模块加入了表格样式处理，使其生成的表格自带cell样式，更加美观 设计利用Python包开发的表格工具包。 xlrd: 表格读取包 xlwt: 表格写入包 使用12345excel_lib = ExcelLib()# 读取excel_lib.read(read_file)# 写入excel_res = self.excel_lib.beau_write(excel_file=excel_file, data=inspect_list) 源码coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: Excel表读取、写入工具 使用了xlrd、xlwt，Excel表格处理包进行开发的lib工具包 - read - write 其中，在写入模块加入了表格样式处理，使其生成的表格自带cell样式，更加美观base_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2022/9/15&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;quality-inspect&quot;usage: excel_lib = ExcelLib() # 读取 excel_lib.read(read_file) # 写入 excel_res = self.excel_lib.beau_write(excel_file=excel_file, data=inspect_list)design: - xlrd: 表格读取包 - xlwt: 表格写入包 利用Python包开发的表格工具包。reference urls:python version: python3Enjoy the good time everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python excel_lib.py# ------------------------------------------------------------import osimport xlwtimport xlrdfrom deploy.utils import get_now, mk_dirsfrom deploy.status_msg import StatusMsgsfrom config import RESULT_EXCEL, DEBUGfrom deploy.logger import logger as LOGclass ExcelLib(object): &quot;&quot;&quot; Excel class &quot;&quot;&quot; # 类常量参数 DEFAULT_OLD_V_PREFIX = &apos;.xls&apos; DEFAULT_NEW_V_PREFIX = &apos;.xlsx&apos; DEFAULT_SHEET_NAME = &apos;Sheet1&apos; # 表格样式 &gt; 文字横向方向 HORZ_DICT = &#123; &apos;left&apos;: 0x01, &apos;center&apos;: 0x02, &apos;right&apos;: 0x03 &#125; # 表格样式 &gt; 文字纵向方向 VERT_DICT = &#123; &apos;top&apos;: 0x00, &apos;center&apos;: 0x01, &apos;bottom&apos;: 0x02 &#125; # 表格样式 &gt; 单元格边框 BORDER_LINES = &#123; &apos;NO_LINE&apos;: xlwt.Borders.NO_LINE, &apos;THIN&apos;: xlwt.Borders.THIN, &apos;MEDIUM&apos;: xlwt.Borders.MEDIUM, &apos;DASHED&apos;: xlwt.Borders.DASHED, &apos;DOTTED&apos;: xlwt.Borders.DOTTED, &apos;THICK&apos;: xlwt.Borders.THICK, &apos;DOUBLE&apos;: xlwt.Borders.DOUBLE, &apos;HAIR&apos;: xlwt.Borders.HAIR &#125; # 表格样式 &gt; 单元格类型 FORMATTER = [ &apos;general&apos;, &apos;0&apos;, &apos;0.00&apos;, &apos;#,##0&apos;, &apos;#,##0.00&apos;, &apos;&quot;$&quot;#,##0_);(&quot;$&quot;#,##&apos;, &apos;&quot;$&quot;#,##0_);[Red](&quot;$&quot;#,##&apos;, &apos;&quot;$&quot;#,##0.00_);(&quot;$&quot;#,##&apos;, &apos;&quot;$&quot;#,##0.00_);[Red](&quot;$&quot;#,##&apos;, &apos;0%&apos;, &apos;0.00%&apos;, &apos;0.00E+00&apos;, &apos;# ?/?&apos;, &apos;# ??/??&apos;, &apos;M/D/YY&apos;, &apos;D-MMM-YY&apos;, &apos;D-MMM&apos;, &apos;MMM-YY&apos;, &apos;h:mm AM/PM&apos;, &apos;h:mm:ss AM/PM&apos;, &apos;h:mm&apos;, &apos;h:mm:ss&apos;, &apos;M/D/YY h:mm&apos;, &apos;_(#,##0_);(#,##0)&apos;, &apos;_(#,##0_);[Red](#,##0)&apos;, &apos;_(#,##0.00_);(#,##0.00)&apos;, &apos;_(#,##0.00_);[Red](#,##0.00)&apos;, &apos;_(&quot;$&quot;* #,##0_);_(&quot;$&quot;* (#,##0);_(&quot;$&quot;* &quot;-&quot;_);_(@_)&apos;, &apos;_(* #,##0_);_(* (#,##0);_(* &quot;-&quot;_);_(@_)&apos;, &apos;_(&quot;$&quot;* #,##0.00_);_(&quot;$&quot;* (#,##0.00);_(&quot;$&quot;* &quot;-&quot;??_);_(@_)&apos;, &apos;_(* #,##0.00_);_(* (#,##0.00);_(* &quot;-&quot;??_);_(@_)&apos;, &apos;mm:ss&apos;, &apos;[h]:mm:ss&apos;, &apos;mm:ss.0&apos;, &apos;##0.0E+0&apos;, &apos;@&apos; ] def __init__(self, blank=0): &quot;&quot;&quot; class initialize parameters :param blank: blank number &quot;&quot;&quot; if DEBUG: LOG.debug(&apos;Excel lib is loading.&apos;) self.prefix_list = [&apos;.xlsx&apos;, &apos;.xls&apos;] self.blank = 0 # 空行个数，默认值0行 def set_style(self, font=&apos;Times New Roman&apos;, size=11, color=0, bgcolor=&apos;white&apos;, horz=&apos;left&apos;, vert=&apos;center&apos;, **kwargs): &quot;&quot;&quot; set the excel cell style, to achieve customize style. all parameters have default value. parameters detail informations refer to the follow description. :param font: font type default value is &quot;Times New Roman&quot; currently, the font is not use, font type function will be added later :param size: font size default value is 11 :param color: font color index color value range is 0 ~ 100, default value is black(0) this is only list 1-7: 0 黑 black 1 白 white 2 红 red 3 酸橙 lime 4 蓝 blue 5 黄 yellow 6 洋红 magenta 7 青 cyan :param bgcolor: cell background this value is english color, default value is white, color range: aqua 0x31 black 0x08 blue 0x0C blue_gray 0x36 bright_green 0x0B brown 0x3C coral 0x1D cyan_ega 0x0F dark_blue 0x12 dark_blue_ega 0x12 dark_green 0x3A dark_green_ega 0x11 dark_purple 0x1C dark_red 0x10 dark_red_ega 0x10 dark_teal 0x38 dark_yellow 0x13 gold 0x33 gray_ega 0x17 gray25 0x16 gray40 0x37 gray50 0x17 gray80 0x3F green 0x11 ice_blue 0x1F indigo 0x3E ivory 0x1A lavender 0x2E light_blue 0x30 light_green 0x2A light_orange 0x34 light_turquoise 0x29 light_yellow 0x2B lime 0x32 magenta_ega 0x0E ocean_blue 0x1E olive_ega 0x13 olive_green 0x3B orange 0x35 pale_blue 0x2C periwinkle 0x18 pink 0x0E plum 0x3D purple_ega 0x14 red 0x0A rose 0x2D sea_green 0x39 silver_ega 0x16 sky_blue 0x28 tan 0x2F teal 0x15 teal_ega 0x15 turquoise 0x0F violet 0x14 white 0x09 yellow 0x0D :param horz: cell horizontal（水平方向上） default value is left left = 0x01 左端对齐 center = 0x02 居中对齐 right = 0x03 右端对齐 if horz not in values dict, use default value(left) :param vert: cell vertical（垂直方向上） default value is center top = 0x00 上端对齐 center = 0x01 居中对齐 bottom = 0x02 低端对齐 if vert not in values dict, use default value(center) :param kwargs: other parameters, contain: bold, underline, italic, width, height, borders bold: font bold default is font no bold value range is: True or False, default value is False underline: font underline default is font no underline value range is: True or False, default value is False italic: font italic default is font no italic value range is: True or False, default value is False struck_out: font struck_out 字体删除符，字上加一横杠 default is font no struck_out value range is: True or False, default value is False width: cell width default value is cell default width height: cell height default value is cell default height borders: cell borders, contain left, right, top, bottom default value is cell no borders value range is True or False border line, default is NO_LINE: NO_LINE = 0x00 THIN = 0x01 MEDIUM = 0x02 DASHED = 0x03 DOTTED = 0x04 THICK = 0x05 DOUBLE = 0x06 HAIR = 0x07 border color, default is 0x40. borders_dict: customize to set border style line: left, right, top, bottom color: left, right, top, bottom data frame: borders_dict = &#123; &apos;line&apos;: &#123; &apos;top&apos;: &apos;THIN&apos;, &apos;bottom&apos;: &apos;THIN&apos;, &apos;left&apos;: &apos;THIN&apos;, &apos;right&apos;: &apos;THIN&apos; &#125;, &apos;color&apos;: &#123; &apos;top&apos;: &apos;0x40&apos;, &apos;bottom&apos;: &apos;0x40&apos;, &apos;left&apos;: &apos;0x40&apos;, &apos;right&apos;: &apos;0x40&apos; &#125;, &#125; warp: is or not auto wrap 自动换行 default value is False, if True, cell value is auto wrap if False, cell value is not warp formatter: cell formatter contain numbers, string, date, time and so on. default value is general detail scan FORMATTER values &apos;general&apos;, &apos;0&apos;, &apos;0.00&apos;, &apos;#,##0&apos;, &apos;#,##0.00&apos;, &apos;&quot;$&quot;#,##0_);(&quot;$&quot;#,##&apos;, &apos;&quot;$&quot;#,##0_);[Red](&quot;$&quot;#,##&apos;, &apos;&quot;$&quot;#,##0.00_);(&quot;$&quot;#,##&apos;, &apos;&quot;$&quot;#,##0.00_);[Red](&quot;$&quot;#,##&apos;, &apos;0%&apos;, &apos;0.00%&apos;, &apos;0.00E+00&apos;, &apos;# ?/?&apos;, &apos;# ??/??&apos;, &apos;M/D/YY&apos;, &apos;D-MMM-YY&apos;, &apos;D-MMM&apos;, &apos;MMM-YY&apos;, &apos;h:mm AM/PM&apos;, &apos;h:mm:ss AM/PM&apos;, &apos;h:mm&apos;, &apos;h:mm:ss&apos;, &apos;M/D/YY h:mm&apos;, &apos;_(#,##0_);(#,##0)&apos;, &apos;_(#,##0_);[Red](#,##0)&apos;, &apos;_(#,##0.00_);(#,##0.00)&apos;, &apos;_(#,##0.00_);[Red](#,##0.00)&apos;, &apos;_(&quot;$&quot;* #,##0_);_(&quot;$&quot;* (#,##0);_(&quot;$&quot;* &quot;-&quot;_);_(@_)&apos;, &apos;_(* #,##0_);_(* (#,##0);_(* &quot;-&quot;_);_(@_)&apos;, &apos;_(&quot;$&quot;* #,##0.00_);_(&quot;$&quot;* (#,##0.00);_(&quot;$&quot;* &quot;-&quot;??_);_(@_)&apos;, &apos;_(* #,##0.00_);_(* (#,##0.00);_(* &quot;-&quot;??_);_(@_)&apos;, &apos;mm:ss&apos;, &apos;[h]:mm:ss&apos;, &apos;mm:ss.0&apos;, &apos;##0.0E+0&apos;, &apos;@&apos; :return: object usge: column_style = self.set_style(size=8, horz=&apos;center&apos;, vert=&apos;center&apos;, color=0, bgcolor=&apos;ice_blue&apos;, borders=True) sheet.write(row, col, JG_ENUMS.get(jg), column_style) &quot;&quot;&quot; style = xlwt.XFStyle() font = xlwt.Font() # font: type # font.name = font or &apos;Times New Roman&apos; # font: size try: size = int(size) except: size = 11 font.height = size * 20 # font: color try: color = int(color) except: color = 0 finally: if color &gt; 100: color = 0 font.colour_index = color # font: bold bold = kwargs.get(&apos;bold&apos;) or False if bold not in [True, False]: bold = False font.bold = bold # font: underline underline = kwargs.get(&apos;underline&apos;) or False if underline not in [True, False]: underline = False font.underline = underline # font: italic italic = kwargs.get(&apos;italic&apos;) or False if italic not in [True, False]: italic = False font.italic = italic # font: struck_out struck_out = kwargs.get(&apos;struck_out&apos;) or False if struck_out not in [True, False]: struck_out = False font.struck_out = struck_out style.font = font # align: horz horz_v = self.HORZ_DICT.get(horz.lower()) if not horz_v: horz_v = 0x02 # align: vert vert_v = self.VERT_DICT.get(vert.lower()) if not vert_v: vert_v = 0x01 align = xlwt.Alignment() align.horz = horz_v align.vert = vert_v # align: wrap wrap = kwargs.get(&apos;wrap&apos;) or False if wrap not in [True, False]: wrap = False align.wrap = wrap style.alignment = align # background color pattern = xlwt.Pattern() pattern.pattern = xlwt.Pattern.SOLID_PATTERN try: pattern.pattern_fore_colour = xlwt.Style.colour_map[bgcolor] except: pattern.pattern_fore_colour = xlwt.Style.colour_map[&apos;white&apos;] style.pattern = pattern # borders is_border = kwargs.get(&apos;borders&apos;) or False if is_border not in [True, False]: is_border = False if is_border: border = xlwt.Borders() border.top = xlwt.Borders.THIN # 上 border.bottom = xlwt.Borders.THIN # 下 border.left = xlwt.Borders.THIN # 左 border.right = xlwt.Borders.THIN # 右 border.left_colour = 0x40 border.right_colour = 0x40 border.top_colour = 0x40 border.bottom_colour = 0x40 style.borders = border borders_dict = kwargs.get(&apos;borders_dict&apos;) or False if borders_dict: border = xlwt.Borders() for k, v in borders_dict.get(&apos;line&apos;).items(): if k == &apos;top&apos;: border.top = self.BORDER_LINES.get(v.upper()) if v.upper() in self.BORDER_LINES.keys() \ else xlwt.Borders.NO_LINE elif k == &apos;bottom&apos;: border.bottom = self.BORDER_LINES.get(v.upper()) if v.upper() in self.BORDER_LINES.keys() \ else xlwt.Borders.NO_LINE elif k == &apos;left&apos;: border.left = self.BORDER_LINES.get(v.upper()) if v.upper() in self.BORDER_LINES.keys() \ else xlwt.Borders.NO_LINE elif k == &apos;right&apos;: border.right = self.BORDER_LINES.get(v.upper()) if v.upper() in self.BORDER_LINES.keys() \ else xlwt.Borders.NO_LINE border.left_colour = 0x40 border.right_colour = 0x40 border.top_colour = 0x40 border.bottom_colour = 0x40 style.borders = border # formatter num_format_str = kwargs.get(&apos;formatter&apos;) or &apos;general&apos; if num_format_str not in self.FORMATTER: num_format_str = &apos;general&apos; style.num_format_str = num_format_str return style @staticmethod def format_res(status_id: int, message: str, data: dict) -&gt; dict: &quot;&quot;&quot; 方法请求结果格式化 &quot;&quot;&quot; return &#123; &apos;status_id&apos;: status_id, &apos;message&apos;: message if message else StatusMsgs.get(status_id), &apos;data&apos;: data &#125; def read_headers(self, excel_file): &quot;&quot;&quot; get the headers information of excel file :param excel_file: excel file real path :return: dict result content: sheets: dict sheet base info, contain something. such as row.col.index.name number sheet: int sheet number names: sheets name dict columns: sheet columns dict &quot;&quot;&quot; # default value res = &#123;&apos;sheets&apos;: &#123;&#125;, &apos;nsheet&apos;: 0, &apos;names&apos;: &#123;&#125;, &apos;columns&apos;: &#123;&#125;&#125; # not exist excel file if not excel_file \ or not os.path.exists(excel_file): return res excel = xlrd.open_workbook(excel_file) nsheets = excel.nsheets # sheet_names = excel.sheet_names() # 获取所有excel sheet名称列表 sheets_dict = dict() names_dict = dict() columns_dict = dict() for i in range(0, nsheets, 1): sheet = excel.sheet_by_index(i) names_dict[str(i)] = sheet.name # sheet：row行数 col列数 index索引 name名称 sheets_dict[str(i)] = &#123;&apos;row&apos;: sheet.nrows, &apos;col&apos;: sheet.ncols, &apos;index&apos;: i, &apos;name&apos;: sheet.name&#125; try: # sheet column：key：value格式 row_values_0 = sheet.row_values(0) new_column = list() for _k, _v in enumerate(row_values_0): new_column.append(&#123;&apos;key&apos;: str(_k), &apos;value&apos;: str(_v)&#125;) columns_dict[str(i)] = new_column except: pass return &#123;&apos;sheets&apos;: sheets_dict, &apos;nsheet&apos;: nsheets, &apos;names&apos;: names_dict, &apos;columns&apos;: columns_dict&#125; def check_real_file(self, real_file: str, _type=1, clean=False): &quot;&quot;&quot; 生成存储excel文件的绝对路径，以及新文件名称 加了文件已存在的check 结果采用绝对路径+新文件名称，新文件名称 如果存在用新的时间戳创建文件 generate to store real path of excel file if file exist dir, the file name rename file name + now(%Y-%m-%d-%H-%M-%S) the result is path file :param clean: 是否删除已存在 :param real_file: all path excel file :param _type: excel file version type :return: sting _type为默认格式： - 1为.xls - 2为.xlsx &quot;&quot;&quot; if not _type or _type not in [1, 2]: # 默认xls _type = 1 # 存在 &amp;&amp; 删除 if clean and os.path.exists(real_file): os.remove(real_file) return real_file # 文件已存在，加上时间戳 if os.path.exists(real_file): file_name = &apos;%s%s&apos; % (get_now(format=&quot;%Y-%m-%d-%H-%M-%S&quot;), self.DEFAULT_OLD_V_PREFIX) real_file = os.path.join(self._default_folder(), file_name) return real_file return real_file @staticmethod def _default_folder(): &quot;&quot;&quot; new excel file folder :return: string &quot;&quot;&quot; if not os.path.exists(RESULT_EXCEL): mk_dirs(RESULT_EXCEL) return RESULT_EXCEL def read(self, read_file: str, sheet: int = 0, rows: list = [], columns: list = [], **kwargs) -&gt; dict: &quot;&quot;&quot; read excel data :param read_file: excel文件abs全路径 :param sheet: 读取的sheet数，从0开始，default value is 0 :param rows: 读取数据的rows行列表，如果为空，默认读取全部行 :param columns: 读取数据的columns列列表，如果为空，默认读取全部列 :param kwargs: 读取excel数据的其他参数配置 request_title: 读取的表格是否包含title行，默认是true（bool类型） response_title: 返回的数据是否包含title说明，默认是true（bool类型） :return: dict result &quot;&quot;&quot; # ================== parameters check start ================== if not read_file or not os.path.exists(read_file) \ or not os.path.isfile(read_file): return self.format_res( 206, &apos;读取的excel数据不存在&apos;, &#123;&#125;) request_title = False if kwargs.get(&apos;request_title&apos;) is False else True # 初始化数据读取开始的行数 start_row = 1 if request_title else 0 response_title = False if kwargs.get(&apos;response_title&apos;) is False else True excel_object = xlrd.open_workbook(filename=read_file) # xlrd可以读取xls、xlsx excel_sheet_names = excel_object.sheet_names() if not str(sheet): # 添加无sheet index，默认读取首页 sheet = 0 # 添加sheet为整型处理 try: if not isinstance(sheet, int): sheet = int(sheet) except: sheet = 0 if sheet &gt; len(excel_sheet_names) or sheet &lt; 0: return self.format_res( 207, &apos;读取的sheet页不存在&apos;, &#123;&#125;) excel_sheet = excel_object.sheet_by_index(sheet) # 读取指定行 new_rows = list() if rows: for r in rows: try: new_rows.append(int(r)) except: pass # 读取指定列 new_cols = list() if columns: for c in columns: try: new_cols.append(int(c)) except: pass # ================== parameters check end ================== # 指定行 read_rows = new_rows if new_rows else range(start_row, excel_sheet.nrows, 1) # 指定列 read_cols = new_cols if new_cols else range(0, excel_sheet.ncols, 1) # 读取表头 resp_header = list() if response_title and request_title: for col in read_cols: if col &lt; 0: continue # TODO 是否添加空标题、重复标题等标题判断 # 目前，定位空活着列值重复均可以 # if not excel_sheet.cell_value(0, col) or excel_sheet.cell_value(0, col) in resp_header: # return self.format_res( # 208, &apos;读取的第%s列值为空&apos; % col, &#123;&#125;) resp_header.append(excel_sheet.cell_value(0, col)) # 读取表数据 resp_data = list() for row in read_rows: if not row: continue _d = list() for col in read_cols: if col &lt; 0: continue _d.append(excel_sheet.cell_value(row, col)) if _d: resp_data.append(_d) return self.format_res( 100, &apos;success&apos;, &#123;&apos;header&apos;: resp_header, &apos;data&apos;: resp_data&#125;) def write(self, excel_file, data, sheet=&quot;Sheet1&quot;, **kwargs): &quot;&quot;&quot; 写入的通用方法，xlwt、xlrd: .xls表格行数限制65535 写入的数据为list格式，里面的元素也为list类型数据，以元素list顺序进行表格row的写入 use xlwt、xlrd to merge excel, it are to deal .xls、.xlsx formatter excel file the deal excel style is cell values(row + col) :param excel_file: excel file, if not exist to create :param data: excel data :param sheet: excel sheet name :param kwargs: multiple parameters, is dict type - title: 是否为标题，如果是标题样式采用标题样式 - start_row: 写入excel的起始行，默认为0 - *** extra parameters *** :return: json object status_id: result id, except status_id is 1 is success, others is failure message: the result message data: path: the new excel path + name, real path name: the new excel file name, not contain path &quot;&quot;&quot; # if not excel file, auto rename by timestamp # new excel file format xlrd xlwt: xls if not excel_file: return self.format_res(214, &apos;请求参数为file必须信息&apos;, &#123;&#125;) if not data: return self.format_res(401, &apos;数据不存在&apos;, &#123;&#125;) try: new_excel = xlwt.Workbook(encoding=&apos;utf-8&apos;) new_sheet = new_excel.add_sheet(sheet or self.DEFAULT_SHEET_NAME, cell_overwrite_ok=True) start_row = kwargs.get(&apos;start_row&apos;) or 0 # 写入的起始行 row = 0 for _d in data: if not _d: continue for col in range(0, len(_d), 1): new_sheet.write((start_row + row), col, _d[col]) # 单元格的方式写入 row += 1 # excel_file = self.check_real_file(excel_file, clean=True) new_excel.save(excel_file) return self.format_res( 100, &apos;success&apos;, &#123;&apos;name&apos;: os.path.split(excel_file)[1], &apos;path&apos;: excel_file&#125;) except Exception as e: return self.format_res(998, str(e), &#123;&#125;) def beau_write(self, excel_file, data, sheet_name=&quot;Sheet1&quot;, **kwargs): &quot;&quot;&quot; 针对于质量考核检查结果直接带样式的表格，xlwt、xlrd: .xls表格行数限制65535 特殊方法，写死数据以及样式 use xlwt、xlrd to merge excel, it are to deal .xls、.xlsx formatter excel file the deal excel style is cell values(row + col) :param excel_file: excel file, if not exist to create :param data: excel data :param sheet_name: excel sheet name :param kwargs: multiple parameters, is dict type - *** extra parameters *** :return: json object status_id: result id, except status_id is 1 is success, others is failure message: the result message data: path: the new excel path + name, real path name: the new excel file name, not contain path &quot;&quot;&quot; # if not excel file, auto rename by timestamp # new excel file format xlrd xlwt: xls if not excel_file: return self.format_res(214, &apos;请求参数为Excel file必须信息&apos;, &#123;&#125;) if not data: return self.format_res(401, &apos;数据不存在&apos;, &#123;&#125;) try: new_excel = xlwt.Workbook(encoding=&apos;utf-8&apos;) new_sheet = new_excel.add_sheet(sheet_name or self.DEFAULT_SHEET_NAME, cell_overwrite_ok=True) # initialize cell style headline_border = &#123; &apos;line&apos;: &#123; &apos;top&apos;: &apos;NO_LINE&apos;, &apos;bottom&apos;: &apos;DASHED&apos;, &apos;left&apos;: &apos;NO_LINE&apos;, &apos;right&apos;: &apos;NO_LINE&apos; &#125; &#125; headline_style = self.set_style(size=16, horz=&apos;center&apos;, vert=&apos;center&apos;, bold=True, borders_dict=headline_border, wrap=True) title_style = self.set_style(size=10, bold=True, horz=&apos;center&apos;, vert=&apos;center&apos;, color=1, bgcolor=&apos;periwinkle&apos;, borders=True) column_style = self.set_style(size=8, bold=True, horz=&apos;center&apos;, vert=&apos;center&apos;, color=0, bgcolor=&apos;ice_blue&apos;, borders=True) cell_style = self.set_style(size=8, horz=&apos;center&apos;, vert=&apos;center&apos;, borders=True) cell_per_style = self.set_style(size=8, horz=&apos;center&apos;, vert=&apos;center&apos;, borders=True, formatter=&apos;0.00%&apos;) special_cell_style = self.set_style(size=8, horz=&apos;center&apos;, vert=&apos;center&apos;, bgcolor=&apos;yellow&apos;, borders=True) special_per_style = self.set_style(size=8, horz=&apos;center&apos;, vert=&apos;center&apos;, bgcolor=&apos;yellow&apos;, borders=True, formatter=&apos;0.00%&apos;) # excel title new_sheet.write_merge(0, 1, 0, 0, &quot;项目编号&quot;, title_style) new_sheet.write_merge(0, 1, 1, 1, &quot;项目名称&quot;, title_style) new_sheet.write_merge(0, 0, 2, 6, &quot;测试记录&quot;, title_style) new_sheet.write_merge(0, 0, 7, 11, &quot;工资确认单&quot;, title_style) new_sheet.write(1, 2, &apos;提交次数&apos;, title_style) new_sheet.write(1, 3, &apos;版本&apos;, title_style) new_sheet.write(1, 4, &apos;用户&apos;, title_style) new_sheet.write(1, 5, &apos;时间&apos;, title_style) new_sheet.write(1, 6, &apos;备注&apos;, title_style) new_sheet.write(1, 7, &apos;提交次数&apos;, title_style) new_sheet.write(1, 8, &apos;版本&apos;, title_style) new_sheet.write(1, 9, &apos;用户&apos;, title_style) new_sheet.write(1, 10, &apos;时间&apos;, title_style) new_sheet.write(1, 11, &apos;备注&apos;, title_style) start_row = 2 # 数据写入的起始行 row = 0 for _d in data: if not _d: continue for col in range(0, len(_d), 1): style = column_style if col &lt; 2 else cell_style new_sheet.write((start_row + row), col, _d[col], style) # 单元格的方式写入 row += 1 &quot;&quot;&quot; end write and save &quot;&quot;&quot; # 设置列宽, 256为基准数 for col in [1]: new_sheet.col(col).width_mismatch = True new_sheet.col(col).width = 256 * 24 # 标准256 * 12 for col in [5, 6, 10, 11]: new_sheet.col(col).width_mismatch = True new_sheet.col(col).width = 256 * 18 # 标准256 * 12 # 设置行高, 20为基准数 50为50磅 he_rows = [0, 1] for row in he_rows: new_sheet.row(row).height_mismatch = True # 标题 new_sheet.row(row).height = 20 * 20 # excel_file = self.check_real_file(excel_file, clean=True) new_excel.save(excel_file) return self.format_res( 100, &apos;success&apos;, &#123;&apos;name&apos;: os.path.split(excel_file)[1], &apos;path&apos;: excel_file&#125;) except Exception as e: return self.format_res(998, str(e), &#123;&#125;) 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块之command系统命令]]></title>
    <url>%2Farticles%2F26110%2F</url>
    <content type="text"><![CDATA[Python Python模块系列 Python模块系列 Python项目常用的模块代码。 版本 名称 版本 Python 3 描述CMD系统命令执行工具利用subprocess内置包开发，使用了底层的Popen方法，便于参数交互，其subprocess的run、call等方法都基于Popen非类的方式，对外方法： run_command：命令执行方法，有命令执行output返回 run_command_no_output：命令执行方法，无命令执行output返回 check_command_by_which：which xxxx 设计使用内置包subprocess的Popen方法进行开发，调用底层方法，便于参数交互目前常用的3个方法： - run_command：命令执行方法，有命令执行output返回 - run_command_no_output：命令执行方法，无命令执行output返回 - check_command_by_which：which xxxx 对外使用的方法都基于_run_cmd，可以进行二次封装，实现其他的命令执行方法也可以直接对Popen进行二次开发 使用12_cmd = &apos;ls&apos;return_code, output = run_command(_cmd, shell=True, check_exit_code=False) return_code 命令执行状态码，0为执行正常，其他码为执行错误 output 命令输出信息 12_cmd = &apos;ls&apos;return_code = run_command_no_output(_cmd, shell=True, check_exit_code=False) return_code 命令执行状态码，0为执行正常，其他码为执行错误 12_cmd = &apos;ls&apos;return_code = check_command_by_which(_cmd) return_code bool类型，True or False 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: CMD系统命令执行工具 利用subprocess内置包开发，使用了底层的Popen方法，便于参数交互，其subprocess的run、call等方法都基于Popen 非类的方式，对外方法： - run_command：命令执行方法，有命令执行output返回 - run_command_no_output：命令执行方法，无命令执行output返回 - check_command_by_which：which xxxxbase_info: __author__ = &quot;PyGo&quot; __time__ = &quot;2022/9/14&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;quality-inspect&quot;usage: return_code, output = run_command(_cmd, shell=True, check_exit_code=False) - return_code 命令执行状态码，0为执行正常，其他码为执行错误 - output 命令输出信息 return_code = run_command_no_output(_cmd, shell=True, check_exit_code=False) - return_code 命令执行状态码，0为执行正常，其他码为执行错误 return_code = check_command_by_which(_cmd) - return_code bool类型，True or Falsedesign: 使用内置包subprocess的Popen方法进行开发，调用底层方法，便于参数交互 目前常用的3个方法： - run_command：命令执行方法，有命令执行output返回 - run_command_no_output：命令执行方法，无命令执行output返回 - check_command_by_which：which xxxx 对外使用的方法都基于_run_cmd，可以进行二次封装，实现其他的命令执行方法 也可以直接对Popen进行二次开发reference urls:python version: python3Enjoy the good time everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python command.py# ------------------------------------------------------------import sysimport osimport inspectfrom subprocess import PIPE, Popenfrom deploy.logger import logger as LOGfrom config import DEBUGdef get_cur_folder(): if getattr(sys, &quot;frozen&quot;, False): return os.path.dirname(os.path.abspath(__file__)) else: cur_folder = os.path.dirname(inspect.getfile(inspect.currentframe())) return os.path.abspath(cur_folder)def _print_die(message): &quot;&quot;&quot; exit process :param message: print error message :return: &quot;&quot;&quot; if not message: return print(&apos;%s%s%s&apos; % (&apos;&gt;&apos; * 10, message, &apos;&lt;&apos; * 10)) sys.exit(1)def _run_cmd(cmd, shell=True, check_exit_code=True, cwd=None): &quot;&quot;&quot; execute command at local shell, build in method, not allow other file to use :param cmd: command :param shell: is or not run shell mode if shell is True, command type is str else command type is list or tuple :param check_exit_code: check is or not return code :param cwd: current work dir :return: command return code, command content cmd: - &quot;ls -a&quot; - [&quot;ls&quot;, &quot;-a&quot;] &quot;&quot;&quot; if type(cmd) not in [type(&apos;string&apos;), type([1]), type((1,))]: return -1, &apos;Command type is error&apos; if not cwd: cwd = get_cur_folder() # 统一转成string命令格式 if not shell: cmd = &apos; &apos;.join(cmd) if not isinstance(cmd, str): cmd = &apos; &apos;.join(cmd) if DEBUG: LOG.debug(cmd) p = Popen(cmd, shell=False, bufsize=0, cwd=cwd, stdout=PIPE) # p.wait() # 等待子进程完成 output = p.communicate()[0] return_code = p.returncode if check_exit_code and return_code != 0: _print_die(&apos;Command &quot;%s&quot; failed.\n%s&apos; % (&apos; &apos;.join(cmd), output)) if return_code in [0, &apos;0&apos;]: return_code = 0 return return_code, outputdef run_command(cmd, check_exit_code=True, shell=True, cwd=None): &quot;&quot;&quot; run command return command code, output :param cmd: command :param check_exit_code: check command output exit code :param shell: shell mode :param cwd: current work dir :return: command code &quot;&quot;&quot; return _run_cmd(cmd, shell=shell, check_exit_code=check_exit_code, cwd=cwd)def run_command_no_output(cmd, check_exit_code=True, shell=True, cwd=None): &quot;&quot;&quot; run command no return command output :param cmd: command :param check_exit_code: check command output exit code :param shell: shell mode :param cwd: current work dir :return: command code &quot;&quot;&quot; return _run_cmd(cmd, shell=shell, check_exit_code=check_exit_code, cwd=cwd)[0]def which_command(cmd): &quot;&quot;&quot; which the server is or not have command :param cmd: command :return: bool &quot;&quot;&quot; return True if run_command_no_output(&quot;which %s&quot; % cmd, check_exit_code=False) == 0 \ else False 系列Python模块之command系统命令Python模块之excel模块Python模块之logger日志Python模块之utils公共方法Python模块之watcher打点Python模块之config配置解析Python模块之dtalk钉钉消息Python模块之企业微信 更多模块请参考文章TAG进行查看。 Python模块系列，持续更新中。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python模块系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库Redhat7.4部署安装]]></title>
    <url>%2Farticles%2F40987%2F</url>
    <content type="text"><![CDATA[Redhat7.4服务器安装Oracle11g数据库，详细实践版本。 Oracle 数据库 版本说明 名称 版本 服务器系统 Redhat7.4 Oracle 11g Enterprise Edition 接下来是部署安装的过程，都是重要步骤。 ====== 部署开始 ====== Oracle安装Oracle用户【root用户】对于到手的Linux服务器，Oracle存在自主创建或者已经被创建的情况，分别进行操作说明。 情况一：创建用户 1.创建oracle用户组12groupadd oinstallgroupadd dba 2.创建oracle用户1seradd oracle -g oinstall -G dba -m -s /bin/bash 3.设置oracle用户密码1passwd oracle 情况二： Oracle用户已存在 1.创建用户租groupadd oinstallgroupadd dba2.修改oracle用户所属组usermod -g oinstall -G dba -s /bin/bash oracleid oracle出现的结果是oracle用户是属于oinstall、dba2个组3.把oracle用户目录重新赋予权限：chown -R oracle:oinstall /home/oracle Package安装【root用户】安装所必须的包，执行以下命令：123yum install binutils elfutils-libelf elfutils-libelf-devel gcc-c++ glibc glibc-common glibc-devel glibc-headers libaio libaio-devel libgcc libstdc++ libstdc++-devel make sysstat unixODBC unixODBC-devel 如果服务器没连内网，需要从安装盘安装以上的包。挂截光盘，将系统对应的系统盘插入光驱后，运行以下命令：1.挂载系统盘12mkdir /mnt/cdrommount –t auto –o ro /dev/cdrom /mnt/cdrom 2.配置源文件1vim /etc/yum.repos.d/Server.repo 3.更改配置，在以上文件中输入以下内容：12345[dvd]Name=localyumBaseurl=file:///mnt/cdromEnabled=1Gpgcheck=0 保存退出，在进行yum包安装。 调整OS内核参数【root用户】设置原则：kernel.shmmax设为物理内存大小(如果系统已设置了足够大就无需再设置了，参考值为最小需求)12345678910111213141516# vi /etc/sysctl.conf#------------------------------------------kernel.shmall = 16777216kernel.shmmax = 68719476735kernel.shmmni = 4096kernel.sem = 500 2048000 500 4096kernel.randomize_va_space=0fs.aio-max-nr = 1048576fs.file-max = 6815744fs.aio-max-nr = 1048576net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 262144net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048586#------------------------------------------ 运行命令使参数立即生效1sysctl -p 配置PAM模块文件【root用户】1234567vim /etc/security/limits.conf#------------------------------------------oracle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536#------------------------------------------ 建立必须目录和文件【root用户】12mkdir –p /u01/app/oraclechown -R oracle:oinstall /u01/ 建立完之后可以tree以下，如果没有yum tree安装tree命令，用来查看目录树结构，推荐。 设置oracle用户环境变量【oracle用户】如果服务器有多网卡, 注意设置ORACLE_HOSTNAME为某网卡IP对应的主机名, 参照/etc/hosts文件.切换到oracle 用户 编辑.bash_profile文件为以下内容。切换到oracle用户命令：su - oracle 编辑配置文件命令如下：1234567891011121314151617181920$vim /home/oracle/.bash_profile# --------------------------------------------------# oracle configumask 022ORACLE_HOSTNAME=VM_176_9_linuxORACLE_BASE=/u01/app/oracleORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1ORACLE_SID=orclLD_LIBRARY_PATH=$ORACLE_HOME/libPATH=$PATH:$HOME/bin:$ORACLE_HOME/bin:$ORACLE_HOME/jdk/bin:$LD_LIBRARY_PATHexport ORACLE_HOMEexport ORACLE_SIDexport LD_LIBRARY_PATHexport PATHLC_ALL=&quot;en_US&quot;export NLS_LANG=&quot;AMERICAN_AMERICA.ZHS16GBK&quot;export NLS_DATE_FORMAT=&quot;YYYY-MM-DD HH24:MI:SS&quot;# -------------------------------------------------- 参数说明： ORACLE_HOSTNAM：本机名称 ORACLE_BASE：Oracle安装根目录 ORACLE_HOME：Oracle软件安装目录 ORACLE_SID：Oracle SID LD_LIBRARY_PATH：Oracle lib包 NLS_LANG：NLS编码设置，先这么设置，后面有一个拓展 专门说明。 再运行以下命令使配置立即生效。1source /home/oracle/.bash_profile 配置cvu_config文件【oracle用户】1.解压Oracle包，进入Oracle解压后目录database/stage/cvu/cv/admin，备份 cvu_config 文件：1cp cvu_config backup_cvu_config 2.编辑 cvu_config 并且改动以下行内容（添加cvu_config配置信息的时候建议手动输入，复制的时候出现|【不知什么原因】）1CV_ASSUME_DISTID=OEL4 to CV_ASSUME_DISTID=OEL6 3.保存文件。 配置响应文件【oracle用户】在ORACLE安装软件的response目录里有各种响应文件模板，我们需要将配置响应文件的参数以匹配当前环境12345678910111213141516171819$ vi /home/oracle/database/response/db_install.rsp#--------------------------------------------------------------------# 注意!不要更改以下参数,否则安装会报错!oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v11_2_0#以下参数根据实际情况更改,ORACLE_HOSTNAME的值由hostname命令获得oracle.install.option=INSTALL_DB_SWONLYORACLE_HOSTNAME=服务器名称INVENTORY_LOCATION=/u01/app/oracle/oraInventoryUNIX_GROUP_NAME=oinstallSELECTED_LANGUAGES=en,zh_CNoracle.install.db.InstallEdition=EEoracle.install.db.DBA_GROUP=dbaoracle.install.db.OPER_GROUP=dbaDECLINE_SECURITY_UPDATES=trueORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1ORACLE_BASE=/u01/app/oracle#-------------------------------------------------------------------- 各参数含义如下:-silent 表示以静默方式安装,不会有任何提示-force 允许安装到一个非空目录-noconfig 表示不运行配置助手netca-responseFile 表示使用哪个响应文件,必需使用绝对路径oracle.install.responseFileVersion 响应文件模板的版本,该参数不要更改oracle.install.option 安装选项,本例只安装oracle软件,DECLINE_SECURITY_UPDATES 是否需要在线安全更新,该参数不要更改ORACLE_HOSTNAME 安装主机名UNIX_GROUP_NAME oracle用户用于安装软件的组名INVENTORY_LOCATION oracle产品清单目录SELECTED_LANGUAGES oracle运行语言环境,一般选en，zh_CNORACLE_HOME Oracle安装目录ORACLE_BASE oracle基础目录oracle.install.db.InstallEdition 安装版本类型,一般是企业版oracle.install.db.isCustomInstall 是否定制安装,默认Partitioning,OLAP,RAT都选上了oracle.install.db.customComponents 定制安装组件列表:除了以上默认的,可加上Label Security和Database Vaultoracle.install.db.DBA_GROUP oracle用户用于授予OSDBA权限的组名oracle.install.db.OPER_GROUP oracle用户用于授予OSOPER权限的组名 执行安装脚本【一定要oracle用户执行】【一定要oracle用户执行】【一定要oracle用户执行】命令：1./runInstaller -silent -force -noconfig -responseFile /home/oracle/db_install.rsp 其中后面的db_install.rsp为上一步配置的响应文件的路径。 执行成功后会出现以上界面，会提示需要要ROOT用户下执行脚本，然后再回来上图界面按回车完成安装。 运行orainstRoot.sh和root.sh完成安装【一定要root用户执行】【一定要root用户执行】【一定要root用户执行】切换到root用户执行脚本。12/u01/app/oraInventory/orainstRoot.sh/u01/app/oracle/product/11.2.0/dbhome_1/root.sh 然后再回到安装界面按回车，提示安装成功，至此数据库已经安装完成。 检查安装文件【root用户】 1.文件一：$ORACLE_HOME/bin/oracle 12cd $ORACLE_HOME/binll | grep oracle 2.文件二：$ORACLE_HOME/rdbms/lib/config.o 12cd $ORACLE_HOME/rdbms/lib/ll | grep config 确认上面的2个文件大小一定要大于0，不然后面后出现ORA-12547:TNS:list contact。如果出现上述情况，可以把/u01/app/oracle/oraInventory目录删除，重新进行安装。 数据库安装完成 PAS数据库安装静默配置监听程序【oracle用户】通过response文件运行netca, 生成sqlnet.ora和listener.ora文件, 位于$ORACLE_HOME/network/admin目录下命令：$ $ORACLE_HOME/bin/netca /silent /responsefile /home/oracle/netca.rsp如果发生以下错误：12345678910111213=========================================================$ORACLE_HOME/bin/netca /silent /responsefile /home/oracle/database/response/netca.rspUnsatisfiedLinkError exception loading native library: njni11java.lang.UnsatisfiedLinkError: /u01/app/oracle/product/11.2.0/dbhome_1/lib/libnjni11.so: libaio.so.1: cannot open shared object file: No such file or directoryjava.lang.UnsatisfiedLinkError: jniGetOracleHome at oracle.net.common.NetGetEnv.jniGetOracleHome(Native Method) at oracle.net.common.NetGetEnv.getOracleHome(Unknown Source) at oracle.net.ca.NetCALogger.getOracleHome(NetCALogger.java:230) at oracle.net.ca.NetCALogger.initOracleParameters(NetCALogger.java:215) at oracle.net.ca.NetCALogger.initLogger(NetCALogger.java:130) at oracle.net.ca.NetCA.main(NetCA.java:427)Error: jniGetOracleHome========================================================= 解决方案：缺少lib包12find /u01 -name libaio.so.1cp /u01/app/oracle/product/11.2.0/dbhome_1/lib/stubs/libaio.so.1 /u01/app/oracle/product/11.2.0/dbhome_1/lib 在执行上述命令，成功创建PAS数据库实例 配置建库响应文件 dbca.rsp【oracle用户】打开安装目录下的response文件夹下的dbca.rsp ，修改以下参数123456789$vim /home/oracle/database/response/dbca.rspGDBNAME = &quot;pas&quot;SID = &quot;orcl&quot;SYSPASSWORD = &quot;pas&quot;SYSTEMPASSWORD = &quot;pas&quot;SYSMANPASSWORD = &quot;pas&quot;DBSNMPPASSWORD = &quot;pas&quot;CHARACTERSET = &quot;ZHS16GBK&quot;MEMORYPERCENTAGE = &quot;40&quot; 创建数据库实例【oracle用户】Oracle用户下执行以下命令：1$ORACLE_HOME/bin/dbca -silent -responseFile /home/oracle/database/response/dbca.rsp 注意,dbca.rsp为上一步配置的响应文件的路径。待提示成功后，数据库实例创建完毕。 创建数据文件路径1.创建目录，切换至实例用户窗口中输入如下命令，将下列脚本中的SNPAS批量替换成你的数据库名称，同时需要检查实例目录上否有足够空间的磁盘(真实环境至少剩余空间需要500G以上 df 检查磁盘空间)【文件位置根据服务器实际空间以及位置进行修改，oracle对目录具有读写权限】1234567su - oraclemkdir -p /data/SNPAS/PAS_DATA/PAS_SPACE_DATAmkdir -p /data/SNPAS/PAS_DATA/PAS_SPACE_IDXmkdir -p /data/SNPAS/PAS_DATA/PAS_SPACE_TMPmkdir -p /data/SNPAS/PAS_BACKUPmkdir -p /data/SNPAS/PAS_DATA_SRCmkdir -p /data/SNPAS/PAS_ARCH_LOG 2.创建成功之后的目录结构如下：12cd /data/SNPAStree 创建表空间【oracle用户】查看当前实例：select instance_name from v$instance;切换为需要的实例：export ORACLE_SID=SID名称以管理员身份通过SQLPLUS登录ORACLE$ ORACLE_HOME/bin/sqlplus / as sysdba 表空间创建表空间特殊说明： 【1.表空间存储目录以上一步建立的路径为准】 【2.初始化表空间文件的大小可以为10G，后期自动增长】 【3.11g普通表空间文件大小最大32G】 创建TBS_MXZ表空间文件【sqlplus】 12345678910SQL&gt;CREATE TABLESPACE &quot;TBS_MXZ&quot; LOGGING DATAFILE &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_MXZ1.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_MXZ2.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_MXZ3.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_MXZ4.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_MXZ5.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 创建TBS_NBZZ表空间文件【sqlplus】 123456789SQL&gt; CREATE TABLESPACE &quot;TBS_NBZZ&quot; LOGGING DATAFILE &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ1.dbf&apos; SIZE 10G,&apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ2.dbf&apos; SIZE 10G,&apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ3.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ4.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 创建TBS_JXDX表空间文件【sqlplus】 1234567SQL&gt;CREATE TABLESPACE &quot;TBS_JXDX&quot; LOGGING DATAFILE &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_JXDX1.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_JXDX2.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 创建TBS_JKSJ表空间文件【sqlplus】 123456SQL&gt;CREATE TABLESPACE &quot;TBS_JKSJ&quot; LOGGING DATAFILE &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_JKSJ1.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 创建TBS_LSB表空间文件【sqlplus】 123456SQL&gt;CREATE TABLESPACE &quot;TBS_LSB&quot; LOGGING DATAFILE &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_LSB1.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 创建TBS_PAS表空间文件【sqlplus】 1234567SQL&gt; CREATE TABLESPACE &quot;TBS_PAS&quot; LOGGING DATAFILE &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_PAS1.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_DATA/TBS_PAS2.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 创建TBS_IDX表空间文件【sqlplus】 1234567SQL&gt;CREATE TABLESPACE &quot;TBS_IDX&quot;LOGGING DATAFILE&apos;/data/SNPAS/PAS_DATA/PAS_SPACE_IDX/TBS_IDX1.dbf&apos; SIZE 10G,&apos;/data/SNPAS/PAS_DATA/PAS_SPACE_IDX/TBS_IDX2.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 创建TBS_TMP表空间文件【sqlplus】 1234567SQL&gt;CREATE TEMPORARY TABLESPACE TBS_TMP TEMPFILE &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_TMP/TBS_TMP1.dbf&apos; SIZE 10G, &apos;/data/SNPAS/PAS_DATA/PAS_SPACE_TMP/TBS_TMP2.dbf&apos; SIZE 10G autoextend on next 1G maxsize unlimited; 表空间说明与配置建议: 表空间名称 表空间作用 表空间大小配置建议 备注 TBS_MXZ 存放明细账数据 100G-200G TBS_NBZZ 存放内部总账数据 100G以上 TBS_JXDX 存放绩效对象数据 30G TBS_JKSJ 存放接口数据 10G TBS_LSB 存放临时表数据 10G TBS_PAS 存放一些基础表的表空间，例如权限、参数、业绩关系、业绩指标、考核方案等 30G TBS_IDX 存放索引数据 30G TBS_TMP 临时表空间 创建PAS用户【sqlplus】12su - oraclesqlplus / as sysdba 以管理员身份通过SQLPLUS登录ORACLE，执行以下命令123SQL&gt; CREATE USER PAS IDENTIFIED BY pasDEFAULT TABLESPACE &quot;TBS_PAS&quot;TEMPORARY TABLESPACE &quot;TBS_TMP&quot;; PAS用户授权【sqlplus】以管理员身份通过SQLPLUS登录ORACLE，执行以下命令123456789101112131415161718SQL&gt;GRANT &quot;JAVAUSERPRIV&quot; TO PAS WITH ADMIN OPTION;SQL&gt;GRANT &quot;RESOURCE&quot; TO PAS WITH ADMIN OPTION;SQL&gt;GRANT &quot;DBA&quot; TO PAS WITH ADMIN OPTION;SQL&gt;GRANT &quot;JAVASYSPRIV&quot; TO PAS WITH ADMIN OPTION;SQL&gt;GRANT &quot;CONNECT&quot; TO PAS WITH ADMIN OPTION;SQL&gt;ALTER USER PAS DEFAULT ROLE &quot;JAVAUSERPRIV&quot;,&quot;RESOURCE&quot;,&quot;DBA&quot;,&quot;JAVASYSPRIV&quot;,&quot;CONNECT&quot;;-- SYSTEM PRIVILEGESSQL&gt;GRANT CREATE ANY INDEX TO PAS WITH ADMIN OPTION;SQL&gt;GRANT CREATE ANY TABLE TO PAS WITH ADMIN OPTION;SQL&gt;GRANT UNLIMITED TABLESPACE TO PAS WITH ADMIN OPTION;SQL&gt;grant select on SYS.DBA_DATA_FILES to PAS;SQL&gt;grant select on SYS.DBA_FREE_SPACE to PAS;SQL&gt;grant select on SYS.DBA_TABLESPACES to PAS;SQL&gt;grant create session to PAS;SQL&gt;grant create sequence to PAS;SQL&gt;grant drop any sequence to PAS;SQL&gt;grant select any dictionary to pas; 配置数据库参数【sqlplus】下面是数据库的基本参数建议配置，可根据实际情况按需修改，需以sys用户登录数据库,$sqlplus / as sysdba; 1.设置SGA大小，建议为物理内存的40%SQL&gt;alter system set sga_max_size=20G scope=both alter system set sga_target=20G scope=spfile; 2.设置PGA大小，建议为物理内存10%SQL&gt;alter system set pga_aggregate_target=5G scope=both; 3.设置最大进程数，PROCESSE=1500SQL&gt; alter system set processes=1500 scope=spfile; 4.设置最大游标数OPEN_CURSORS=300SQL&gt; alter system set open_cursors=1000 scope=both; ====== 部署完成 ====== 部署教程系列 LINUX+ORACLE部署安装：http://pygo2.top/articles/40987/ Linux安装JAVA1.7与配置：http://pygo2.top/articles/13502/ Windows安装JAVA1.7与配置：http://pygo2.top/articles/1151/ Windows安装Tomcat7与配置：http://pygo2.top/articles/2013/ Windows安装PLSQL与配置：http://pygo2.top/articles/47618/ 部署系列持续更新中。。。。。。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>部署教程系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Server2012R2安装PLSQL]]></title>
    <url>%2Farticles%2F47618%2F</url>
    <content type="text"><![CDATA[Windows安装PLSQL与配置 PLSQL Windows Oracle 版本说明 名称 版本 服务器系统 Windows Server2012 R2 Standard PSQL PSQL（32位） Instant Client客户端实例 11.2.0.4.0（32位） 材料准备 PLSQL安装包（32位） Oracle Instant Client:instantclient包（32位） （需要配套，位数保持一致） 一套工具baidu云盘下载：1234=====================================================================链接：https://pan.baidu.com/s/1LuLaIxK4z7AQgNFHZhoTHw?pwd=4tgc提取码：4tgc===================================================================== 下载包含PLSQL（32位），Oracle Instant Client（32位、64位） 官网下载1、下载PLSQL，请自行下载PJ版本。 2、下载Oracle instantclient包，打开Oracle官网Instant下载地址：https://www.oracle.com/database/technologies/instant-client/downloads.html下载32位版本： 3、进入32版本页面之后，ctrl+f页面搜索11.，下载11.2.0.4.0版本的包 4、点击下载11.2.0.4.0包之后，Oracle会让注册一个用户，正常按注册流程走完注册成功后，会进行下载。这里我32位和64位都下载了，以防连接时候出现版本问题。64位下载的方式跟上面一样。 5、下载好的PLSQL、Oracle Instant Client： 安装1、PLSQL软件组成有3个部分，PLSQL安装包、中文语言包、注册信息 2、直接点击plsqldev1106x32.exe进行安装，选择安装在D盘根目录，避免安装路径包含中文或者空格 3、安装中文包:Language_zh_x86_x64.exePLSQL安装路径会自动识别，一直下一步即可。 4、安装完点击桌面plsql快捷进行登录，点击取消直接先登录 5、点击菜单帮助 -&gt; 注册 -&gt; 把注册信息填写，完成注册 配置1、解压文件：instantclient-basic-nt-11.2.0.4.0.zip把文件放在D盘根目录 2、打开PLSQL，点击取消进行登录，点击菜单工具 -&gt; 首先项 -&gt; 连接 3、配置以下内容，instantclient目录已实际为准Oracle主目录：D:\instantclient_11_2OCI库：D:\instantclient_11_2\oci.dll其中，OCI库一定要选择根目录下的oci.dll【重点】 4、应用 -&gt; 确定，关闭PLSQL 5、配置TNS_ADMIN监听文件在D:\instantclient_11_2\NETWORK\ADMIN目录找到tnsnames.ora文件。其实，这个tnsnames.ora文件是服务器数据库文件一样的，具体位置: 如果没有自行创建一个或者直接把服务器上面那个文件复制出一份，写入以下内容。123456789101112=========================================================# tnsnames.ora Network Configuration File: D:\instantclient_11_2\NETWORK\ADMIN\tnsnames.ora# Generated by Oracle configuration tools.PAS = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 10.15.176.9)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = PAS) ) ) 修改的配置值： IP 10.15.176.9修改成数据库服务器IP，通过ip addr 或者 ifconfig（找到eth0网卡的ip） SERVICE_NAME 通过SQPLUS获取当前数据库SERVICE_NAME，执行语句如下：【数据库服务器】123su - oraclesqlplus / as /sysdbashow parameter service_ 修改完成后保存文件。 6、环境变量配置安装以后需要进行环境变量配置。6.1 我的电脑（右键）-&gt;选择属性-&gt;高级系统设置-&gt;环境变量。 6.2 环境变量配置6.2.1 新建ORACLE_HOME变量变量名：ORACLE_HOME变量值：D:\instantclient_11_2 6.2.2 新建NLS_LANG变量变量名：NLS_LANG变量值：SIMPLIFIED CHINESE_CHINA.ZHS16GBK 6.2.3 新建TNS_ADMIN变量变量名：TNS_ADMIN变量值：D:\instantclient_11_2\NETWORK\ADMIN 7、测试PLSQL，输入相关信息登录。 拓展问题1、PLSQ出现了初始化错误，请检查32bits Oracle Client installed如果使用了本教程提供的整套工具，应该是可以连接上的，需要PLSQL版本位数与instantclient位数保持一致。如果需要提供一个32位Oracle Client包。 2、NLS_LANG特殊说明Oracle配置的用户NLS_LANG变量是： AMERICAN_AMERICA.ZHS16GBKWindows服务器配置NLS_LANG变量 SIMPLIFIED CHINESE_CHINA.ZHS16GBK简单解释一下，NLS_LANG由三部分组成：（一）语言：SIMPLIFIED CHINESE 或者 AMERICAN影响的是中文还是英文提示区域：CHINA 或者AMERICA影响的是日期、数字、金融格式什么的字符集：ZHS16GBK都采用的ZHS16GBK字符集，只要保持这个一直，就可以保持数据库备份，到另一个数据库恢复，中文不会乱码一定要按保持字符集一样 =========== END =========== 部署教程系列 LINUX+ORACLE部署安装：http://pygo2.top/articles/40987/ Linux安装JAVA1.7与配置：http://pygo2.top/articles/13502/ Windows安装JAVA1.7与配置：http://pygo2.top/articles/1151/ Windows安装Tomcat7与配置：http://pygo2.top/articles/2013/ Windows安装PLSQL与配置：http://pygo2.top/articles/47618/ 部署系列持续更新中。。。。。。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>部署教程系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Server2012R2安装TOMCAT]]></title>
    <url>%2Farticles%2F2013%2F</url>
    <content type="text"><![CDATA[Windows安装Tomcat7与配置 Tomcat Windows 版本说明 名称 版本 服务器系统 Windows Server2012 R2 Standard Tomcat 7 安装1、打开Tomcat下载地址，根据项目选择对应的版本进行下载，本文选择Tomcat7：https://archive.apache.org/dist/tomcat/ 2、选择bin，进入之后会有各种版本，本文选择7.0.99最后一个7版本 3、Windows版本，下载的时候根据安装系统选择对应的版本、位数，本文选择了：apache-tomcat-7.0.99-windows-x64.zip这种包的好处在于不用安装，直接能用，也可以选择exe安装版本。 4、下载好之后，直接copy到服务器，直接解压放在D盘根目录。建议：安装的路径选择英文路径。 5、环境变量配置安装以后需要进行环境变量配置。5.1 我的电脑（右键）-&gt;选择属性-&gt;高级系统设置-&gt;环境变量。 5.2 环境变量配置5.2.1 新建CATALINA_HOME变量变量名：CATALINA_HOME变量值：Tomcat安装的绝对路径（D:\apache-tomcat-7.0.99） 5.2.2 修改Path变量PATH变量在末尾添加：;%CATALINA_HOME%\bin 6 测试变量打开cmd窗口（win+R），输入echo %CATALINA_HOME%，如果是Tomcat安装路径，否则就是环境变量配置问题。 7 启动Tomcat7.1 进入到Tomcat安装路径下的bin目录7.2 shift + 右键-&gt;选择-&gt;在此文件夹打开命令窗口 7.3 输入startup.bat，启动tomcat 7.4 打开浏览器：127.0.0.7:8080，出现tomcat服务 问题 1、cmd控制台乱码 1.1 Tomcat安装路径 -&gt; conf -&gt; logging.properties修改以下内容：12# java.util.logging.ConsoleHandler.encoding = UTF-8java.util.logging.ConsoleHandler.encoding = CBK 1.2 重启Tomcat，解决乱码问题乱码解析：Cmd控制台编码与Tomcat日志编码不一致，查看cmd控制台编码：cmd控制台为GBK编码，Tomcat日志编码默认UTF-8编码，统一编码就解决了 2、Tomcat修改内存 在部署PSA4.3.4系统运行后，发现系统Tomcat控制台报错：java.lang.OutOfMemoryError：PermGen space，意思就是内存不足，由于Windows服务器主要用来做应用服务所用，所以手动分配Tomcat内存大小。 2.1 Windows找到D:\apache-tomcat-7.0.99\bin下的catalina.bat文件（Linux：D:\apache-tomcat-7.0.99\bin\catalina.sh文件） 2.2 用notepad打开，在111行setlocal后面加上：12set JAVA_OPTS=%JAVA_OPTS% -server -XX:PermSize=8192M -XX:MaxPermSize=8192M8G 服务器总大小为32G，就一个tomcat，分的大了点，根据服务器项目情况可以适当调整。不过，Xms与Xmx参数之间的差值建议不要太大，不然会造成内存浪费，这里设置相等。JAVA_OPTS配置文件上面搜索JAVA_OPTS，有说明。 2.3 重启Tomcat解决OutOfMemoryError =========== END =========== 部署教程系列 LINUX+ORACLE部署安装：http://pygo2.top/articles/40987/ Linux安装JAVA1.7与配置：http://pygo2.top/articles/13502/ Windows安装JAVA1.7与配置：http://pygo2.top/articles/1151/ Windows安装Tomcat7与配置：http://pygo2.top/articles/2013/ Windows安装PLSQL与配置：http://pygo2.top/articles/47618/ 部署系列持续更新中。。。。。。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>部署教程系列</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Server2012R2安装JAVA]]></title>
    <url>%2Farticles%2F1151%2F</url>
    <content type="text"><![CDATA[Windows安装JAVA1.7与配置 Java Windows 版本说明 名称 版本 服务器系统 Windows Server2012 R2 Standard Java 1.7 安装1、打开Java下载地址，找到Java7SE（标准版），进行下载：https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.htmlWindows版本，下载的时候根据安装系统选择对应的版本、位数： 2、下载好之后，直接copy到服务器，进行安装。建议：安装的路径选择英文路径。安装过程很简单，安装后截图： 3、环境变量配置安装以后需要进行环境变量配置。3.1 我的电脑（右键）-&gt;选择属性-&gt;高级系统设置-&gt;环境变量。 3.2 环境变量配置3.3.1 新建JAVA_HOME变量变量名：JAVA_HOME变量值：JDK安装的绝对路径（D:\Program Files\Java\jdk1.7.0_17） 3.3.2 新建CLASSPATH变量变量名：CLASSPATH变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;变量值前面是.【英文点】变量后面是;【英文分号】 3.3.3 修改Path变量第三步：新建两条路径:;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin; 4 测试打开cmd窗口（win+R），输入java，如果是以下提示安装成功，否则就是环境变量配置问题。 =========== END =========== 部署教程系列 LINUX+ORACLE部署安装：http://pygo2.top/articles/40987/ Linux安装JAVA1.7与配置：http://pygo2.top/articles/13502/ Windows安装JAVA1.7与配置：http://pygo2.top/articles/1151/ Windows安装Tomcat7与配置：http://pygo2.top/articles/2013/ Windows安装PLSQL与配置：http://pygo2.top/articles/47618/ 部署系列持续更新中。。。。。。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>部署教程系列</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redhat7.6安装JAVA]]></title>
    <url>%2Farticles%2F13502%2F</url>
    <content type="text"><![CDATA[Redhat7.6安装JAVA1.7与配置 Java Redhat7 版本说明 名称 版本 服务器系统 Red Hat Enterprise Linux Server release 7.6 Java 1.7 Linux安装方式本教程介绍2种。 YUM安装方式一：Yum安装 1.查询java版本1yum search java 2.安装指定版本：1yum -y install java-1.7.0-openjdk.x86_64 参数-y：yes，一路安装，不用交互 参数install：安装 配置在后面统一说明。 源码安装方式二：源码安装 1、打开Java下载地址，找到Java7SE（标准版），进行下载：https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.htmlLinux版本，下载的时候根据安装系统选择对应的版本、位数： 2、下载好之后，使用连接工具的文件传输功能把源码Java传输到服务器。 3、创建Java安装目录1mkdir /usr/local/java 4、解压Java源码到建立的Java安装目录1tar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/local/java 参数说明 ： -zxvf 不解释了。 -C不常用，解释一下：代表切换目录，change dir 环境变量配置以上的安装方式都需要配置环境变量，操作如下：1、打开/etc/profile文件，加入以下配置：12345678910111213vim /etc/profile# -------------------------------------------------------------------# java set environmentJAVA_HOME=/usr/local/java/jdk1.7.0_80JRE_HOME=$JAVA_HOME/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOMEexport JRE_HOMEexport CLASS_PATHexport PATH#--------------------------------------------------------------------:wq 保存 JAVA_HOME：Java安装路径 JRE_HOME：Jre安装路径 CLASS_PATH：Java class path 2、变量生效1source /etc/profile 3、添加软连接，是命令在bin下1ln -s /usr/local/java/jdk1.7.0_80/bin/java /usr/local/bin/java 4、测试Java命令1java -version =========== END =========== 部署教程系列 LINUX+ORACLE部署安装：http://pygo2.top/articles/40987/ Linux安装JAVA1.7与配置：http://pygo2.top/articles/13502/ Windows安装JAVA1.7与配置：http://pygo2.top/articles/1151/ Windows安装Tomcat7与配置：http://pygo2.top/articles/2013/ Windows安装PLSQL与配置：http://pygo2.top/articles/47618/ 部署系列持续更新中。。。。。。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>部署教程系列</tag>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2数据库表空间操作]]></title>
    <url>%2Farticles%2F5556%2F</url>
    <content type="text"><![CDATA[表空间对于DB2来说，就像一个容器，数据需要灌到这个容器里面。早上去项目，发现表空间报警提示马上满了，一定要提前扩容，不然数据库数据写不进去了。对表空间操作方式有2种：ADD与RESIZE。 DB2 表空间 本项目使用的DB29.7版本，估计不同的版本表空间扩容都差不多。 扩容表空间DB2CMD中执行，先连上数据库：12su - db2inst1db2 connect to ykspas3 user pas using pas 方式一：新增 1db2 &quot;alter tablespace TBS_IDX ADD (FILE &apos;/home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_IDX/TBS_IDX3&apos; 30G)&quot; 文件改成项目对应的表空间实体文件。 方式二：调整 12-- 调整【resize立马查看发生变化】db2 &quot;alter tablespace TBS_IDX RESIZE (file &apos;/home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_IDX/TBS_IDX2&apos; 50G)&quot; 表空间使用率直接上SQL：1234567891011121314SELECT tbsp_id AS ID,-- tbsp_create_time AS CREATE_TIME, tbsp_name as NAME, tbsp_content_type AS TYPE, tbsp_state AS STATE, sum(tbsp_total_size_kb)/1024 AS TOTAL_MB, sum(tbsp_used_size_kb)/1024 AS USED_MB, sum(tbsp_free_size_kb)/1024 AS FREE_MB, tbsp_page_size AS PAGE_SIZEFROM SYSIBMADM.TBSP_UTILIZATION--WHERE tbsp_name LIKE &apos;TBS_%&apos;GROUP BY tbsp_id, tbsp_create_time, tbsp_name, tbsp_content_type, tbsp_state, tbsp_page_sizeORDER BY tbsp_name 其他查询表空间SQL 查看表空间 123456789101112-- TBSP_UTILIZATIONSELECT * FROM SYSIBMADM.TBSP_UTILIZATION-- SNAPTBSPSELECT * FROM SYSIBMADM.SNAPTBSP-- SNAPTBSP_PARTSELECT * FROM SYSIBMADM.SNAPTBSP_PART-- SYSTABLESPACESSELECT * FROM SYSIBM.SYSTABLESPACES 具体的区别有兴趣的可以baidu，这里作为参考SQL。 查看表空间列表db2 list tablespaces show detail Tablespaces for Current Database Tablespace ID = 0 Name = SYSCATSPACE Type = Database managed space Contents = All permanent data. Regular table space. State = 0x0000 Detailed explanation: Normal Total pages = 401408 Useable pages = 401404 Used pages = 398888 Free pages = 2516 High water mark (pages) = 398888 Page size (bytes) = 4096 Extent size (pages) = 4 Prefetch size (pages) = 4 Number of containers = 1 Tablespace ID = 1 Name = SYSTOOLSTMPSPACE Type = System managed space Contents = User Temporary data State = 0x0000 Detailed explanation: Normal Total pages = 1 Useable pages = 1 Used pages = 1 Free pages = Not applicable High water mark (pages) = Not applicable Page size (bytes) = 4096 Extent size (pages) = 4 Prefetch size (pages) = 4 Number of containers = 1 Tablespace ID = 2 Name = TBS_MXZ Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 58982400 Useable pages = 58982112 Used pages = 55210560 Free pages = 3771552 High water mark (pages) = 55210688 Page size (bytes) = 8192 Extent size (pages) = 32 Prefetch size (pages) = 256 Number of containers = 9 Tablespace ID = 3 Name = SYSTOOLSPACE Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 8192 Useable pages = 8188 Used pages = 620 Free pages = 7568 High water mark (pages) = 620 Page size (bytes) = 4096 Extent size (pages) = 4 Prefetch size (pages) = 4 Number of containers = 1 Tablespace ID = 4 Name = TBS_PAS Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 7864320 Useable pages = 7864256 Used pages = 2023904 Free pages = 5840352 High water mark (pages) = 2023904 Page size (bytes) = 8192 Extent size (pages) = 32 Prefetch size (pages) = 64 Number of containers = 2 Tablespace ID = 5 Name = TBS_JKSJ Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 655360 Useable pages = 655344 Used pages = 505808 Free pages = 149536 High water mark (pages) = 516144 Page size (bytes) = 8192 Extent size (pages) = 16 Prefetch size (pages) = 32 Number of containers = 1 Tablespace ID = 6 Name = TBS_JXDX Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 7864320 Useable pages = 7864256 Used pages = 4799008 Free pages = 3065248 High water mark (pages) = 4799008 Page size (bytes) = 8192 Extent size (pages) = 32 Prefetch size (pages) = 64 Number of containers = 2 Tablespace ID = 7 Name = TBS_NBZZ Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 19660800 Useable pages = 19660640 Used pages = 17532096 Free pages = 2128544 High water mark (pages) = 17532096 Page size (bytes) = 8192 Extent size (pages) = 32 Prefetch size (pages) = 64 Number of containers = 5 Tablespace ID = 8 Name = TBS_SYSTMP_32 Type = System managed space Contents = System Temporary data State = 0x0000 Detailed explanation: Normal Total pages = 9 Useable pages = 9 Used pages = 9 Free pages = Not applicable High water mark (pages) = Not applicable Page size (bytes) = 32768 Extent size (pages) = 32 Prefetch size (pages) = 32 Number of containers = 1 Tablespace ID = 9 Name = TBS_IDX Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 10485760 Useable pages = 10485696 Used pages = 7860992 Free pages = 2624704 High water mark (pages) = 7860992 Page size (bytes) = 8192 Extent size (pages) = 32 Prefetch size (pages) = 64 Number of containers = 2 Tablespace ID = 10 Name = TBS_LSB Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Total pages = 1310720 Useable pages = 1310704 Used pages = 74496 Free pages = 1236208 High water mark (pages) = 77232 Page size (bytes) = 8192 Extent size (pages) = 16 Prefetch size (pages) = 32 Number of containers = 1 Tablespace ID = 11 Name = TBS_SYSTMP_04 Type = System managed space Contents = System Temporary data State = 0x0000 Detailed explanation: Normal Total pages = 12 Useable pages = 12 Used pages = 12 Free pages = Not applicable High water mark (pages) = Not applicable Page size (bytes) = 4096 Extent size (pages) = 16 Prefetch size (pages) = 16 Number of containers = 1 Tablespace ID = 12 Name = TBS_SYSTMP_08 Type = System managed space Contents = System Temporary data State = 0x0000 Detailed explanation: Normal Total pages = 1 Useable pages = 1 Used pages = 1 Free pages = Not applicable High water mark (pages) = Not applicable Page size (bytes) = 8192 Extent size (pages) = 32 Prefetch size (pages) = 32 Number of containers = 1 Tablespace ID = 13 Name = TBS_USERTMP_08 Type = System managed space Contents = User Temporary data State = 0x0000 Detailed explanation: Normal Total pages = 135189 Useable pages = 135189 Used pages = 135189 Free pages = Not applicable High water mark (pages) = Not applicable Page size (bytes) = 8192 Extent size (pages) = 32 Prefetch size (pages) = 32 Number of containers = 1 Tablespace ID = 14 Name = TBS_USERTMP_32 Type = System managed space Contents = User Temporary data State = 0x0000 Detailed explanation: Normal Total pages = 1 Useable pages = 1 Used pages = 1 Free pages = Not applicable High water mark (pages) = Not applicable Page size (bytes) = 32768 Extent size (pages) = 32 Prefetch size (pages) = 32 Number of containers = 1 =======================================================================================================[db2inst1@localhost PAS_BACKUP]$ db2 list tablespaces Tablespaces for Current Database Tablespace ID = 0 Name = SYSCATSPACE Type = Database managed space Contents = All permanent data. Regular table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 1 Name = SYSTOOLSTMPSPACE Type = System managed space Contents = User Temporary data State = 0x0000 Detailed explanation: Normal Tablespace ID = 2 Name = TBS_MXZ Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 3 Name = SYSTOOLSPACE Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 4 Name = TBS_PAS Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 5 Name = TBS_JKSJ Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 6 Name = TBS_JXDX Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 7 Name = TBS_NBZZ Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 8 Name = TBS_SYSTMP_32 Type = System managed space Contents = System Temporary data State = 0x0000 Detailed explanation: Normal Tablespace ID = 9 Name = TBS_IDX Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 10 Name = TBS_LSB Type = Database managed space Contents = All permanent data. Large table space. State = 0x0000 Detailed explanation: Normal Tablespace ID = 11 Name = TBS_SYSTMP_04 Type = System managed space Contents = System Temporary data State = 0x0000 Detailed explanation: Normal Tablespace ID = 12 Name = TBS_SYSTMP_08 Type = System managed space Contents = System Temporary data State = 0x0000 Detailed explanation: Normal Tablespace ID = 13 Name = TBS_USERTMP_08 Type = System managed space Contents = User Temporary data State = 0x0000 Detailed explanation: Normal Tablespace ID = 14 Name = TBS_USERTMP_32 Type = System managed space Contents = User Temporary data State = 0x0000 Detailed explanation: Normal =================================================================[db2inst1@localhost PAS_BACKUP]$ db2 get snapshot for tablespaces on ykspas3 Tablespace SnapshotFirst database connect timestamp = 2022-08-02 08:09:18.739628Last reset timestamp =Snapshot timestamp = 2022-08-02 14:19:43.798840Database name = YKSPAS3Database path = /home/db2inst1/db2inst1/NODE0000/SQL00002/Input database alias = YKSPAS3Number of accessed tablespaces = 15Tablespace name = SYSCATSPACE Tablespace ID = 0 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Regular table space. Tablespace Page size (bytes) = 4096 Tablespace Extent size (pages) = 4 Automatic Prefetch size enabled = Yes Buffer pool ID currently in use = 1 Buffer pool ID next startup = 1 Using automatic storage = Yes Auto-resize enabled = Yes File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Tablespace Prefetch size (pages) = 4 Total number of pages = 401408 Number of usable pages = 401404 Number of used pages = 398888 Number of pending free pages = 0 Number of free pages = 2516 High water mark (pages) = 398888 Initial tablespace size (bytes) = 33554432 Current tablespace size (bytes) = 1644167168 Maximum tablespace size (bytes) = NONE Increase size (bytes) = AUTOMATIC Time of last successful resize = Last resize attempt failed = No Rebalancer Mode = No Rebalancing Storage paths have been dropped = No Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/yksbf/db2inst1/NODE0000/YKSPAS3/T0000000/C0000000.CAT Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 401408 Usable Pages in Container = 401404 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 100350 401403 0 100350 0 1 (0) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = SYSTOOLSTMPSPACE Tablespace ID = 1 Tablespace Type = System managed space Tablespace Content Type = User Temporary data Tablespace Page size (bytes) = 4096 Tablespace Extent size (pages) = 4 Automatic Prefetch size enabled = Yes Buffer pool ID currently in use = 1 Buffer pool ID next startup = 1 Using automatic storage = Yes File system caching = Yes Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Tablespace Prefetch size (pages) = 4 Total number of pages = 0 Number of usable pages = 0 Number of used pages = 0 Storage paths have been dropped = No Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/yksbf/db2inst1/NODE0000/YKSPAS3/T0000001/C0000000.UTM Container ID = 0 Container Type = Path Total Pages in Container = 0 Usable Pages in Container = 0 Stripe Set = 0 Container is accessible = Yes Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_MXZ Tablespace ID = 2 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 256 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No Auto-resize enabled = No File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 58982400 Number of usable pages = 58982112 Number of used pages = 55398464 Number of pending free pages = 0 Number of free pages = 3583648 High water mark (pages) = 55398528 Current tablespace size (bytes) = 483183820800 Rebalancer Mode = No Rebalancing Minimum Recovery Time = Number of quiescers = 0 Number of containers = 9 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ1 Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ2 Container ID = 1 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ3 Container ID = 2 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ4 Container ID = 3 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ5 Container ID = 4 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ6 Container ID = 5 Container Type = File (extent sized tag) Total Pages in Container = 11796480 Usable Pages in Container = 11796448 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ7 Container ID = 6 Container Type = File (extent sized tag) Total Pages in Container = 7864320 Usable Pages in Container = 7864288 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ8 Container ID = 7 Container Type = File (extent sized tag) Total Pages in Container = 11796480 Usable Pages in Container = 11796448 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/TBS_MXZ9 Container ID = 8 Container Type = File (extent sized tag) Total Pages in Container = 7864320 Usable Pages in Container = 7864288 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 983031 31457023 0 122878 0 8 (0,1,2,3,4,5,6,7) [ 1] [ 0] 0 983034 31457119 122879 122879 0 3 (5,6,7) [ 2] [ 0] 0 1474550 47185631 122880 245758 0 4 (5,6,7,8) [ 3] [ 0] 0 1843190 58982111 245759 368638 0 3 (5,7,8) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = SYSTOOLSPACE Tablespace ID = 3 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 4096 Tablespace Extent size (pages) = 4 Automatic Prefetch size enabled = Yes Buffer pool ID currently in use = 1 Buffer pool ID next startup = 1 Using automatic storage = Yes Auto-resize enabled = Yes File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Tablespace Prefetch size (pages) = 4 Total number of pages = 8192 Number of usable pages = 8188 Number of used pages = 620 Number of pending free pages = 0 Number of free pages = 7568 High water mark (pages) = 620 Initial tablespace size (bytes) = 33554432 Current tablespace size (bytes) = 33554432 Maximum tablespace size (bytes) = NONE Increase size (bytes) = AUTOMATIC Time of last successful resize = Last resize attempt failed = No Rebalancer Mode = No Rebalancing Storage paths have been dropped = No Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/yksbf/db2inst1/NODE0000/YKSPAS3/T0000003/C0000000.LRG Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 8192 Usable Pages in Container = 8188 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 2046 8187 0 2046 0 1 (0) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_PAS Tablespace ID = 4 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 64 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No Auto-resize enabled = No File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 7864320 Number of usable pages = 7864256 Number of used pages = 2028416 Number of pending free pages = 0 Number of free pages = 5835840 High water mark (pages) = 2028416 Current tablespace size (bytes) = 64424509440 Rebalancer Mode = No Rebalancing Minimum Recovery Time = Number of quiescers = 0 Number of containers = 2 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_PAS1 Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_PAS2 Container ID = 1 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 245757 7864255 0 122878 0 2 (0,1) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_JKSJ Tablespace ID = 5 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 16 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 32 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No Auto-resize enabled = No File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 655360 Number of usable pages = 655344 Number of used pages = 508512 Number of pending free pages = 0 Number of free pages = 146832 High water mark (pages) = 508912 Current tablespace size (bytes) = 5368709120 Rebalancer Mode = No Rebalancing Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_JKSJ1 Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 655360 Usable Pages in Container = 655344 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 40958 655343 0 40958 0 1 (0) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_JXDX Tablespace ID = 6 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 64 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No Auto-resize enabled = No File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 7864320 Number of usable pages = 7864256 Number of used pages = 4821632 Number of pending free pages = 0 Number of free pages = 3042624 High water mark (pages) = 4821632 Current tablespace size (bytes) = 64424509440 Rebalancer Mode = No Rebalancing Minimum Recovery Time = Number of quiescers = 0 Number of containers = 2 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_JXDX1 Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_JXDX2 Container ID = 1 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 245757 7864255 0 122878 0 2 (0,1) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_NBZZ Tablespace ID = 7 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 64 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No Auto-resize enabled = No File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 19660800 Number of usable pages = 19660640 Number of used pages = 17548480 Number of pending free pages = 0 Number of free pages = 2112160 High water mark (pages) = 17548480 Current tablespace size (bytes) = 161061273600 Rebalancer Mode = No Rebalancing Minimum Recovery Time = Number of quiescers = 0 Number of containers = 5 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ1 Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ2 Container ID = 1 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ3 Container ID = 2 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ4 Container ID = 3 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_NBZZ5 Container ID = 4 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 614394 19660639 0 122878 0 5 (0,1,2,3,4) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_SYSTMP_32 Tablespace ID = 8 Tablespace Type = System managed space Tablespace Content Type = System Temporary data Tablespace Page size (bytes) = 32768 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 32 Buffer pool ID currently in use = 3 Buffer pool ID next startup = 3 Using automatic storage = No File system caching = Yes Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 0 Number of usable pages = 0 Number of used pages = 0 Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_TMP/TBS_SYSTMP_32 Container ID = 0 Container Type = Path Total Pages in Container = 0 Usable Pages in Container = 0 Stripe Set = 0 Container is accessible = Yes Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_IDX Tablespace ID = 9 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 64 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No Auto-resize enabled = No File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 10485760 Number of usable pages = 10485696 Number of used pages = 7891584 Number of pending free pages = 0 Number of free pages = 2594112 High water mark (pages) = 7891584 Current tablespace size (bytes) = 85899345920 Rebalancer Mode = No Rebalancing Minimum Recovery Time = Number of quiescers = 0 Number of containers = 2 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_IDX/TBS_IDX1 Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 3932160 Usable Pages in Container = 3932128 Stripe Set = 0 Container is accessible = Yes Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_IDX/TBS_IDX2 Container ID = 1 Container Type = File (extent sized tag) Total Pages in Container = 6553600 Usable Pages in Container = 6553568 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 245757 7864255 0 122878 0 2 (0,1) [ 1] [ 0] 0 327677 10485695 122879 204798 0 1 (1) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_LSB Tablespace ID = 10 Tablespace Type = Database managed space Tablespace Content Type = All permanent data. Large table space. Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 16 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 32 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No Auto-resize enabled = No File system caching = No Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 1310720 Number of usable pages = 1310704 Number of used pages = 74560 Number of pending free pages = 0 Number of free pages = 1236144 High water mark (pages) = 77232 Current tablespace size (bytes) = 10737418240 Rebalancer Mode = No Rebalancing Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_DATA/TBS_LSB1 Container ID = 0 Container Type = File (extent sized tag) Total Pages in Container = 1310720 Usable Pages in Container = 1310704 Stripe Set = 0 Container is accessible = Yes Table space map: Range Stripe Stripe Max Max Start End Adj. Containers Number Set Offset Extent Page Stripe Stripe [ 0] [ 0] 0 81918 1310703 0 81918 0 1 (0) Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_SYSTMP_04 Tablespace ID = 11 Tablespace Type = System managed space Tablespace Content Type = System Temporary data Tablespace Page size (bytes) = 4096 Tablespace Extent size (pages) = 16 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 16 Buffer pool ID currently in use = 1 Buffer pool ID next startup = 1 Using automatic storage = No File system caching = Yes Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 0 Number of usable pages = 0 Number of used pages = 0 Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_TMP/TBS_SYSTMP_04 Container ID = 0 Container Type = Path Total Pages in Container = 0 Usable Pages in Container = 0 Stripe Set = 0 Container is accessible = Yes Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_SYSTMP_08 Tablespace ID = 12 Tablespace Type = System managed space Tablespace Content Type = System Temporary data Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 32 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No File system caching = Yes Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 0 Number of usable pages = 0 Number of used pages = 0 Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_TMP/TBS_SYSTMP_08 Container ID = 0 Container Type = Path Total Pages in Container = 0 Usable Pages in Container = 0 Stripe Set = 0 Container is accessible = Yes Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_USERTMP_08 Tablespace ID = 13 Tablespace Type = System managed space Tablespace Content Type = User Temporary data Tablespace Page size (bytes) = 8192 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 32 Buffer pool ID currently in use = 2 Buffer pool ID next startup = 2 Using automatic storage = No File system caching = Yes Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 0 Number of usable pages = 0 Number of used pages = 0 Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_TMP/TBS_USERTMP_08 Container ID = 0 Container Type = Path Total Pages in Container = 0 Usable Pages in Container = 0 Stripe Set = 0 Container is accessible = Yes Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not CollectedTablespace name = TBS_USERTMP_32 Tablespace ID = 14 Tablespace Type = System managed space Tablespace Content Type = User Temporary data Tablespace Page size (bytes) = 32768 Tablespace Extent size (pages) = 32 Automatic Prefetch size enabled = No Tablespace Prefetch size (pages) = 32 Buffer pool ID currently in use = 3 Buffer pool ID next startup = 3 Using automatic storage = No File system caching = Yes Tablespace State = 0x&apos;00000000&apos; Detailed explanation: Normal Total number of pages = 0 Number of usable pages = 0 Number of used pages = 0 Minimum Recovery Time = Number of quiescers = 0 Number of containers = 1 Container Name = /home/db2inst1/YKSPAS3/PAS_DATA/PAS_SPACE_TMP/TBS_USERTMP_32 Container ID = 0 Container Type = Path Total Pages in Container = 0 Usable Pages in Container = 0 Stripe Set = 0 Container is accessible = Yes Buffer pool data logical reads = Not Collected Buffer pool data physical reads = Not Collected Buffer pool temporary data logical reads = Not Collected Buffer pool temporary data physical reads = Not Collected Asynchronous pool data page reads = Not Collected Buffer pool data writes = Not Collected Asynchronous pool data page writes = Not Collected Buffer pool index logical reads = Not Collected Buffer pool index physical reads = Not Collected Buffer pool temporary index logical reads = Not Collected Buffer pool temporary index physical reads = Not Collected Asynchronous pool index page reads = Not Collected Buffer pool index writes = Not Collected Asynchronous pool index page writes = Not Collected Total buffer pool read time (millisec) = Not Collected Total buffer pool write time (millisec) = Not Collected Total elapsed asynchronous read time = Not Collected Total elapsed asynchronous write time = Not Collected Asynchronous data read requests = Not Collected Asynchronous index read requests = Not Collected No victim buffers available = Not Collected Direct reads = Not Collected Direct writes = Not Collected Direct read requests = Not Collected Direct write requests = Not Collected Direct reads elapsed time (ms) = Not Collected Direct write elapsed time (ms) = Not Collected Number of files closed = Not Collected]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2数据库SQLCODE速查对应表]]></title>
    <url>%2Farticles%2F36398%2F</url>
    <content type="text"><![CDATA[SQLCODE速查表 DB2 SQLCODE sqlcode sqlstate DB2错误信息（按sqlcode排序） 0 0 SQL语句成功完成 01xxx SQL语句成功完成，但是有警告 12 1545 未限定的列名被解释为一个有相互关系的引用 98 1568 动态SQL语句用分号结束 100 2000 没有找到满足SQL语句的行 110 1561 用DATA CAPTURE定义的表的更新操作不能发送到原来的子系统 111 1590 为2型索引设置了SUBPAGES语句 117 1525 要插入的值的个数不等于被插入表的列数 162 1514 指定的表空间被置为检查挂起状态 203 1552 使用非唯一的名字来解决命名的限定列 204 1532 命名的对象未在DB2中定义 206 1533 命名的列不在SQL语句中指定的任何表中存在 218 1537 因为SQL语句引用一个远程对象，不能为该SQL语句执行EXPLAIN 219 1532 命名的PLAN TABLE不存在 220 1546 不正确定义PLAN TABLE，检查命名列的定义 236 1005 SQLDA中的SQLN的值至少应于所描述的列的个数一样大 237 1594 至少有一个被描述的列应该是单值类型，因此扩展的SQLVAR条目需要另外的空间 238 1005 至少应有一个被描述的列是一个LOB，因此扩展的SQLVAR条目需要另外的空间 239 1005 至少应有一个被描述的列应是单值类型，因此扩展的SQLVAR条目需要另外的空间 304 1515 该值不能被分配给宿主变量，因为该值不再数据类型的范围之内 331 1520 不能被翻译的字符串，因此被设置为NULL 339 1569 由于与DB2 2.2版本的子系统连接，所以可能存在字符转换问题 394 1629 使用优化提示来选择访问路径 395 1628 设置了无效的优化提示，原因代码指定了为什么，忽略优化提示 402 1521 未知的位置 403 1522 本地不存在CREAT ALIAS对象 434 1608 在DB2未来发布的版本中将不支持指定的特性，IBM建议你停止使用这些特性 445 1004 值被CAST函数截取 462 01Hxx 由用户定义的函数或存储过程发出的警告 464 1609 命名的存储过程超出了它可能返回的查询结果集的个数限制 466 1610 指定由命名的存储过程返回的查询结果集的个数。成功完成 494 1614 由存储过程返回的结果集的个数超过了由ASSOCIATE LOCATORS语句指定的结果集定位器的个数 495 1616 因为倒台SQL的成本估算超出了在ELST中指定的警告阀值，所以发出警告 535 1591 请求一个主健的定位更新，或请求一个使用自我引出 约束的表的删除操作 541 1543 命名外健是一个重复的引用约束 551 1548 命名的授权ID缺少在命名的DB2对象上执行命名操作的权限 552 1542 命名的授权ID缺少执行命名操作的权限 558 1516 已经被授权该PUBLIC，因此WITH GRANT OPTION不可用 561 1523 对ALTER REFERENCES INDEX 和TRIGGER特权，PUBLIC AT ALL LOCATION无效 562 1560 因为GRANTEE已经拥有这些特权，所以一个或更多的特权被忽略 585 1625 模式名指定了不止一次 599 1596 没有为长字符数据类型（BLOB，CLOB和DBCLOB）建立比较函数 610 1566 由于建立了一个指定为DEFER YES的索引，指定的对象处于PENDING状态，或者因为使用了ALTER INDEX改变关键值的范围，所以指定的对象处于PENDING状态 625 1518 因为删除了主健索引，所以表定义被标注为不完整 626 1529 删除了加强UNIQUE约束的索引，唯一性不在被加强 645 1528 因为建立的索引中没有包含NULL，所以WHERE NOT NULL被忽略 650 1538 不能更改或者建立已命名的表为从属表 653 1551 在已指定的分区表空间中尚没有建立指定的分区索引，所以分区索引不可得 655 1597 为CREATE或ALTER STOGROUP语句指定特定或者非特定的卷ID，在DB2较新发布的版本中（版本6以后）将不再支持他们 658 1600 当建立目录索引时，不能指定SUBPAGES语句，SUBPAGES将被忽略，并缺省为1 664 1540 分区索引的限制关键字超出了最大值 738 1530 已命名的对象的更改可能像只读系统中对象的改变要求一样 799 157 SET语句中引用的特定寄存器不存在，将忽略 SET请求 802 1519 数据溢出或者因除法异常而引起的数据异常错误 806 1553 ISOLATION（RR）与LOCKSIZE PAGE 冲突 807 1554 由于十进制乘法导致溢出 863 1539 连接成功，但是只支持SBCS 2000 56094 SUBPAGES不等于1的1型索引不能成为数据共享环境中的缓冲池组依赖者 2002 1624 因为指定的缓冲池不允许超高速缓存，GNPCACHE指定被忽略 2007 1602 因为DB2子系统的参数禁用“提示(hiats）”所以不能指定优化提示 30100 1558 分布式协议错误被检测到，提供原来的SQLCODE和SQLSTATE -7 42601 SQL语句中由非法字符 -10 42603 字符串常量非正常终止；检查到有遗漏的引号标志 -29 42601 需要INTO语句 -60 42815 某特定数据类型的长度或者标量规范无效 -84 42612 不能执行SQL语句，因为该语句对动态SQL无效或者对OS/390的DB2无效 -97 42601 在单位类型、用户自定义的函数以及过程中不能使用带有CAST的LONG VARCHAR或LONGVARGRAPHIC -101 54001 SQL语句超出了已确定的DB2限制：例如，表的数目太多，语句中的字节太多 -102 54002 字符串常量太长 -103 42604 无效数学文字 -104 42601 SQL语句中遇到非法符号 -105 42604 无效的字符串格式；通常引用一个格式不正确的图形字符串 -107 42622 对象名太长 -108 42601 RENAME语句中指定的名字有错误，不能使用限定词 -109 42601 指定了无效语句；例如CREATE VIEW不能包含ORDER BY 语句 -110 42606 遇到了无效的十六进制的文字 -111 42901 指定的列函数没有给出列名 -112 42607 无效的列函数语法；列函数不能运行与其他的列函数之上 -113 42602 遇到无效字符 -114 42961 该语句的位置名称必须与当前服务器匹配，但是却没有匹配 -115 42601 因为比较运算符没有伴着一个表达式或者列表，遇到了无效谓词 -117 42802 待插入的数值的个数于被插入的行中的列数不相等 -118 42902 数据修改语句(UPDATE或DELETE）和FROM语句中的表和视图命名不合法 -119 42803 HAVING语句中的列的列表与GROUP BY语句中的列列表不匹配 -120 42903 不允许WHERE语句、SET语句、VALUES语句或者SET ASSIGNMENT语句引用列函数 -121 42701 在INSERT或UPDATE语句中，某一列被非法引用了两次 -122 42803 非法使用了列函数。因为没有用于一个列函数的所有列不再GROUP BY语句中 -123 42601 特定位置的参数必须是一个常数或者一个关键词 -125 42805 ORDER BY语句中指定了无效数字，该数字要么小于1要么大于选定的列数 -126 42829 不能为一个UPDATE语句指定ORDER BY语句 -127 42905 在子选择中DISTINCT只能指定一次 -128 42601 SQL谓词中NULL使用不当 -129 54004 SQL语句中包含的表多于15个 -130 22019 ESCAPE语句必须为一个字符 22025 无效的ESCAPE模式 -131 42818 LIKE谓词只能用于字符数据 -132 42824 LIKE语句、ESCAPE语句、LOCATE函数或POSSTR函数中有无效运算对象 -133 42906 无效相关子查询引用 -134 42907 大于255字节的列被不正确使用 -136 54005 排序关键字的长度大于4000字节 -137 54006 被连接的字符串太大；字符的最大值为32767；图形的最大值为16382 -138 22011 SUBSTR列函数的第二个或第三个操作符无效 -142 42612 不支持的SQL语句。该语句可能在另外的RDBMS上有效，也有可能在其他的上下文中有效（例如，VALUES只能在触发器中出现） -144 58003 指定的段号无效 -147 42809 某一源函数不能更改。要改变源函数，必须删除该源函数并重新建立他 -148 42809 RENAME和ALTER无法执行。RENAME不能对视图或者活动RI.ST表重新命名。ALTER不能用于改变列的长度，因为该列参与了RI、一个用户退出程序、全局的临时表或打开DATACAPTURE CHANGES表的列 -150 42807 触发活动的INSERT，UPDATE或DELETE语句中指定了无效的视图更新或一个无效的转换表 -151 42808 试图更新一个不可更新的视图的列、一个DB2 CATALOG表的列或者一个ROWID列 -152 42809 DROP CHECK试图删除一个参照约束，或者DROP FOREIGN试图删除一个检查约束 -153 42908 无效的视图建立请求，必须为旋转列表中列出的列出的未命名的列或者重复的列提供一个名字 -154 42909 不能用UNION、UNION ALL或者一个远程表建立视图 -156 42809 在视图上建立索引是非法的，或者在ALTER TABLE，CREATE TRIGGER，DROP TABLE或LOCK TABLE语句上指定一个不是表的其他对象这是无效的 -157 42810 必须在FOREIGN KEY语句中指定一个表名 -158 42811 视图的列和选择列表中的列不相匹配 -159 42089 无效DROP或COMMENT ON语句 -160 42813 对该视图的WITH CHECK OPTION无效 -161 44000 正被更新的视图WITH CHECK OPTION语句使得这行不能被插入或更新 -164 42502 用户没有建立这个视图的权限 -170 42605 标量函数指定了无效的参数个数 -171 42815 标量函数指定了无效的数据类型长度或者无效数值 -173 42801 在非只读型的游标上不能指定隔离级别UR -180 22007 DATE、TIME、TIMESTAMP值的字符串表示法的语法不对 -181 22001 不是有效的DATE、TIME、TIMESTAMP值 -182 42816 在算术表达式中的日期/时间值无效 -183 22008 在算术表达式中返回的日期/时间值的结果不在有效值的范围内 -184 42610 没有正确使用日期/时间值的参数标记 -185 57008 没有定义本定的日期/时间出口 -186 22505 改变本定的日期/时间出口引发这个程序的长度无效 -187 22506 MVS返回无效的当前日期/时间 -188 22503 字符串表示无效 -189 22522 指定的编码字符集的ID无效或没有定义 -190 42837 不能象所设定的那样改变（ALTER）列。只能改变（ALTER）VARCHAR列的长度 -191 22504 字符串中包含了无效的混合数据 -197 42877 当两个或多个表被联合在一起排序时，限定的列名不能在ORDER BY语句中使用 -198 42617 试图对空的字符串发布一个PREPARE或EXECUTE IMMEDIATE语句 -199 42601 SQL语句中使用了非法关键词 -203 42702 模糊列引用 -204 42704 没有定义的对象名 -205 42703 指定的表的列名无效 -206 42703 列名没有在FROM语句所引用的任何表中，或者没有在定义触发器所在的表中 -208 42707 不能ORDER BY指定列，应为该列不在选择列表中 -212 42712 指定的表名在触发器中不允许多次使用，只能使用一次 -214 42822 DISTINCT、ORDER BY 引起的无效表达式 -219 42704 因为PLAN_TABLE不存在，EXPLAIN无法执行 -220 55002 遇到无效的PLAN_TABLE列 -221 55002 如果为PLAN_TABLE定义了可供选择的列，那么，必须定义所有的列 -229 42708 指定的现场找不到 -240 428B4 LOCK TABLE语句的PART子句无效 -250 42718 没有定义本地位置名 -251 42602 记号无效 -300 22024 宿主变量或参数中的字符串不是以NULL为终止 -301 42895 无效的宿主变量数据类型 -302 22001 输入的变量值对指定的列无效 22003 输入的变量值对指定的列而言太大 -303 42806 因为数据类型不兼容，不能分配数值 -304 22003 因为数据超出了范围，不能分配数值 -305 22002 没有NULL指示符变量 -309 22512 因为引用的宿主变量被设置成NULL，所以谓词无效 -310 22501 十进制的宿主变量或参数包含非十进制数据 -311 22501 输入的宿主变量长度无效，或者时负值或者太大 -312 42618 没有定义宿主变量或者宿主变量不可用 -313 7001 宿主变量的个数不等于参数标识的个数 -314 42714 模糊的宿主变量引用 -327 22525 在最后分区的关键字范围内，不能插入行 -330 22021 不能成功的翻译字符串 -331 22021 字符串不能分配到宿主变量，因为其不能成功的被翻译 -332 57017 不能为两个命名的编码字符集的ID定义翻译规则 -333 56010 子类型无效导致翻译失败 -338 42972 ON语句无效，必须引用连接的列 -339 56082 访问DB2 2.2版本的子系统被拒绝，原因时ASCII到EBCDIC翻译不能进行 -350 42962 无效的大对象规范 -351 56084 SELECT列表中有不支持的数据类型 -352 56084 输入列表中有不支持的数据类型 -355 42993 LOB列太大，以至不能被记录在日志中 -372 428C1 每个表只允许有一个ROWID列 -390 42887 在上下文中指定的函数无效 -392 42855 自从前一次FETCH以来，指定游标的SQLDA已被不恰当的改变 -396 38505 在最后的访问过程中，视图执行SQL语句 -397 428D3 在某一列上不恰当的指定了GENERATED因为该列不是ROWID数据类型 -398 428D2 为某一个宿主变量请求LOCATOR，但是该宿主变量不是一个LOB -399 22511 在INSERT语句中为ROWID列指定的值无效 -400 54027 在DB2编目中定义的用户自定义索引不能超过100个 -401 42818 算术操作符或比较操作符的操作对象不是兼容的 -402 42819 算术函数不能用于字符或日期时间数据 -404 22001 SQL语句指定的字符串太长 -405 42820 数值文字超出了范围 -406 22003 计算出的或者倒出的数值超出了范围 -407 23502 不能把NULL值插到定义为NOT NULL的列中 -408 42821 数值不能被更新或插入，因为他与列的数据类型不兼容 -409 42607 COUNT函数指定的运算对象无效 -410 42820 浮点文字笔30个字符的最大允许长度长 -411 56040 CURRENT SQLID使用无效 -412 42823 在子查询的选择列表中遇到了多个列 -413 22003 当转换为一个数字型数据类型时，数据溢出 -414 42824 LIKE谓词不能运行于用数字或日期时间类型定义的列 -415 42825 为UNION操作指定的选择列表不是联合兼容的 -416 42907 包含UNION操作符的SQL语句不允许有长的字符串列 -417 42609 两参数标识符作为运算对象被指定在同一谓词的两边 -418 42610 参数标识符使用无效 -419 42911 十进制除法无效 -420 22018 字符串自变量值不符合函数的要求 -421 42826 UNION操作的选择列表中没有提供相同数目的列 -423 0F001 为LOB或结果集定位器指定的值无效 -426 2D528 在不允许更新的应用服务器不允许执行COMMIT语句 -427 2D529 在不允许更新的应用服务器不允许执行ROLLBACK语句 -430 38503 在用户自定义的函数或存储过程中遇到了错误 -433 22001 指定的值太长 -435 428B3 无效的应用定义的SQLSTATE -438 xxxxx 使用了RAISE_ERROR函数的应用发出了一个错误 -440 42884 存储过程或用户自定义函数的参数列表参数个数于预期的个数不匹配 -441 42601 与标量函数一起使用DISTINCT或ALL是不正确的用法 -443 42601 指定的外部函数返回错误的SQLSTATE -444 42724 与被称为存储过程或用户自定义函数有关的程序不能找到 -449 42878 对存储过程或用户自定义的 函数，CREATE或ALTER语句不正确（缺失EXTERNAL NAME 子句) -450 39501 存储过程或用户自定义函数写入存储器的值超过了参数声明的长度 -451 42815 CREATE FUNCTION中指定了不正确的数据类型 -453 42880 用户自定义函数中的RETURNS语句无效 -454 42723 指定的函数识别标记与已存在的另一函数的识别标记冲突 -455 42882 模式名不比配 -456 42710 为用户自定义函数指定的函数名已经存在 -457 42939 用户自定义函数或用户自定义类型正试图使用系统中定义的函数或者类型所用的名称 -458 42883 没有找到函数 -463 39001 特定的外部例程返回无效的SQLSTATE -469 42886 参数定义为OUT或INOUT的CALL语句必须提供宿主变量 -470 39002 指定了NULL参数，但是该例程却不支持NULL -471 55023 存储过程或用户自定义函数失败：提供原因代码 -472 24517 外部的函数程序使游标处于打开状态 -473 42918 用户自定义数据类型命名不能和系统定义的数据类型一样 -475 42866 结果类型不能被转换成RETURNS类型 -476 42725 在其模式中该函数不是独一无二的 -478 42893 不能DROP或REVOKE特定的对象，因为其他对象依赖于该对象 -480 51030 直到存储过程已经被CALL后，DESCRIBE PROCEDURE和ASSOCIATE LOCATORS才能被发布 -482 51030 存储过程不返回到任何一个定位器 -483 42885 CREATE FUNCTION语句中的参数个数与源函数中的参数个数不匹配 -487 38001 选择了NO SQL选项建立指定的存储过程或用户自定义函数，但却视图发布SQL语句 -491 42601 CREATE FUNCTION语句无效，因为该语句没有RETURNS语句或者因为该语句没有指定有效的SOURCE或者EXTERNAL语句 -492 42879 指定函数的指定参数的个数有错误 -495 57051 语句的估计处理器成本超出了资源限制 -496 51033 语句无法执行，因为当前服务器与调用存储过程的服务器不同 -497 54041 指定的数据库超过了32767 OBID的上限，或者CREATE DATABASE语句使之达到了32511DBID的上限 -499 24516 指定的游标已被分配到结果集，该结果集来自已经指定的存储过程 -500 24501 因为连接被破坏，WITH HOLD游标被关闭 -501 24501 在试图获取数据或关闭一个游标前必须打开一个游标 -502 24502 在没有关闭游标前不能再次打开游标 -503 42912 因为列在游标的FOR UPDATE OF语句中没有被指定，该游标用于获取该列，所以不能更新该列 -504 34000 不能引用一个游标，因为他不是定义到程序里的 -507 24501 在试图更新或者删除WHERE CURRENT OF前，必须打开游标 -508 24504 因为被引用的游标当前不是处于数据行上，所以不能被更新或删除 -509 42827 除了在游标上指定的那个表（该表由WHERE CURRENT OF语句引用的）以外，再也不能从别的表上更新数据 -510 42828 表或视图不能被修改 -511 42829 对不可修改的表或视图，FOR UPDATE OF语句无效 -512 56023 对远程对象的无效引用 -513 42924 一个别名不能再被定义成另外的别名 -514 26501 游标尚没有被准备 -516 26501 试图描述未准备好的SQL语句 -517 7005 因为SQL语句尚没有准备好，游标无效 -518 7003 试图执行尚没有准备好的SQL语句 -519 24506 当为游标的SQL语句发布一个准备语句是，游标不能是打开的 -525 51015 不能在已指定的程序包中执行SQL语句，因为在绑定时间内该程序包无效 -526 42995 在给定的上下文中，不能使用全局的临时表 -530 23503 对特定的约束名指定了无效的外健值 -531 23504 从版本5开始，父关键字的多行更新将试图删除一个外关键字依赖的父关键字值，在版本5以前，当引用主关键值外健值当前存在时，试图更新该主健值 -532 23504 删除操作违反了已指定的参照约束 -533 21501 多行插入无效，试图将多行插到自我引用的表中 -534 21502 可改变主健列值的更新语句不能在同一时刻用于更新多行 -535 21502 当从自我引用表中删除数据或者更新主健列时，不能指定WHERE CURRENT OF。不是版本5的子系统才调用该代码 -536 42914 因为某一特定表的参照约束存在，所以删除语句无效 -537 42709 在外健语句或主健语句的规范中，每个列的出现不能多于一次 -538 42830 无效的外健；不符合引用的表没有主健 -539 42888 不能定义外健，因为被引用的表没有主健 -540 57001 表定义不完整，直到为主健建立了唯一索引或UNIQUE语句、或者包含GENERATED BYDEFAULT属性的ROWID列 -542 42831 可以为空的列不允许作为主健的一部分包含在内 -543 23511 因为该表是指定了SET NULL删除规则的参照约束的父表而且检查约束不允许NULL，所以DELETE不能发生 -544 23512 不能用ALTER添加检查约束，因为已存在的某行与该检查约束冲突 -545 23513 INSERT或者UPDATE导致检查约束冲突 -546 42621 在CREATE或ALTER TABLE中指定的检查约束无效 -548 42621 因为指定的列而引起的检查约束无效 -549 42509 DYNAMICRULES（BIND）计划或程序包的无效SQL语句 -551 42501 用户试图对不拥有权限的特定的对象进行操作，或者表不存在 -552 42502 用户试图执行未被授权的操作 -553 42503 不能指定CURRENT SQLID，因为用户尚没有被允许改变那个ID -554 42502 不能对你本身赋予一个权限 -555 42502 不能对你本身撤销一个权限 -556 42504 不能撤销用户没有拥有的权限 -557 42852 指定了不一致的授予或撤销关键词 -558 56025 为授予或撤销语句指定了无效的语句（一个或一组） -559 57002 DB2权限机制已经禁用，授予或者撤销不能被发布 -567 42501 指定的权限ID缺少对指定的程序包的绑定权限 -571 25000 不允许多点更新 -573 42890 不能定义参照约束，因为已指定的父表中在指定的列上没有唯一健 -574 42864 指定的缺省与列定义冲突 -577 38002 试图修改用户自定义函数中的数据或者存储过程中的数据，但这些对象的建立没有选择MODIFIES SQL DATA选项 -579 38004 试图修改用户自定义函数中的数据或者存储过程中的数据，但这些对象的建立没有选择READ SQL DATA选项，也没有选择MODIFIES SQL DATA选项 -580 42625 CASE表达式中的结果表达式不能都是空的 -581 42804 CASE表达式中的结果表达式为不兼容的数据类型 -582 42625 SEARCHED－WHEN－CLAUSE中的查找条件指定了一个限定的、IN或EXISTS谓词 -583 42845 指定的函数失败，因为他不是决定性的，或者可能有外部动作 -585 42732 在当前路径中模式名不止一次出现 -586 42907 CURRENT PATH专用寄存器在长度上不能超过254字符 -587 428C6 项目引用的列表必须是同一个家族 -590 42734 在命名的存储过程或用户自定义的函数中的参数必须是独一无二的 -592 42510 没有授权权限，让你在WLM环境中建立的存储过程或者用户自定义函数 -601 42710 试图创建（或重命名）已经存在的对象 -602 54008 CREATE INDEX语句中指定的列太多 -603 23515 因为发现有重复值，所以不能建立唯一的索引 -604 42611 在CREATE或ALTER TABLE语句中的为数据类型指定的长度、精度以及标度无效 -607 42832 指定的INSERT、UPDATE或DELETE语句不能被发布，应为这些语句对DB2 CATLOG表执行写操作 -611 53088 当LOCKSIZE是TABLE或者TABLESPACE时，LOCKMAX必须为0 -612 42711 在同一个表、索引或试图中不允许有重复列名 -613 54008 主健或UNIQUE约束太长或者包含了太多的列 -614 54008 已经超过了索引的内部健长度的最大长度（255）限制 -615 55006 不能删除这个程序包，因为该程序包目前正在执行 -616 42893 指定的对象不能被删除，因为其他对象依赖于该对象 -617 56089 对于DB2版本6，1型索引无效。对于以前的版本，1型索引不能用LOCKSIZE ROW或LARGE表空间定义 -618 42832 对DB2 CATALOG表的请求操作时不允许的 -619 55011 DSNDB07不能修改，除非他先被停止了 -620 53001 对在DSNDB07中的表空间不允许指定该关键词 -621 58001 遇到了重复的DBID，遇到了系统问题 -622 56031 不能指定FOR MIXED DATA因为没有安装混合数据选项 -623 55012 不能为单一的表定义多个族索引 -624 42889 不能为单一的表定义多个主健 -625 55014 用主健定义的表要求唯一索引 -626 55015 不能发布ALTER语句来改变PRIQTY SECQTY或ERASE，除非先停止了表空间 -627 55016 不能发布ALTER语句来改变PRIQTY SECQTY或ERASE，除非先把表空间定义为使用存储器组的表空间 -628 42613 指定语句时相互排斥的（例如，不能分区一个分段的表空间） -629 42834 因为该外健不能包含空值，所以SET NULL无效 -630 56089 不能为1型索引指定WHERE NOT NULL -631 54008 无效的外健；要么是比254个字节长，要么包含的列数多于40 -632 42915 指定的删除规则禁止把这个表定义为已制定表的从属表 -633 42915 无效删除规则；必须使用特定的强制删除规则 -634 42915 在这种情况下，DELETE CASCADE不允许 -635 42915 删除规则不能有差异或者不能为SET NULL -636 56016 在分区索引健的升序或降序规范中，分区所以必须与该规范一致 -637 42614 遇到重复的关键词 -638 42601 在CREATE TABLE语句中缺少列定义 -639 56027 带有SET NULL的删除规则的外健的可空列不能是分区索引的列 -640 56089 不能为这个表空间指定LOCKSIZE ROW，因为在该表空间中的表上定义了1型索引 -642 54021 唯一约束包含太多的列 -643 54024 检查约束超出了3800个字符的最大长度 -644 42615 在SQL语句中为关键词指定的值无效 -646 55017 在指定的分区表空间或者缺省表空间中不能创建表，因为指定的表空间已经包含了一个表 -647 57003 指定的缓冲池无效，因为他没有被激活 -650 56090 ALTER INDEX不能被执行；提供了原因代码 -651 54025 如果CREARE或ALTER TABLE被允许，表对象的描述词（object descriptor,OBD）将超过最大值（32KB） -652 23506 遇到了EDITRPROC或VALIDPROC冲突 -653 57004 在分区表空间中的表不可用，因为分区索引尚未被创建 -655 56036 在卷的列表中，STOGROUP不能指定为特定的或不特定（“*”）的卷 -658 42917 当试图删除指定的对象时，无法删除该对象，该对象的删除必须通过删除与之相关联的对象完成 -660 53035 不正确的分区索引规范，必须为族索引定义有限制的关键字 -661 53036 分区索引没有指定恰当的分区数目 -662 53037 试图在未分区的表空间（分段的或简单的）上建立分区索引 -663 53038 为分区索引指定的关键字限制值是一个无效数字 -665 53039 为ALTER TABLESOACE语句指定了无效的PART语句 -666 57005 SQL语句不能被处理，因为指定的函数当前正处于进行过程中 -667 42917 不能明确的删除分区表空间的族索引，必须除去分区表空间来去掉分区索引 -668 56018 不能向用EDITPROC定义的表中添加列 -669 42917 不能显式的删除分区表空间中的表，必须删除分区表空间来删除表 -670 54010 表的记录长度超过了页面的大小 -671 53040 不能更改指定的表空间的缓冲池，因为这将改变表空间的页面大小 -672 55035 在命名的表上不允许DROP -676 53041 只有4KB的缓冲池可被用于一个索引 -677 57011 缓冲池扩展失败，由于可用的虚拟内存的大小不足 -678 53045 为才分区索引中指定的限制健提供的值与数据类型不符 -679 57006 不能创建某一个特定对象，因为该对象的一个drop目前正在挂起 -680 54011 对DB2表不能超过750列 -681 23507 列违反了指定的FIELDPROC -682 57010 不能载入FIELDPROC -683 42842 列、单值类型、函数或者过程无效，因为不兼容语句。例如，指定的INTEGER具有FORBITDATA选项 -684 54012 指定的文字列表不能超过254个字节 -685 58002 FIELDPROC返回一个无效的域描述 -686 53043 用FIELDPROC定义的一个列不能与一个使用不同的FIELDPROC定义的列作比较 -687 53044 列不能与一个非兼容字段类型的列比较 -688 58002 返回不正确的数据 -689 54011 从属表定义了太多的列 -690 23508 数据定义的控制支持拒绝这个语句 -691 57018 命名的注册表不存在 -692 57018 命名的索引不存在，但命名的注册表需要该索引 -693 55003 命名的注册表/索引的命名列无效 -694 57023 DROP正在命名的注册表上挂起 -696 42898 由于相关的名字或者转换表的名字使用不正确，指定的触发器无效 -697 42899 FOR EACH语句被指定，因此与OLD合NEW相关的名字是不允许的，或者不能为一个BEFORE触发器指定OLD_TABLE和NEW_TABLE -713 42815 指定的专用寄存器是无效的 -715 56064 命名的程序不能被运行，因为他依赖与你所安装的DB2版本的部件，但是你的数据中心没有安装这个部件 -716 56065 命名的程序使用这个版本的不正确的发行版本做了预编译 -717 56066 BIND失败，因为他依赖与你所安装的DB2版本的部件，但是你的数据中心没有安装这个部件 -718 56067 REBIND失败，因为IBMREQD列无效 -719 42710 不能BIND ADD一个已经存在的程序包 -720 42710 不能BIND REPLACE一个已经存在的程序包版本 -721 42710 程序包的一致性记号必须是独一无二的 -722 42704 绑定错误，因为指定的程序包不存在 -723 9000 一个触发的SQL语句接受到一个错误 -724 54038 达到了（16）级联间接的SQL语句的最大项目 -725 42721 对专门指定的寄存器提供了一个无效值 -726 55030 因为SYSPKSYSTEM条目，不能绑定这个程序包 -728 56080 指定的数据类型不能与私有协议发布一起使用 -729 429B1 用COMMIT ON RETURN定义的存储过程不能用作嵌套的CALL过程的目标 -730 56053 在只读的共享数据库中为表定义的参照完整性无效 -731 56054 VSAM数据集必须用SHAREOPTION（1.3）定义 -732 56055 被定义为只读型数据库却拥有没有定义空间或者索引空间的DB2子系统 -733 56056 只读共享数据库的定义不一致 -734 56057 一旦一个数据库被定义为ROSHARE READ，他将不能被更改为其他不同的ROSHARE状态 -735 55004 用DBID名称标识的数据库不再是一个只读共享数据库 -736 53014 命名的DBID无效 -737 53056 在这种状况下，不能建立一个隐含的表空间 -739 56088 因为同时指定了ALLOW PARALLEL和MODIELES SQL DATA这两个语句，因此已设定的函数将不能再被更改 -740 51034 在这种方式下不能用MODIELES SQL DATA定义指定的函数 -741 55030 已经为命名的共享组成员的数据定义了工作文件数据库 -742 53004 DSNDB07是隐含的工作文件数据库 -746 57053 在特定的触发器、存储过程或函数中的SQL语句违反嵌套SQL限制 -747 57054 指定的表是不可用的除非为LOB数据列建立起必须的辅助表 -748 54042 在指定的辅助表上已经有一个索引 -750 42986 不能对已指定的表重新命名,因为他至少在一个现存的视图或触发器中被引用 -751 42987 存储过程或用户自定义的函数试图执行一个不允许执行的SQL语句。DB2的线程被置于MUST_ROLLBACK状态 -752 0A001 无效CONNECT语句 -763 560A1 无效的表空间名 -764 560A2 LOB表空间必须与其相关的基表空间同在一个数据库中 -765 560A3 表和数据库不兼容 -766 560A4 不能对辅助表进行请求的操作 -767 42626 CREATE INDEX失败，因为在辅助表中为索引指定了列，或者因为没有为非辅助表的索引指定列 -768 560A50 不能为指定的列或者指定的分区建立辅助表，因为其辅助表已经存在 -769 53096 CREATE AUX TABLE的规格与基表不匹配 -770 530A6 指定的表必须有一个ROWID列，那么该表才可以包含一个LOB列 -771 428C7 无效的ROWID列规范 -797 42987 CREATE TRIGGER包含不被支持的语法 -798 428C9 不能把一个值插入到用GENERATED ALWAYS定义的ROWID列 -802 22012 某一特定操作发生了异常错误。被零除 22003 某一特定操作发生了异常错误。但不是被零除 -803 23505 不能插入行，因为这将违反唯一索引的约束 -804 7002 SQLDA的调用参数列表有误 -805 51002 在计划中没有发现DBRM或程序包名 -807 23509 对已指定的环境和连接，该程序包不可用 -808 8001 CONECT语句与程序中的第一个CONNECT语句不一致 -811 21000 当多行作为一内嵌的选择语句的返回结果是，必须使用游标 -812 22508 在CURRENT PACKAGESET中的ID集合是空白的，语句不能被执行 -815 42920 在一个内置选择语句或者一个基本谓词的子查询中，显式的或隐含的指定了GROUP BY或HAVING语句 -817 25000 执行SQL语句将可能导致禁止更新用户数据或DB2编目 -818 5103 计划&lt;－&gt;载入组件的时间戳不匹配，在执行计划中没有从同一个预编译中建立DBRM，该预编译是作为组件载入的 -819 58004 视图不能重建，因为在DB2编目中存储的分析树长度为0 -820 58004 在这个DB2版本的DB2编目中遇到了无效值 -822 51004 在SQLDA中遇到了无效地址 -840 54004 在选择列表或插入列表中返回的项目太多 -842 8002 到指定位置的连接已经存在 -843 8003 SET CONNECTION或RELEASE语句无法执行，因为连接不存在 -870 58026 宿主变量描述符的个数不等于语句中宿主变量的个数 -872 51302 这个子系统已指定了有效的CCSID -873 53090 同一SQL语句中，不能同时引用EBCDIC表中的定义的列和ASCII表中定义的列 -874 53901 指定对象的编码方案与其表空间的编码方案不匹配 -875 42988 指定的操作符不能用于ASCII数据 -876 53092 不能为指定的原因创建对象：提供了原因代码 -877 53093 数据库或表空间不允许用ASCII，必须使用EBCDIC -878 53094 该PLAN——TABLE不能是ASCII，必须使用EBCDIC -879 53095 指定对象的CREATE或ALTER语句不能将列、单值类型，某个存储过程或用户自定义函数的参数定义为以下类型：MAXED DATA，GRAPHIC，VARGRAPHIC，LONGVARGRAPHIC，因为系统没有为指定的编码方案定义相应的CCSID -900 8003 应用处理没有连接到应用服务器，语句不能被执行 -901 58004 遇到时断时续的系统错误，该错误不能抑制后继的SQL语句的执行 -902 58005 内部控制块的指针错误，要求重新绑定 -904 57011 指定的资源不可用 -905 57014 超出了资源上限 -906 51005 因为重大错误，SQL语句无法执行 -908 23510 当前资源限制设施的规范或者自动重绑定的系统参数不允许BIND，REBIND，AUTOREBIND -909 57007 对象已被删除 -910 57007 因为在该对象上挂起DROP，所以不能访问该对象 -911 40001 当前工作单元已被回滚 -913 57033 因为死锁或超时导致不成功执行 -917 42969 绑定程序包已经失败 -918 51021 SQL语句不能被执行，因为连接丢失 -919 56045 需要一个ROLLBACK -922 42505 连接权限失败。试图从TSO、CICS或IMS访问DB2，同时相应的连接设施处于非活动的状态 -923 57015 因为DB2不可用，所以不能建立连接 -924 58006 遇到了DB2内部的连接错误：提供了原因代码 -925 2D521 SQL的COMMIT语句不能从CICS或IMS/TM发布 -926 2D521 SQL的ROLLBACK语句不能从CICS或IMS/TM发布 -927 51006 当正在连接的环境没有建立时，语言接口被调用。利用DSN命令激发该程序 -929 58002 数据获取退出已经失败（DPROP） -939 51021 由于远程服务器的未请求的回滚，要求一个回滚 -947 56038 SQL语句失败，因为更新不能被传播（DPROP） -948 56062 DDF没有启动，分布式操作无效 -950 42705 在SQL语句中指定的位置在SYSIBM.LOCATIONS中没有定义 -965 51021 存储过程非正常终止（在DB2 6之前的版本） -981 57015 当前不是处于允许SQL的状态时，试图在RRSAF中执行SQL -991 57015 调用连接不能建立一个到DB2的隐含或开放连接 -2001 53089 为储存过程指定的宿主变量参数的个数不等于预期的参数个数 -20003 560A7 不能为GRECP中的表空间或索引指定GBPCACHE NONE -20004 560A8 对于WORKFILE对象。8KB或16Kb的缓冲池页面大小无效 -20005 54035 指定的对象类型超出了内部的ID极限 -20006 53097 当没有指定WLM环境时，LOB不能被指定为参数 -20070 53098 不能非LOB列建立一个辅助表 -20071 53099 必须指定WLM环境名 -20072 56052 指定的权限ID不拥有在触发器程序包上执行BIND所需的权限 -20073 42927 不能按照指定的要求更改命名的函数，因为在现存的视图定义中引用了该函数 -20074 42939 不能建立指定的对象，因为“SYS”是一个保留的前缀 -20100 56059 在被触发的SQL语句中有BIND错误，指定了错误的SQLCODE和SQLSTATE -20101 56059 由于指定的原因代码，该函数失败 -20102 42849 在CREATE或ALTER FUNCTION语句中不能使用指定的选项 -20104 42856 更改一个CCSID失败 -20106 42945 不能改变表空间或数据库的CCSID，因为现存的试图引用 -30000 58008 DRDA分布协议错误；处理可以继续 -30002 57057 使用DRDA的分布式客户把OPEN语句连接到PREPARE，但PREPARE接受到一个SQLCODE为＋495的警告 -30020 58009 DRDA分布协议错误；对话被解除 -30021 58010 DRDA分布协议错误；处理不能继续 -30030 58013 违反分布协议：COMMIT不成功，对话被解除（AS） -30040 57012 因为不能得到资源，执行失败，处理可以继续（AS） -30041 57013 因为不能得到资源，执行失败，处理不能成功的继续（AS） -30050 58011 执行不成功，在BIND过程中不能执行语句 -30051 58012 特定的BIND过程不是处于活动状态（远程BIND），从而导致失败 -30052 42932 程序准备的假设错误 -30053 42506 程序包的拥有者遭遇授权失败 -30060 8004 RBD遭遇授权失败 -30061 8004 指定了无效或者没有存在的RDB -30070 58014 目标子系统不支持这个命令 -30071 58015 目标子系统不支持这个对象 -30072 58016 目标子系统不支持这个参数 -30073 58017 目标子系统不支持这个参数值 -30074 58018 应答信息不被支持 -30080 8001 SNA通信错误 -30081 58019 TCP/IP通信错误 -30082 8001 由于安全冲突、通信失败：提供了原因代码 -30090 25000 指定的操作对远程执行失败 -30104 56095 在绑定选项与绑定值中有错误 -30105 56096 指定的绑定选项不兼容]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2数据库备份记录查询]]></title>
    <url>%2Farticles%2F64563%2F</url>
    <content type="text"><![CDATA[有一天手动备份数据库，想看下数据库备份时间，于是找到了db2 list history backup all for 数据库命令。 DB2 backup 直接DB2CMD执行：12db2 connect to 数据库 user pas using pasdb2 list history backup all for 数据库 结果：12345678910111213141516171819202122Op Obj Timestamp+Sequence Type Dev Earliest Log Current Log Backup ID -- --- ------------------ ---- --- ------------ ------------ -------------- B D 20220802175839001 F D S0000000.LOG S0000000.LOG ---------------------------------------------------------------------------- Contains 9 tablespace(s): 00001 SYSCATSPACE 00002 TBS_MXZ 00003 SYSTOOLSPACE 00004 TBS_PAS 00005 TBS_JKSJ 00006 TBS_JXDX 00007 TBS_NBZZ 00008 TBS_IDX 00009 TBS_LSB ---------------------------------------------------------------------------- Comment: DB2 BACKUP YKSPAS3 OFFLINE Start Time: 20220802175839 End Time: 20220802231447 Status: A ---------------------------------------------------------------------------- EID: 48531 Location: /home/db2inst1/SNPAS/PAS_BACKUP/PAS_BACKUP20220731 Start Time: 开始时间 End Time: 结束时间 拓展 查看数据库备份是否可用：1db2ckbkp -h /home/db2inst1/SNPAS/PAS_BACKUP/PAS_BACKUP20220731 -h 后面是数据库备份文件，如果是可用的备份文件最后会有successful。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python实现PDF转WORD的方式]]></title>
    <url>%2Farticles%2F11221%2F</url>
    <content type="text"><![CDATA[Python Python实战 背景 网上的PDF转WORD都是收费的，写了好几年的Python了，打算想搞一个开源工具网站，其中的一个常用功能之一就是PDF转WORD，所以想探索一下所有的转换方式，持续更新中。。。。。。 环境 id name Version 1 Python 3.7 结果比较详解记录一下所有的包，有需要的可以进行参考。 pdf2docx 官网 https://www.cnpython.com/pypi/pdf2docx# 代码 1234567891011import osfrom pdf2docx import Converterdata_folder = os.path.join(os.getcwd(), &apos;pdf&apos;)pdf_file = os.path.join(data_folder, &apos;阿里云数据库.pdf&apos;)print(pdf_file)word_file = &apos;%s-pdf2docx.docx&apos; % os.path.splitext(pdf_file)[0]print(word_file)c = Converter(pdf_file)c.convert(word_file)c.close() 优点 缺点 LibreOffice 官网 https://www.libreoffice.org/ 代码 1234567891011121314```&gt; 优点&gt; 缺点#### PyPDF2&gt; 官网https://pypdf2.readthedocs.io/en/latest/&gt; 代码 12345678910111213&gt; 优点&gt; 缺点#### PDFMiner&gt; 官网https://www.unixuser.org/~euske/python/pdfminer/programming.html&gt; 代码 ` 优点 缺点 结束语坚持每天学习。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习之Collections]]></title>
    <url>%2Farticles%2F51993%2F</url>
    <content type="text"><![CDATA[Python实战 Collections 写代码的时候，Collections包算是常用的一个，里面的有一些数据结构还是非常好用的，本篇总结一下Collections包的常用内容，包含OrderedDict、deque、ChainMap、defaultdict、Counter等内容。 OrderedDict：有序dict deque：队列 ChainMap：链式MAP defaultdict：自带默认值的dict Counter：计数器 环境 id name Version 1 Python 3.7 CollectionsOrderedDictdequeChainMapdefaultdictCounter]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之增强篇-nc]]></title>
    <url>%2Farticles%2F20869%2F</url>
    <content type="text"><![CDATA[简介 文件传输，而且还可以装逼的神器：nc（netcat）。 Linux nc 目前这个命令主要用来实现Linux服务器之间文件传输，当然还有其他用于传输文件的命令，比如：scp、rz&amp;&amp;sz、rsync（主要用于文件自动化同步）等等，小文件的话用nc就挺好用，小推荐一下。 推荐指数1🌟🌟🌟 安装12345# 查看是否有命令which nc# 安装install -y nc 使用方法介绍文件传输以及扫描端口2大功能。 传输文件12345# 发送端：nc -v ip port &lt; test.txt#接收端：nc -lp port &gt; test.txt l：监听模式 v：显示过程详情其中，ip为接收端ip地址，port为自定义端口。 扫描端口1nc -nv -w -l -z ip port n：扫描的目标是个ip地址 l：监听模式 v：显示过程详情 w：设置超时时间 z 表示 进行端口扫描 参数12345nc --helpusage: nc [-46DdhklnrStUuvzC] [-i interval] [-p source_port] [-s source_ip_address] [-T ToS] [-w timeout] [-X proxy_version] [-x proxy_address[:port]] [hostname] [port[s]] 参数挺多的，man nc查看明细。 参考菜鸟命令介绍：1234567891011121314-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。-h 在线帮助。-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。-l 使用监听模式，管控传入的资料。-n 直接使用IP地址，而不通过域名服务器。-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。-p&lt;通信端口&gt; 设置本地主机使用的通信端口。-r 乱数指定本地与远端主机的通信端口。-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。-u 使用UDP传输协议。-v 显示指令执行过程。-w&lt;超时秒数&gt; 设置等待连线的时间。-z 使用0输入/输出模式，只在扫描通信端口时使用。 其他其他的功能暂时没怎么探索。 学习参考菜鸟nc介绍：https://www.runoob.com/linux/linux-comm-nc.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux增强篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2的表备份SQL]]></title>
    <url>%2Farticles%2F63086%2F</url>
    <content type="text"><![CDATA[今天修改DB2的表数据CKZH进行delete，想的是对这个表先进行一个备份，于是想到create table as select * from这个的语法，发现DB2没有这个，但是有表结构+数据复制这样的模式，记录一下日后可能用得到。 DB2 存储过程 自动备份 模式：表结构 + 数据 表结构 1CREATE TABLE [目标表] AS (SELECT * FROM [原表]) DEFINITION ONLY; 直接对表进行一个复制，参数如下：目标表：创建的目标表原表：复制的表结构原始表 插入数据 123INSERT INTO JXDX_CKZH_20220516SELECT * FROM JXDX_CKZH-- WHERE WHERE后面加的是插入数据的限制，没有限制就去掉WHERE就行。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ElementUI的tree组件子选父不选提交数据问题]]></title>
    <url>%2Farticles%2F35413%2F</url>
    <content type="text"><![CDATA[问题描述最近也写了一段时间的VUE了，用的就是Element-UI组件，今天使用tree组件的时候，发现el-tree控件中子节点未全部选中，提交树形数据时，后台API接收数据时没有发现父节点，完了在前端console打印了一下log，发现el-tree组件没有提交处于半选择状态的节点ID，记录一下解决方案。 VUE Element-UI 原因Element-UI组件中el-tree控件中子节点未全部选中时，父节点ID在提交时不会传给后台接口，导致后台获取不到父节点ID，所以后台API数据中没有半选择的父节点ID数据。 解决方案直接上代码：1234567const checked = this.$refs.menuTree.getCheckedKeys() // 全选状态IDconst halfChecked = this.$refs.menuTree.getHalfCheckedKeys() // 半选状态ID// 合并数据方式一const keys = [...checked, ...halfChecked]// 合并数据方式二const keys = checked.concat(halfChecked) 提交的部分就自己写了，主要就是封装axios成功方法，Promise去获取数据。]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>Element-UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript获取屏幕浏览器高宽]]></title>
    <url>%2Farticles%2F56199%2F</url>
    <content type="text"><![CDATA[对于写前端代码的，经常会计算一些css样式，获取屏幕浏览器高宽也是家庭便饭，记录一下。 Hashcat 全局变量，直接上代码：1234567// 浏览器可用高度、宽度document.body.scrollHeightdocument.body.scrollWidth// HTML页面的可用高度、宽度document.body.clientHeightdocument.body.clientWidth 学习参考： https://www.jianshu.com/p/e324cbd5ed3d https://blog.csdn.net/grkcsdn/article/details/118556380 https://www.jb51.net/article/106472.htm]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【2022】51劳动节]]></title>
    <url>%2Farticles%2F61186%2F</url>
    <content type="text"><![CDATA[中国节-51劳动节 封城中，2022年第三次疫情了，记录一下。 时间 地点 2022-05-01 满洲里]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>中国节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE插件driver.js闪一下问题]]></title>
    <url>%2Farticles%2F2813%2F</url>
    <content type="text"><![CDATA[背景前几天搞了一个VUE页面功能向导，那个是在单独的页面，今天把driver.js引入到一些有功能的页面，启动的时候页面就闪了一下，没有向导功能，google了一下，发现原来是VUE渲染的问题。 VUE 插件 解决方案解决问题的代码，在启动的时候加上setTimeout延迟，就可以了。123setTimeout(() =&gt; &#123; this.startGuide()&#125;, 900) 因为我把向导封装成组件了，其他的页面也可以进行引用，所以我用watch监听父组件传递的值，详细的请参考完整代码。 新问题解决上面闪一下不加载的问题，但是浏览器控制台会有警告日志：[Violation] Forced reflow while executing JavaScript took 131ms还没解决，后续解决了更新。 完成代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;template&gt; &lt;div class=&quot;app-container&quot; /&gt;&lt;/template&gt;&lt;script&gt;import Driver from &apos;driver.js&apos; // import driver.jsimport &apos;driver.js/dist/driver.min.css&apos; // import driver.js cssimport excelMergeSteps from &apos;./steps/excelMergeSteps.js&apos; // import steps js configexport default &#123; name: &apos;Guide&apos;, emits: [&apos;close-guide&apos;], components: &#123;&#125;, props: &#123; guide: &#123; type: Boolean, require: true, default: false, validator(value) &#123; return [true, false].includes(value) &#125; &#125;, content: &#123; type: String, require: true, default: &apos;&apos; &#125; &#125;, data() &#123; return &#123; driver: null &#125; &#125;, computed: &#123;&#125;, watch: &#123; guide: function() &#123; if (this.guide) &#123; setTimeout(() =&gt; &#123; this.startGuide() &#125;, 900) &#125; &#125; &#125;, created() &#123;&#125;, mounted() &#123; // parameter config // 官网API：https://www.npmjs.com/package/driver.js this.driver = new Driver(&#123; className: &apos;scoped-class&apos;, // className to wrap driver.js popover animate: true, // 是否设置动画 opacity: 0.7, // 背景不透明度（0表示只有弹出框，没有覆盖） padding: 0, // 元素与边缘之间的距离 allowClose: true, // 单击覆盖是否应关闭 overlayClickNext: false, // 点击覆盖是否应该下一步移动 stageBackground: &apos;#ffffff&apos;, // default: #ffffff，突出显示元素的背景色 showButtons: true, // 页脚中是否显示控制按钮 keyboardControl: true, // 允许通过键盘进行控制（退出关闭，箭头键移动） doneBtnText: &apos;完成&apos;, // 完成按钮文本 closeBtnText: &apos;关闭&apos;, // 关闭按钮文本 prevBtnText: &apos;上一步&apos;, // 上一步按钮文本 nextBtnText: &apos;下一步&apos;, // 下一步按钮文本 onHighlightStarted: (Element) =&gt; &#123;&#125;, // 当元素即将高亮显示时调用 onHighlighted: (Element) =&gt; &#123;&#125;, // 当元素完全高亮显示时调用 onDeselected: (Element) =&gt; &#123; // 取消选择元素时调用 this.onDeselected(Element) &#125;, onReset: (Element) =&gt; &#123;&#125;, // 将要清除覆盖时调用 onNext: (Element) =&gt; &#123;&#125;, // 在任何步骤上移动到下一步时调用 onPrevious: (Element) =&gt; &#123;&#125; // 在任何步骤上移动到上一步时调用 &#125;) &#125;, methods: &#123; startGuide() &#123; let data = &#123;&#125; if (this.content === &apos;excelMerge&apos;) &#123; data = excelMergeSteps &#125; else &#123; return false &#125; this.driver.defineSteps(data) this.driver.start() &#125;, onDeselected(element) &#123; this.$emit(&apos;close-guide&apos;) &#125; &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE插件之driver.js]]></title>
    <url>%2Farticles%2F29277%2F</url>
    <content type="text"><![CDATA[在开发OpenTool开源工具的时候，在个人中心部分有一个向导，上网查了一下用driver.js，记录一下各项用到的内容，挺好用的VUE插件，推荐。 VUE 插件 作用 用于开发Web页面功能操作向导，官网介绍的很明确，而且也没啥难点，直接贴上代码了。 安装 1npm install -S driver.js VUE代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;div id=&quot;guide-opr-container&quot;&gt; &lt;el-button icon=&quot;el-icon-position&quot; type=&quot;primary&quot; @click.prevent.stop=&quot;guide&quot;&gt; 开启向导 &lt;/el-button&gt; &lt;/div&gt; &lt;div id=&quot;guide-data-container&quot; class=&quot;guide-data-container&quot;&gt; &lt;aside&gt; The guide page is useful for some people who entered the project for the first time. You can briefly introduce the features of the project &lt;/aside&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Driver from &apos;driver.js&apos; // import driver.jsimport &apos;driver.js/dist/driver.min.css&apos; // import driver.js cssimport steps from &apos;./guide/steps.js&apos;export default &#123; name: &apos;Guide&apos;, data() &#123; return &#123; driver: null &#125; &#125;, mounted() &#123; // parameter config // 官网API：https://www.npmjs.com/package/driver.js this.driver = new Driver(&#123; className: &apos;scoped-class&apos;, // className to wrap driver.js popover animate: true, // 是否设置动画 opacity: 0.7, // 背景不透明度（0表示只有弹出框，没有覆盖） padding: 0, // 元素与边缘之间的距离 allowClose: true, // 单击覆盖是否应关闭 overlayClickNext: false, // 点击覆盖是否应该下一步移动 stageBackground: &apos;#ffffff&apos;, // default: #ffffff，突出显示元素的背景色 showButtons: true, // 页脚中是否显示控制按钮 keyboardControl: true, // 允许通过键盘进行控制（退出关闭，箭头键移动） doneBtnText: &apos;完成&apos;, // 完成按钮文本 closeBtnText: &apos;关闭&apos;, // 关闭按钮文本 prevBtnText: &apos;上一步&apos;, // 上一步按钮文本 nextBtnText: &apos;下一步&apos;, // 下一步按钮文本 onHighlightStarted: (Element) =&gt; &#123;&#125;, // 当元素即将高亮显示时调用 onHighlighted: (Element) =&gt; &#123;&#125;, // 当元素完全高亮显示时调用 onDeselected: (Element) =&gt; &#123; // 取消选择元素时调用 this.onDeselected(Element) &#125;, onReset: (Element) =&gt; &#123;&#125;, // 将要清除覆盖时调用 onNext: (Element) =&gt; &#123;&#125;, // 在任何步骤上移动到下一步时调用 onPrevious: (Element) =&gt; &#123;&#125; // 在任何步骤上移动到上一步时调用 &#125;) &#125;, methods: &#123; guide() &#123; this.driver.defineSteps(steps) this.driver.start() &#125; &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;.guide-data-container &#123; margin-top: 20px;&#125;&lt;/style&gt; Steps代码 需要在同等目录下建立一个guide文件夹，再建立一个steps.js文件，用来存放向导的数据，根据不同的模块定制不同的js文件。1234567891011121314151617181920212223242526272829303132333435363738const steps = [ &#123; element: &apos;#sidebar-container&apos;, popover: &#123; title: &apos;系统菜单&apos;, description: &apos;系统功能菜单列表，分为一级菜单、二级菜单&apos;, position: &apos;right&apos;, // position: left, left-center, left-bottom, top, // top-center, top-right, right, right-center, right-bottom, // bottom, bottom-center, bottom-right, mid-center offset: 20 &#125;, padding: 0 &#125;, &#123; element: &apos;#guide-opr-container&apos;, popover: &#123; title: &apos;导航菜单&apos;, description: &apos;打开&amp;&amp;关闭导航菜单&apos;, position: &apos;bottom&apos;, // position: left, left-center, left-bottom, top, // top-center, top-right, right, right-center, right-bottom, // bottom, bottom-center, bottom-right, mid-center offset: 20 &#125;, padding: 0 &#125;, &#123; element: &apos;#guide-data-container&apos;, popover: &#123; title: &apos;数据域&apos;, description: &apos;系统定制功能的数据展示域&apos;, position: &apos;bottom&apos;, offset: 0 &#125;, padding: 0 &#125;]export default steps 学习参考 driver.js官网：https://kamranahmed.info/driver.js/#single-element-no-popovernpm查询：https://www.npmjs.com/package/driver.js]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE之Props传值参数]]></title>
    <url>%2Farticles%2F52857%2F</url>
    <content type="text"><![CDATA[总结一下VUE关于Props的传值。 VUE 定义 用于父组件对子组件之间的值传递，属于单向传递（父组件-&gt;子组件），不可逆。 如果对父组件传递过来的值进行赋值，会报错，子组件如想返回父组件传递值，可以用emit。 用途 如定义，就是父组件-&gt;子组件的值传递。 语法糖 父组件：12345&lt;excel-merge-opr :show=&quot;mergeDialogStatus&quot; :list=&quot;selectList&quot; @close-file-merge=&quot;closeFileMerge&quot;/&gt; 子组件：123456789101112131415props: &#123; show: &#123; type: Boolean, require: true, default: false, validator(value) &#123; return [true, false].includes(value) &#125; &#125;, list: &#123; type: Array, require: true, default: function() &#123;&#125; &#125;&#125; type数据类型，也就是JS的数据类型：StringNumberBooleanArrayObjectDateFunctionSymbol require是否必须传入，可选值：true false default默认值 validator传入值校验 学习参考 官网API：https://v3.cn.vuejs.org/guide/component-props.html#prop-%E7%B1%BB%E5%9E%8B]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ElementUI-table-tree全部展开与关闭]]></title>
    <url>%2Farticles%2F21429%2F</url>
    <content type="text"><![CDATA[ElementUI官网的table组件有个tree模式，就是类似于树模式的table表格样式，这个功能用于菜单展示挺好看也挺好用。 VUE Element-UI 直接上代码：lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;!-- 按钮 --&gt; &lt;el-row&gt; &lt;el-button id=&quot;btn-create&quot; :size=&quot;btnBaseAttrs.size&quot; :plain=&quot;btnBaseAttrs.plain&quot; :round=&quot;btnBaseAttrs.round&quot; :disabled=&quot;btnDisabled&quot; @click=&quot;openAddMenu&quot;&gt; &lt;svg-icon icon-class=&quot;i_add&quot; /&gt; 新增 &lt;/el-button&gt; &lt;el-button id=&quot;btn-tip&quot; type=&quot;success&quot; class=&quot;btn-margin&quot; :plain=&quot;btnBaseAttrs.plain&quot; :round=&quot;btnBaseAttrs.round&quot; :size=&quot;btnBaseAttrs.size&quot; :disabled=&quot;btnDisabled&quot; @click=&quot;openTip()&quot;&gt; &lt;svg-icon icon-class=&quot;i_sm&quot; /&gt; 字段说明 &lt;/el-button&gt; &lt;!-- 是否展开 --&gt; &lt;menu-expand :expand=&quot;expandStatus&quot; @menu-expand-status=&quot;menuExpandStatus&quot; /&gt; &lt;/el-row&gt; &lt;!--Table表格--&gt; &lt;div id=&quot;data-container&quot; class=&quot;table-sty&quot;&gt; &lt;el-table ref=&quot;multipleSourceTableRef&quot; :data=&quot;tableData&quot; :row-key=&quot;tableAttrs.rowKey&quot; :size=&quot;tableAttrs.size&quot; :fit=&quot;tableAttrs.fit&quot; :show-header=&quot;tableAttrs.showHeader&quot; :highlight-current-row=&quot;tableAttrs.hcr&quot; :border=&quot;tableAttrs.border&quot; style=&quot;width: 100%;margin-bottom: 20px;&quot; :default-expand-all=&quot;tableAttrs.expand&quot; :default-sort=&quot;&#123; prop: &apos;id&apos;, order: &apos;asc&apos; &#125;&quot; :empty-text=&quot;tableAttrs.emptyText&quot; :header-cell-style=&quot;setTableHeaderStyle&quot; :row-style=&quot;setTableRowStyle&quot; :tree-props=&quot;tableAttrs.treeProps&quot; :expand-row-keys=&quot;tableOneKeys&quot; &gt; &lt;el-table-column fixed=&quot;left&quot; prop=&quot;id&quot; label=&quot;菜单ID&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;RTX名称&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;title&quot; label=&quot;中文名称&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;path&quot; label=&quot;请求地址&quot; width=&quot;180&quot; :header-align=&quot;tableRowAttrs.headerAlign&quot; align=&quot;left&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;icon&quot; label=&quot;菜单图标&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;level&quot; label=&quot;级别&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column label=&quot;上级菜单信息&quot; :align=&quot;tableRowAttrs.align&quot;&gt; &lt;el-table-column prop=&quot;pid&quot; label=&quot;上级菜单ID&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;pname&quot; label=&quot;上级菜单RTX&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;ptitle&quot; label=&quot;上级菜单名称&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;开发者配置信息&quot; :align=&quot;tableRowAttrs.align&quot;&gt; &lt;el-table-column prop=&quot;component&quot; label=&quot;组件&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;redirect&quot; label=&quot;重定向&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;hidden&quot; label=&quot;Hidden属性&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;noCache&quot; label=&quot;noCache属性&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;affix&quot; label=&quot;Affix属性&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column prop=&quot;breadcrumb&quot; label=&quot;Breadcrumb属性&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; sortable :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;创建时间&quot; :header-align=&quot;tableRowAttrs.headerAlign&quot; :align=&quot;tableRowAttrs.align&quot; width=&quot;240&quot; sortable&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;i class=&quot;el-icon-time&quot; /&gt; &lt;span style=&quot;margin-left: 20px&quot;&gt;&#123;&#123; scope.row.create_time &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;create_rtx&quot; label=&quot;创建者RTX&quot; width=&quot;180&quot; :align=&quot;tableRowAttrs.align&quot; :show-overflow-tooltip=&quot;tableRowAttrs.sot&quot; /&gt; &lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; :align=&quot;tableRowAttrs.align&quot; width=&quot;200&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-tooltip effect=&quot;dark&quot; content=&quot;详情&quot; placement=&quot;top&quot;&gt; &lt;i class=&quot;el-icon-document&quot; @click=&quot;rowHandleEdit(scope.$index, scope.row, &apos;detail&apos;)&quot; /&gt; &lt;/el-tooltip&gt; &lt;el-tooltip class=&quot;icon-item&quot; effect=&quot;dark&quot; content=&quot;编辑&quot; placement=&quot;top&quot;&gt; &lt;i class=&quot;el-icon-edit&quot; @click=&quot;rowHandleEdit(scope.$index, scope.row, &apos;info&apos;)&quot; /&gt; &lt;/el-tooltip&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column fixed=&quot;right&quot; label=&quot;状态管理&quot; :align=&quot;tableRowAttrs.align&quot; width=&quot;200&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;menu-status :row=&quot;scope.row&quot; /&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;!-- 暂定table、tree 2种显示模式，不做page分页 --&gt; &lt;!-- 提示说明 --&gt; &lt;menu-tip :show=&quot;tipDialogStatus&quot; @close-tip=&quot;closeTip&quot; /&gt; &lt;!-- 新增 --&gt; &lt;menu-add :show=&quot;addDialogStatus&quot; @close-add-menu=&quot;closeAddMenu&quot; /&gt; &lt;!-- 详情 --&gt; &lt;menu-detail :show=&quot;detailDialogStatus&quot; :row-md5=&quot;oprSelectRtx&quot; @close-detail-menu=&quot;closeDetailMenu&quot; /&gt; &lt;!-- 编辑 --&gt; &lt;menu-set :show=&quot;setDialogStatus&quot; :row-md5=&quot;oprSelectRtx&quot; @close-set-menu=&quot;closeSetMenu&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import store from &apos;@/store&apos;import &#123; getMenuList &#125; from &apos;@/api/manage&apos;import MenuExpand from &apos;@/components/manage/MenuExpand&apos;import MenuTip from &apos;@/components/manage/MenuTip&apos;import MenuDetail from &apos;@/components/manage/MenuDetail&apos;import MenuAdd from &apos;@/components/manage/MenuAdd&apos;import MenuSet from &apos;@/components/manage/MenuSet&apos;import MenuStatus from &apos;@/components/manage/MenuStatus&apos;export default &#123; name: &apos;Menu&apos;, emits: [], components: &#123; &apos;menu-expand&apos;: MenuExpand, &apos;menu-tip&apos;: MenuTip, &apos;menu-detail&apos;: MenuDetail, &apos;menu-add&apos;: MenuAdd, &apos;menu-set&apos;: MenuSet, &apos;menu-status&apos;: MenuStatus &#125;, props: &#123;&#125;, data() &#123; return &#123; btnDisabled: false, // 按钮禁用状态 expandStatus: false, // 是否展开 // button attributes btnBaseAttrs: &#123; size: &apos;medium&apos;, // 大小 medium / small / mini / &apos;&apos; type: &apos;primary&apos;, // 类型 primary / success / warning / danger / info / text plain: true, // 是否为朴素按钮 round: false, // 是否为圆角按钮 circle: false // 是否为圆形按钮 &#125;, // switch attrs switchAttrs: &#123; // switch attrs disabled: false, // 是否禁用 width: 40, // 宽度（像素），默认40 activeText: &apos;展开&apos;, // 打开时的文字描述 inactiveText: &apos;关闭&apos;, // 关闭时的文字描述 activeValue: true, // 打开时的value inactiveValue: false, // 打开时的value activeColor: &apos;#ff4949&apos;, // 打开时的背景色 inactiveColor: &apos;#13ce66&apos; // 关闭时的背景色 &#125;, // table attributes tableAttrs: &#123; rowKey: &apos;id&apos;, stripe: true, // 是否为斑马纹 true/false border: true, // 是否带有纵向边框 true/false size: &apos;medium&apos;, // 尺寸 medium / small / mini / &apos;&apos; fit: true, // 列的宽度是否自撑开 true/false showHeader: true, // 是否显示表头 true/false hcr: true, // 是否要高亮当前行highlight-current-row true/false height: 450, // 高度 maxHeight: 450, // 最大高度(属性为Table指定最大高度，此时若表格所需的高度大于最大高度，则会显示一个滚动条。) expand: false, // default-expand-all 是否默认展开所有行，当 Table 包含展开行存在或者为树形表格时有效 treeProps: &#123; children: &apos;children&apos; &#125;, // treeProps showSum: true, // 表尾合计 sumText: &apos;统计&apos;, // 合计行第一列的文 emptyText: &apos;暂无数据&apos; // 空数据时显示的文本内容 &#125;, // table row: label column-key prop width min-width sortable tableRowAttrs: &#123; type: &apos;selection&apos;, // selection多选框 / index索引 / expand可展开的按钮 index: 1, // 如果设置了 type=index，可以通过传递 index 属性来自定义索引 fixed: true, // 列固定，值有left、right，默认为left resizable: true, // 对应列是否可以通过拖动改变宽度 true/false align: &apos;center&apos;, // 对齐方式 left / center / right headerAlign: &apos;center&apos;, // 表头对齐方式，若不设置该项，则使用表格的对齐方式 left / center / right sot: true // showOverflowTooltip 多余的内容会在hover时以tooltip的形式显示出来 &#125;, tableData: [], // table data tableOneKeys: [], // 一级菜单的key，格式为[&#123;id: 1&#125;, &#123;id: 2&#125;...]，用于开关闭菜单折叠 tipDialogStatus: false, // tip oprSelectRtx: &apos;&apos;, // 当前选择数据的RTX deleteConfirm: false, // 删除确认dialog状态 detailDialogStatus: false, // 详情dialog setDialogStatus: false, // 编辑dialog addDialogStatus: false // 新增dialog &#125; &#125;, computed: &#123;&#125;, watch: &#123;&#125;, created() &#123; this.getMenuList() &#125;, mounted() &#123;&#125;, methods: &#123; getMenuList() &#123; // 请求后台API初始化表格数据 // 初始化选择参数 this.oprSelectRtx = &apos;&apos; // list列表参数 const data = &#123; &apos;rtx_id&apos;: store.getters.rtx_id &#125; return new Promise((resolve, reject) =&gt; &#123; getMenuList(data).then(response =&gt; &#123; const &#123; status_id, data &#125; = response if (status_id === 100 || status_id === 101) &#123; this.tableData = data.list this.tableOneKeys = data.keys &#125; resolve(response) &#125;).catch(error =&gt; &#123; this.loading = false reject(error) &#125;) &#125;) &#125;, setTableHeaderStyle() &#123; // table title样式 return &#123; background: &apos;#eee&apos;, color: &apos;#606266&apos; &#125; &#125;, setTableRowStyle(&#123; row, rowIndex &#125;) &#123; // table row样式 if (row &amp;&amp; row.level === &apos;1&apos;) &#123; return &#123; background: &apos;#FFEE99&apos;, // 42B984 FFFF00 color: &apos;#000000&apos; &#125; &#125; &#125;, rowHandleEdit(index, row, type) &#123; // table row 编辑详情 if (!row || !type || !row.md5_id) &#123; return false &#125; this.oprSelectRtx = row.md5_id if (type === &apos;detail&apos;) &#123; this.detailDialogStatus = true &#125; else if (type === &apos;info&apos;) &#123; this.setDialogStatus = true &#125; &#125;, closeDetailMenu() &#123; // 关闭菜单详情dg this.detailDialogStatus = false &#125;, closeSetMenu(isRefresh) &#123; // 关闭编辑菜单dg this.setDialogStatus = false if (isRefresh) &#123; this.getMenuList() &#125; &#125;, openAddMenu() &#123; // 打开新增菜单dg this.addDialogStatus = true &#125;, closeAddMenu(isRefresh) &#123; // 关闭新增菜单dg this.addDialogStatus = false if (isRefresh) &#123; this.getMenuList() &#125; &#125;, menuExpandStatus(status) &#123; // 打开/关闭table 子菜单 this.expandStatus = status this.tableOneKeys.map(item =&gt; &#123; return this.$refs.multipleSourceTableRef.toggleRowExpansion(item, status) &#125;) &#125;, openTip() &#123; // 开启tip this.tipDialogStatus = true &#125;, closeTip() &#123; // 关闭tip this.tipDialogStatus = false &#125; &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;.btn-margin &#123; margin-left: 20px;&#125;.table-sty &#123; margin-top: 25px;&#125;.icon-item &#123; margin-left: 45px;&#125;&lt;/style&gt;]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>Element-UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Conda常用命令]]></title>
    <url>%2Farticles%2F56751%2F</url>
    <content type="text"><![CDATA[Python Conda 搞Python都知道玩Python必须得有虚拟环境，那么常用的工具主要有Conda、Virtualenv、Pipenv、Pyflow。。。。。。还有其他的，常用的就是列举的那些了，经过长时间的使用，还是觉得Conda最好用，本篇记录一下Conda常用的命令，，Conda很强发大。。。。。。 本篇记录Conda的常用命令，安装略。 创建虚拟环境123456789101112# 创建环境，-n为--name的缩写参数conda create --name env_nameconda create -n env_name# 创建指定python3.7版本环境conda create -n env_name python=3.7# 创建指定python版本下包含某些包conda create -n env_name python=3.7 XXXX XXXX XXXX# 克隆其他环境conda create -n new_env_name --clone old_env_name 激活/退出12conda activate env_nameconda deactivate 列举环境12conda info -e / conda info --envsconda env list 删除环境1conda remove -n env_name --all 安装/卸载包1234567conda install xxx [-n env_name]conda uninstall xxx [-n env_name]# 激活环境conda activate env_name# pip安装/卸载pip install/uninstall xxxx []括号内容为非必需填写，如果不加为当前环境。 导出虚拟环境1234# 导出conda list -e [-n env_name] &gt; requirements.txt# 安装conda install --yes --file requirements.txt 分享虚拟环境12345# 导出当前虚拟环境conda env export &gt; environment.yml# 创建保存的虚拟环境conda env create -f environment.yml 帮助12345# 总览命令帮助conda --help# 命令详情帮助conda xxxx --help Conda的功能非常强大，上面只列举的最、最、最常用的命令而已，想详细了解就得花点时间去学了，不过对于日常开发的话学的命令没那么多，整理完成，收工，睡觉去了。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Conda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Element-UI【Form组件】unpected-width报错的解决]]></title>
    <url>%2Farticles%2F16084%2F</url>
    <content type="text"><![CDATA[在使用Element-UI的Form组件时候，发现控制台报了一个Error：[ElementForm]unpected width VUE Element-UI 报错：1234567891011vue.esm.js:1897 Error: [ElementForm]unpected width at VueComponent.getLabelWidthIndex (element-ui.common.js:23014) at VueComponent.deregisterLabelWidth (element-ui.common.js:23027) at VueComponent.updateLabelWidth (element-ui.common.js:23226) at VueComponent.beforeDestroy (element-ui.common.js:23253) at invokeWithErrorHandling (vue.esm.js:1863) at callHook (vue.esm.js:4222) at VueComponent.Vue.$destroy (vue.esm.js:3981) at destroy (vue.esm.js:3168) at invokeDestroyHook (vue.esm.js:6119) at invokeDestroyHook (vue.esm.js:6124) 使用el-form组件的时候，设置labelWidth设为auto时，如果el-form-item内容如果你用了v-show会提示上面的错误，可以v-if替换成v-show，每次重新渲染组件，这样就可以了。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>Element-UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hashcat的学习]]></title>
    <url>%2Farticles%2F14167%2F</url>
    <content type="text"><![CDATA[业余时间学习一下密码破解，以后能搞个程序破解个WIFI也是好的啊，哈哈哈～ Hashcat 官网：https://hashcat.net/hashcat/ Github：https://github.com/hashcat/hashcat 自我学习中。。。。！！！。]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>Hashcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE之scripts的学习]]></title>
    <url>%2Farticles%2F20773%2F</url>
    <content type="text"><![CDATA[VUE 1234567891011&quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vue-cli-service serve --open --mode development&quot;, &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;, &quot;build:prod&quot;: &quot;vue-cli-service build --report&quot;, &quot;build:dev&quot;: &quot;vue-cli-service build --report --mode development&quot;, &quot;preview&quot;: &quot;node build/index.js --preview&quot;, &quot;new&quot;: &quot;plop&quot;, &quot;svgo&quot;: &quot;svgo -f src/icons/svg --config=src/icons/svgo.yml&quot;, &quot;test:unit&quot;: &quot;jest --clearCache &amp;&amp; vue-cli-service test:unit&quot;, &quot;test:ci&quot;: &quot;npm run lint &amp;&amp; npm run test:unit&quot;&#125;, dev 开发模式启动we服务 lint 检查代码是否符合eslint语法标准 build:prod 打包生产环境 build:dev 打包开发环境 new 新建一个view/router/store，pop是一个插件，感觉挺不错的 test:unit 单元测试 test:ci 语法检查 + 单元测试 坚持每天学习。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUE之.env.xxxx环境的应用]]></title>
    <url>%2Farticles%2F55138%2F</url>
    <content type="text"><![CDATA[最近一段时间在写VUE前端项目，发现有.env.development、.env.production，于是查了下官网，学习总结一下。 VUE .env 全局默认配置文件，不论什么环境都会加载合并 .env.development 开发环境下的配置文件 .env.production 生产环境下的配置文件 加载顺序：.env -&gt; .env.development 或者 .env -&gt; .env.production后续加载配置文件中的变量会覆盖.env环境中同名的变量，而且上述的文件中可以添加变量，添加的变量在项目中可以通过process.env.XXXXX获取。 注意： 属性名必须以VUE_APP_开头，比如VUE_APP_XXX 开发环境.env.development文件示例：1234567# baseNODE_ENV = &apos;development&apos;PORT = 10002# apiVUE_APP_BASE_API = &apos;http://127.0.0.1:9999/&apos;VUE_APP_AVATAR_API = &apos;/user/avatar&apos; 生产环境.env.production文件示例：1234567# baseNODE_ENV = &apos;production&apos;PORT = 10001# apiVUE_APP_BASE_API = &apos;http://121.4.56.169:9999/&apos;VUE_APP_AVATAR_API = &apos;/user/avatar&apos; 官网详细介绍：https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F 坚持每天学习。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2死锁的处理过程]]></title>
    <url>%2Farticles%2F18147%2F</url>
    <content type="text"><![CDATA[之前项目主要用Mysql、PostgreSQL，这两天DB2数据库发生-668代码问题，有个表锁死了，大概解决了一天，记录一下。提前说明一下，关于-668以及存在解决方案了，这个文章只是为了记录解决的一个过程，尝试各种方法吧。 DB2 死锁 http://www.mirocn.com/info/details_156.html https://www.cnblogs.com/ruingy/p/3605487.html https://zhuanlan.zhihu.com/p/201010573]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gitea代码库的环境搭建]]></title>
    <url>%2Farticles%2F3042%2F</url>
    <content type="text"><![CDATA[简介 最近基于项目管理文件的事情进行了一些探索，发现github不止可以用来更新、存储代码，也可以作为一个文件仓库存放项目的各类文件，对Github、Gitlab、Gogs、Gitea、Gitee进行了一些学习，也查下了网上对Gitea的呼吁声蛮大的，决定对测试服务器上进行部署使用，看看使用的效果咋样。学习对Gitea的安装与使用！！！。 Git Gitea 文件仓库 面对项目上建立文件管理仓库，首先想到的就是gitub，平常用这个管理代码项目也居多，但是对于安装集中式管理还是分布式管理当时也纠结了一下，对于统一管理SVN也还是不错的，但是个人更倾向与GIT，下面对于遇到的概念或者安装、部署都做一个记录说明。 版本管理 集中式版本控制 集中管理的服务器保存所有文件的修订版本，同步更新的时候，需要要先从中央服务器取得最新的版本，然后继续各种处理，最后，再把更新的内容推送给中央服务器。典型的代表SVN，下面是结构图： 分布式版本控制 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 仓库的选择之前的单位用的就是Gitlab用来管理内部代码，功能也十分优秀，但是对于几个人维护的项目有点过于强大，所以选择了Gitea小型，够用而且速度没得说。 Github 全球最大的代码托管平台。 Gitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的Web服务。 Gogs 目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发，并且支持所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。 Gitea Gogs的一个分支（28.8K）。 Gitee 是开源中国（OSChina）推出的基于Git的代码托管服务，包括三个版本，分别是：社区版、企业版和高校版。 资源下载对于安装部署Gitea环境，需要提前准备好数据库、GitForWindows、Gitea这3个软件就可以，在项目上我选择了MariaDB数据库。 Gitea：https://dl.gitea.io/gitea Mariadb数据库：https://mariadb.org/download/?t=mariadb&amp;o=true&amp;p=mariadb&amp;r=5.5.68 Git客户端：https://gitforwindows.org/ 为了方便大家统一进行下载，也准备了网盘下载地址：链接: https://pan.baidu.com/s/1AUolZ1FrqLXvnVU1vRr2OA提取码: pa3s 安装 数据库 安装略。初始化语句：1234create database gitea default character set utf8 collate utf8_general_ci;create user &apos;gitea&apos;@&apos;%&apos; identified by &apos;123456&apos;;grant all privileges on gitea.* to &apos;gitea&apos;@&apos;%&apos;;flush privileges; GitForWindows 略。 以上数据库与GitForWindows请自行安装部署，也很简单。 Gitea Windows安装部署：1.文件放在D:\gitea2.启动：双击下载文件 可选操作：加入系统服务。添加服务：sc create gitea start= auto binPath= “\”D:\gitea\gitea.exe\” web –config \”D:\gitea\custom\conf\app.ini\””删除服务：sc delete gitea Linux安装部署：1.下载2.文件放在/opt/www/gitea/gitea3.修改权限chmod 777 gitea-1.x.x-linux-amd644.启动 &amp;&amp; 后台启动nohup /opt/www/gitea/gitea web &gt; /dev/null 2&gt;&amp;1 &amp; 5.其它方式：https://docs.gitea.io/zh-cn/linux-service/ Gitea命令参数以下是Gitea命令参数的详情，常用的就是web、dump这2个命令，详情请参考官网：https://docs.gitea.io/zh-cn/command-line/12345678910111213141516171819COMMANDS: web Start Gitea web server 启动服务 serv This command should only be called by SSH shell hook Delegate commands to corresponding Git hooks dump Dump Gitea files and database 备份 cert Generate self-signed certificate admin Command line interface to perform common administrative operations generate Command line interface for running generators migrate Migrate the database keys This command queries the Gitea database to get the authorized command for a given ssh key fingerprint convert Convert the database doctor Diagnose problems manager Manage the running gitea process embedded Extract embedded resources migrate-storage Migrate the storage docs Output CLI documentation dump-repo Dump the repository from git/github/gitea/gitlab dump其他仓库 restore-repo Restore the repository from disk help, h Shows a list of commands or help for one command 访问访问本机地址：127.0.0.1:3000默认端口：3000 初始化gitea，进行下一步系统配置。 配置 数据库配置 基本配置 可选配置 用户配置 管理配置 目录说明Gitea系统初始化成功会让自动建立一个管理员，对于上述配置后对应的目录也会自动生成。 custom 配置文件目录，包含项目全局、数据库、仓库存储位置、访问服务、服务等各项配置。 data 数据存放目录。 log 日志存储目录。 gitea执行文件 用于启动服务。 Gitea应用具体Gitea的使用也没什么难度，主要就是创建仓库、维护等操作，对于管理员有个管理权限，部署成功后接下来就是对Gitea的探索。创建仓库： 拥有者 仓库名称 描述 模板 工单标签 .gitignore 授权许可 默认分支 签名信任模型 Git使用本来不打算介绍Git的使用了，但是把基础的操作功能记录下，对于初学者也可能比较友好，在Github上搞几个项目Git命令自然而然就会了，基础的功能还是比较好记的，有兴趣的人可以查查官网，命令超级多，而且参数也不少。 GIT初始化仓库 方式一：12gitea创建仓库git clone 仓库URL 方式二：12git init 仓库名称git remote add origin 仓库URL GIT提交暂缓区 全量提交：1git add . 指定文件：1git add 指定文件 GIT提交本地仓库 1git commit -m “提交内容” GIT提交远程仓库与更新 提交远程仓库：1git push -u origin master 更新远程仓库：1git pull origin master 这里主要介绍Gitea安装与使用，对于git命令的学习请参考下列学习地址。 学习参考GIT官网：https://git-scm.com/book/zh/v2GIT基础学习：https://www.runoob.com/manual/git-guide/GIT菜鸟：https://www.runoob.com/git/git-basic-operations.html 每天坚持学习！]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>git</tag>
        <tag>gitea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6Async与Await方法的学习]]></title>
    <url>%2Farticles%2F17064%2F</url>
    <content type="text"><![CDATA[VUE ES6 定义很简单，一句话：async用于异步方法，await用于等待异步方法执行完成。 所以，await必须搭配async异步方法使用。 例子 async 123456789async function demo() &#123; return &apos;hello world&apos;;&#125;console.log(demo())console.log(&apos;run...&apos;)运行结果：run...hello world async函数返回的是一个promise对象，对返回值可以进行then…catch操作。 await 123456789101112async function demo2() &#123; const res = await demo1() console.log(&apos;inner run....&apos;)&#125;console.log(demo2())console.log(&apos;run...&apos;)运行结果：run...hello worldinner run.... await只能在async方面的里面使用，让后面的执行语句或方法要等待当前await方法的结果后才能再执行。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flask请求参数的总结]]></title>
    <url>%2Farticles%2F40970%2F</url>
    <content type="text"><![CDATA[Python Flask 日常写项目用Flask比较多，不管是写成前端集成的还是单独作为API项目性能都还是很不错的，对Flask API接收参数做一个总结，记录一下。首先，引用flask对象的request。 GET请求1234567from flask import request@app.route(&apos;/user/info&apos;, methods=[&apos;GET&apos;])@cross_origin(supports_credentials=True)def info(): print(request.args) print(request.values) requests.args 平常开发用这个获取get参数比较多，数据类型：1ImmutableMultiDict([(&apos;rtx&apos;, &apos;mingliang.gao&apos;)]) request.values 也可以用这个获取参数，但是values同时获取get以及post请求的参数，数据类型：1CombinedMultiDict([ImmutableMultiDict([(&apos;rtx&apos;, &apos;mingliang.gao&apos;)]), ImmutableMultiDict([])]) POST请求12345678from flask import request@app.route(&apos;/user/info&apos;, methods=[&apos;GET&apos;])@cross_origin(supports_credentials=True)def info(): print(request.form) print(request.data) print(request.get_json()) requests.form 主要是对于前端form表单的参数获取，数据类型：1ImmutableMultiDict([]) request.data json数据的获取方式之一，但是数据是byte类型，不建议使用。 request.get_json() json数据最常用的方式，直接就是dict类型。 文件123456from flask import request@app.route(&apos;/file/&apos;, methods=[&apos;GET&apos;])@cross_origin(supports_credentials=True)def file(): print(request.files) requests.files 用files去获取请求的文件，数据流是二进制文件，stream写入文件。 其他 requests.method 用来获取当前请求的方法，get、post等。 requests.url 请求的URL地址。 requests.headers http请求的headers内容，可以直接用get方法进行数据获取，例如：request.headers.get(‘rtx-id’)。 requests.blueprint 获取请求的蓝图。 requests.endpoint 请求方法的endpoint。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python项目API请求CORS跨域的问题]]></title>
    <url>%2Farticles%2F44368%2F</url>
    <content type="text"><![CDATA[Python CORS 记录一下前端请求后台造成CORS跨域的问题，本文以Python为开发语言，讲述解决跨域的问题，其他后台API语言也都类似。 之前的项目差不多都是使用Jijia2模板去搞的web服务，最近新起了一个新项目，打算采用VUE框架写前端，主要使用到了VUE-Element-Admin这个框架，是一位字节跳动的大佬开发的，具体的详情可以去学习：https://panjiachen.github.io/vue-element-admin-site/zh/基于这个前端框架去开发自己的系统，用的Flask去写接口，启动2个项目之后，发现前端get数据失败，打开控制台去看：1Access to XMLHttpRequest at &apos;http://127.0.0.1:9999/user/info?token=098f6bcd4621d373cade4e832627b4f8&apos; from origin &apos;http://localhost:10000&apos; has been blocked by CORS policy: Response to preflight request doesn&apos;t pass access control check: The &apos;Access-Control-Allow-Origin&apos; header has a value &apos;http://localhost:9527&apos; that is not equal to the supplied origin. 大致的错误就是CORS跨域请求的问题。 解决方案 安装 1pip install flask_cros 全局资源 123456from flask_cors import CORS, cross_originapp = Flask(__name__)app.config[&apos;SECRET_KEY&apos;] = &apos;PythonNB&apos;CORS(app, supports_credentials=True) 蓝图资源 这里主要使用了蓝图。12345from flask_cors import CORSuser = Blueprint(&apos;user&apos;, __name__, url_prefix=&apos;/user&apos;)CORS(user, supports_credentials=True) 特定资源 在特定的方法上加上修饰器。123from flask_cors import cross_origin@cross_origin(supports_credentials=True) 本人的前端功底比较弱，但是发现学完vue之后，不管是语法还是UI界面都是很不错的，有想学习前端的同学还是推荐学习vue的，坚持每天学习，爱变编程。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6之扩展运算符三个点]]></title>
    <url>%2Farticles%2F3828%2F</url>
    <content type="text"><![CDATA[VUE ES6 最近也写了不少的VUE的代码，发现…这个新的运算符用的还是比较多的，总结记录下。总结一句话： 把参数对象中可以遍历的属性都取出来放在新的对象中，实现多个对象扁平化。 不多说，直接看例子：1234567const arr1 = [&apos;a&apos;, &apos;b&apos;];const arr2 = [&apos;c&apos;];const arr3 = [&apos;d&apos;, &apos;e&apos;];console.log([...arr1, ...arr2, ...arr3])# 结果：[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ] 以此类推，开发中最常用就是把abc字符串等数据换成Object对象的数据，不过记住原理，万变不离其宗。再来个对象的例子加深下印象：1234567let obj1 = &#123; name: &apos;mingliang.gao&apos; &#125;let obj2 = &#123; sex: &apos;man&apos; &#125;let obj = &#123; ...obj1, ...obj2 &#125;console.log(obj)# 结果：&#123; name: &apos;mingliang.gao&apos;, sex: &apos;man&apos; &#125; 学习参考：https://es6.ruanyifeng.com/#docs/array]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速清空大文件]]></title>
    <url>%2Farticles%2F27322%2F</url>
    <content type="text"><![CDATA[Linux快速清空大文件 1.echo 1echo &quot;&quot; &gt; filename.log 2.cat 1cat /dev/null &gt; access.log 3.dd 1dd if=/dev/null of=access.log 清空的原理就是重定向，方法很多，不局限。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux其他篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript对象属性的遍历]]></title>
    <url>%2Farticles%2F27964%2F</url>
    <content type="text"><![CDATA[7种Javascript对象属性遍历的方法。 Javascript 测试数据 12345678var name = &apos;mingliang.gao&apos;;var demo = &#123; name, language: &apos;js&apos;, say() &#123; return (&apos;name: &apos;, name, &apos;language: &apos;, language) &#125;&#125; 方法一：for…infor…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。123for (let k in demo)&#123; console.log(k)&#125; 结果：123namelanguagesay 方法二：Object.keys(obj)Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。1console.log(Object.keys(demo)) 结果：1[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ] 方法三：Object.getOwnPropertyNames(obj)Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。1console.log(Object.getOwnPropertyNames(demo)) 结果：1[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ] 方法四：Object.getOwnPropertySymbols(obj)Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。1console.log(Object.getOwnPropertySymbols(demo)) 结果：1[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ] 方法五：Reflect.ownKeys(obj)Reflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。1console.log(Reflect.ownKeys(demo)) 结果：1[ &apos;name&apos;, &apos;language&apos;, &apos;say&apos; ] 方法六：getOwnPropertyDescriptor(obj, ‘属性名’)对象的每个属性都有一个描述对象（Descriptor），Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。1console.log(getOwnPropertyDescriptor(demo, &apos;name&apos;)) 结果：1234&#123; value: &apos;mingliang.gao&apos;, writable: true, enumerable: true, configurable: true &#125; 方法七：解构赋值1234let &#123; name, language, say, ...args &#125; = demo;console.log(language)console.log(say)console.log(args) 结果：12mingliang.gaopython]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle密码过期的处理]]></title>
    <url>%2Farticles%2F32323%2F</url>
    <content type="text"><![CDATA[今天下午处理了一下Oracle账户过期的问题，记录一下处理的过程，密码过期+杀死死锁。 Oracle 密码过期 背景4号刚休完元旦的假期下午来到项目上，发现系统的调度停止了，修改系统状态又重新了一次，发现还是报错，第一个调度都跑不过去，这记录一下，后面杀死死锁进程要考。因为在节前psql已经提示账户密码马上过期了，需要重制密码，没有理会，所以第一时间想到了是这个原因造成的，于是打开plsq输入登录密码，已经登录不上去了，问题已经确定了，那么就针对问题处理问题。 解决方案具体Oracle数据库运维没什么经验，增删改查用的还是多，但是涉及到操作了，还是要谨慎一些，问了自己的好朋友、同事，以及结合baidu，处理了这次密码过期造成的问题。不多说，看下处理过程。 切换oracle用户登录服务器，切换到oracle用户，执行sqlplus / as sysdba操纵，如果能顺利登录Oracle数据库，直接下下个阶段。我这的Oracle数据库部署的有问题，执行sqlplus发现提示一些错误，具体的错误就不写了，反正就是当时这个Oracle环境遍历没有配置好。打开/home/oracle/.bash_profile环境变量文件，发现以及配置如下内容：12345678910111213umask 022ORACLE_HOSTNAME=aespasORACLE_BASE=/u01/app/oracleORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1export ORACLE_SID=aespasPATH=$PATH:$HOME/bin:$ORACLE_HOME/bin:$ORACLE_HOME/jdk/binexport PATHexport ORACLE_HOMELC_ALL=&quot;en_US&quot;LANG=&quot;en_US&quot;export NLS_LANG=&quot;AMERICAN_AMERICA.ZHS16GBK&quot;export NLS_DATE_FORMAT=&apos;YYYY-MM-DD HH24:MI:SS&apos; 需要执行一下命令使环境变量生效：1source /home/oracle/.bash_profile 修改密码 登录Oracle 1sqlplus / as sysdba 查看指定的用户 1select username, profile from dba_users where username = &apos;PAS&apos;; 查看用户指定profile密码有效期设置 1select * from dba_profiles s where s.profile=&apos;DEFAULT&apos; AND resource_name=&apos;PASSWORD_LIFE_TIME&apos;; 密码有效期由默认的180天修改成“无限制” 1ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED; 重新设置密码 1ALTER USER PAS identified by pas 杀死死锁 查看哪些表锁住了 123select b.owner,b.object_name,a.session_id,a.locked_modefrom v$locked_object a,dba_objects bwhere b.object_id = a.object_id;̨̨̨̨̨ 查看锁死的会话 123select b.username,b.sid,b.serial#,logon_timefrom v$locked_object a,v$session bwhere a.session_id = b.sid order by b.logon_time; 杀死锁死的会话 1alter system kill session &apos;sid,serial&apos;; 其中sid、serial为上一步查询的锁死会话。 运行调度重新运行系统的调度 注意要点 sqlplus登录数据库的所有sql建议手动输入，不要粘贴复制。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pycharm新文件模板配置]]></title>
    <url>%2Farticles%2F10539%2F</url>
    <content type="text"><![CDATA[Pycharm关于文件创建File and Code Template的配置 Python Pycharm 今天元旦了，吃过饭后晚上还是写了会代码，用Pycharm写项目每次创建新文件的时候，都有一些文件初始化的默认内容，本人Pycharm File and Code Template配置：12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe:base_info: __author__ = &quot;PyGo&quot; __time__ = &quot;$&#123;DATE&#125;&quot; __version__ = &quot;v.1.0.0&quot; __mail__ = &quot;gaoming971366@163.com&quot; __project__ = &quot;$&#123;PROJECT_NAME&#125;&quot;usage:design:reference urls:python version: python3Enjoy the good time everyday！！!Life is short, I use python.------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python $&#123;NAME&#125;.py# ------------------------------------------------------------if __name__ == &apos;__main__&apos;: pass 常用的变量如下：12345678910111213$ &#123;PROJECT_NAME&#125; - 项目的名称。$ &#123;NAME&#125; - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。$ &#123;USER&#125; - 当前用户的登录名。$ &#123;DATE&#125; - 当前的系统日期。$ &#123;TIME&#125; - 当前系统时间。$ &#123;YEAR&#125; - 今年。$ &#123;MONTH&#125; - 当月。$ &#123;DAY&#125; - 当月的当天。$ &#123;HOUR&#125; - 目前的小时。$ &#123;MINUTE&#125; - 当前分钟。$ &#123;PRODUCT_NAME&#125; - 将在其中创建文件的IDE的名称。$ &#123;MONTH_NAME_SHORT&#125; - 月份名称的前3个字母。 示例：1月，2月等$ &#123;MONTH_NAME_FULL&#125; - 一个月的全名。 示例：1月，2月等]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[弥留之城的爱丽丝]]></title>
    <url>%2Farticles%2F41087%2F</url>
    <content type="text"><![CDATA[《弥留之城的爱丽丝》 死亡游戏 悬疑 惊悚 简介目前只有第一季，但是蛮好看的，在第一季最后一节留了彩蛋，等待第二季 推荐指数 ⭐️⭐️⭐️⭐️ 主线剧情 男主、女主组队通关现实中的死亡游戏。 观看地址 baidu自行下载或者链接: https://pan.baidu.com/s/1ju1E4FfIMlZs5Acn2Ec8Ag提取码: v44f。]]></content>
      <categories>
        <category>影视说</category>
      </categories>
      <tags>
        <tag>电视剧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github个人Overview展示]]></title>
    <url>%2Farticles%2F61451%2F</url>
    <content type="text"><![CDATA[前几天看到一个项目，在README.md上有彩色标签、Github个人统计信息，挺有趣的，然后在Github上查到有一个专门的项目用来做这个，学习记录一下。 git 先来看下原本的Github Overview试图： 接下来，对其进行优化。 创建新的Repository 首先，在Github中创建一个新的repository，Owner与Repository name保持一致。比如你的Owner为ABC，那么就创建一个ABC仓库。选择Public、Add a README file选项。 编辑README.md文件 创建好了之后，直接对仓库README.md文件进行编辑，这里简单对标签、GitHub Readme Stats进行举例，详情请查阅官网，本人也是探索阶段。 README.md标签 打开标签牌官网：https://shields.io/ 最简单标签： label：标签体的前半部分，比如：Development Language message：标签体的后半部分，比如：Python color：选择一个颜色，也可以输入十六进制代码 示例：1![](https://img.shields.io/badge/Development%20Language-Python-FF0000) GitHub统计 官网：https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md示例：1![GitHub stats](https://github-readme-stats.vercel.app/api?username=GIS90&amp;theme=highcontrast&amp;show_icons=true&amp;hide=contribs,prs&amp;count_private=true) 官网介绍的很明白，请自行查阅。 看下最终效果： 学习参考 README标签：https://shields.io/GitHub统计：https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md Enjoy the good life everyday！]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6学习]]></title>
    <url>%2Farticles%2F56016%2F</url>
    <content type="text"><![CDATA[VUE ES6 最近学习了VUE3，所有的语法是以ECMAScript6为基础的，参考学习了廖雪峰的ES6教程，URL如下： https://es6.ruanyifeng.com/#docs/intro]]></content>
      <categories>
        <category>前端</category>
        <category>转载文章</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GIT删除tag]]></title>
    <url>%2Farticles%2F53395%2F</url>
    <content type="text"><![CDATA[总结一下GIT删除本地tag以及远程tag的操作！！！。 git tag 示例中以v-2021-12-15-01为tag示例。 删除本地tag1git tag -d v-2021-12-15-01 删除远程tag1git push origin :refs/tags/v-2021-12-15-01 显示本地tag1git tag -l 显示远程tag1git show-ref --tag 删除多个12345# 本地git tag -l | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git tag -d# 远程git show-ref --tag | grep &quot;关键字&quot; ｜ grep -v grep | awk -F &quot;&quot; &apos;print $1&apos; | xargs git push origin :refs/tags/ 还没尝试，只是觉得这么可以实现，待测试。]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GIT修改默认分支master改为main]]></title>
    <url>%2Farticles%2F28122%2F</url>
    <content type="text"><![CDATA[最近git初始化项目，本地都是默认master分支，毕竟发生了“黑人维权”，不管怎么说，github官网发布了消息：GitHub 官方发布信息称，从2020年10月1日起，在 Github平台上创建的所有新的源代码仓库将默认命名为 “main” ，不再是原先的 “master”。我的本地居然还没改，于是，找了下解决办法，配置一下就ok了。 git tag 配置 执行一下的命令，就可以设置默认初始化仓库的时候为main仓库，把这个配置到全局的配置文件中。1git config --global init.defaultBranch main 查看 123$ git config --global --listinit.defaultbranch=main]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DingTalk后台导出人员数据]]></title>
    <url>%2Farticles%2F45420%2F</url>
    <content type="text"><![CDATA[程序推送消息需要2个参数，第一个是消息内容，第二个就是消息接受者，利用DingTalk OpenApi，传入的User ID是DingTalk的ID，具体获取方式请查看下列内容。 DingTalk 登录DingTalk官网 官网地址：https://www.dingtalk.com/以管理员的角色登录DingTalk，点击快捷入口的通讯录管理。 批量导入/导出/修改 选择批量导入/导出/修改功能。 导出数据 选择导出/修改成员功能，设置导出的员工，点击下载。 数据展示 导出的excel数据中，第一列为DingTalk User ID，需要结合表数据的第二列与绩效明细数据进行vlookup。 其他 DingTalk（钉钉）创建企业内部机器人：http://pygo2.top/articles/32206/ DingTalk后台导出人员数据：http://pygo2.top/articles/45420/]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>DingTalk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DingTalk（钉钉）创建企业内部机器人]]></title>
    <url>%2Farticles%2F32206%2F</url>
    <content type="text"><![CDATA[背景 工作上的项目有个简单的需求，说有好的什么方式可以实现工资的明细可以自动化推送，经过沟通，打算把方向定位到钉钉上，并不是打广告啊，钉钉在中小型企业，甚至大企业使用程度还是很广的，于是加班加点近几天写了个简单的程序，功能就是调用钉钉openApi实现绩效工资明细自动化推动到行员钉钉。 DingTalk 机器人 程序的基本功能已经开发完了，但是需要对DingTalk（钉钉）进行一些设置，本篇为讲述DingTalk创建机器人的相关操作，如果有想了解程序的可以看文章末尾的github地址，后续也会对这个程序写个详细的文章出来。 登录DingTalk官网 以管理员的方式钉钉开发中后台，依次选择应用开发 &gt; 企业内部开发 &gt; 机器人，点击创建应用。 官网地址：https://open-dev.dingtalk.com/ 配置机器人 按要求填写应用名称、应用描述以及图标，创建完之后还是可以进行内容修改的。 查看AppKey与AppSecret 回到主页面选择刚创建的机器人，查看基本信息，记录机器人的AppKey与AppSecret，在程序的config.yaml配置文件中需要配置对应的参数。 开通权限 选择权限管理 &gt; 机器人 &gt; 企业内机器人发送消息权限，开通这个发消息的权限。 发布机器人 选择版本管理与发布，发布需要发消息的机器人。 学习参考 企业自建单聊机器人（官网）：https://developers.dingtalk.com/document/robots/enterprise-created-chatbot 项目地址：https://github.com/GIS90/dtalk_send_pas DingTalk（钉钉）创建企业内部机器人：http://pygo2.top/articles/32206/ DingTalk后台导出人员数据：http://pygo2.top/articles/45420/]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>DingTalk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vant-Dialog的组件调用方式的注意要点]]></title>
    <url>%2Farticles%2F50291%2F</url>
    <content type="text"><![CDATA[在学习VUE的过程中，使用了移动UI的vant进行实战，在调用Dialog组件的时候，直接在methdod方法中使用没什么问题，但是把vant-dialog用在template标签中，控制台会报出警告，如下：123[Vue warn]: Extraneous non-props attributes (show, title, show-cancel-button) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.at &lt;Dialog show=false onUpdate:show=fn title=&quot;新增&quot; ... &gt;at &lt;Type onVnodeUnmounted=fn ref=Ref&lt; undefined &gt; &gt; VUE vant官网提出了dialog的调用方式，函数调用与组件调用。在组件调用方式的时候报以上警告，而且Dialog会直接显示出来，在组件调用的时候需要注意：123[Dialog.Component.name]: Dialog.Component,或者van-dialog: Dialog.Component, 官网以及vant github都有解决的方案。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>vant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jquery数组删除元素的方法]]></title>
    <url>%2Farticles%2F43302%2F</url>
    <content type="text"><![CDATA[写项目过程中经常写前端js，记录一下删除数组中指定某个元素的常用方法。 Javascript 测试数据 1var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]; 方法一最常用的方法12345var index = arr.indexOf(&apos;c&apos;)if(index &gt; -1)&#123; var el = arr.splice(index, 1) console.log(el)&#125; 结果：12[ &apos;a&apos; ][ &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ] 说明：splice参数有多个，第一个代表删除元素的位置；第二个为删除的个数。 方法二12345var index = arr.indexOf(&apos;c&apos;)if(index &gt; -1)&#123; delete arr[index] console.log(arr)&#125; 结果：1[ &apos;a&apos;, &apos;b&apos;, , &apos;d&apos; ] 说明：使用delete删除元素之后数组长度不变，只是被删除元素变为””了。 方法三123var el = arr.pop()console.log(el)console.log(arr) 结果：12d[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ] 说明：pop方法用于删除数组中的最后一项，并且数据返回到新的变量。 方法四123var el = arr.shift()console.log(el)console.log(arr) 结果：12a[ &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ] 说明：shift方法用于删除数组中的第一项，并且数据返回到新的变量。 最常用的数据删除元素方法为splice，用indexOf去获取删除元素的位置。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Server后端API返回JSON格式说明]]></title>
    <url>%2Farticles%2F40461%2F</url>
    <content type="text"><![CDATA[开发中经常与前端开发或者自己写的前端项目进行数据交换，总结一下自己常用的数据交换格式，以及状态码对应的内容。 Linux Python 格式 *JSON** 123456&#123; &quot;status_id&quot;: 100, &quot;status&quot;: &quot;成功&quot;, &quot;message&quot;: &quot;请求内容&quot;, &quot;data&quot;: [],&#125; status_id：状态码 status：状态内容 message：错误信息 data：请求的json数据内容 实例 Status_id Status Msg Data 100 success 请求成功 {} 101 success 请求成功，查询数据为空 {} 201 failure 请求方法错误 {} 202 failure 缺少请求参数 {} 203 failure 请求参数不合法 {} 204 failure 请求参数为必须信息 {} 205 failure 缺少rtx_id信息 {} 206 failure 缺少上传文件 {} 207 failure 文件格式不支持 {} 208 failure 文件内容不符合要求 {} 209 failure 文件行内容有问题 {} 210 failure 文件存储失败 {} 211 failure 参数特殊要求 {} 212 failure 文件数据已存在 {} 213 failure 文件导出数据为空 {} 301 failure 数据已存在，无需重新建立 {} 302 failure 数据不存在 {} 303 failure 部分数据处理成功 {} 304 failure 数据已删除，无需处理 {} 305 failure 数据已处理，无须二次处理 {} 306 failure 数据已删除，无须二次删除 {} 307 failure 数据处理失败 {} 308 failure 数据不可用 {} 3081 failure 数据（地址）不可用 {} 3082 failure 数据（姓名）不可用 {} 3083 failure 数据（重量）不可用 {} 3084 failure 数据（电话）不可用 {} 309 failure 数据创建用户与当前更改用户不一致 {} 310 failure 非数据相关人员，禁止更新数据 {} 401 failure 图片格式不支持 {} 402 failure 图片存储失败 {} 403 failure 文章创建者与提交者不符合 {} 450 failure 数据存储失败 {} 501 failure Server发生错误，获取数据失败 {} 601 failure HTTP请求接口失败 {} 602 failure HTTP请求数据为空 {} 603 failure HTTP请求数据不可用 {}]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue第三方组件]]></title>
    <url>%2Farticles%2F5638%2F</url>
    <content type="text"><![CDATA[简述 记录学习VUE过程中用到的第三方组件。 VUE 第三方组件 前端框架出现之后，组件化成为了前端开发的趋势，对于开发者来说，尤其是初学者，直接引用别人封装好的组件，在开发成本、样式上会节省一把时间，记录一下VUE学习过程中使用过的第三方组件。至于，优劣势分析会在日后进行分析。 ID Name Url DevTeam VUE Support 1 vant https://vant-contrib.gitee.io/ 有赞前端团队 Vue2, Vue3 2 element-ui https://element.eleme.cn/#/zh-CN 饿了么团队 Vue2, Vue3 3 Bootstrap https://bootstrap-vue.org/ Vue2, Vue3 其实都大同小异，搞懂一个其他都差不多了。 持续更新中。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ATOM安装插件的方式]]></title>
    <url>%2Farticles%2F10421%2F</url>
    <content type="text"><![CDATA[ATOM 之前写过一片关于ATOM的快捷键以及相关的一些基础插件，今日再把安装插件的方式记录一下，还是比较简单的。 ATOM IDE IDE安装 1.打开Atom-&gt;Perferences，快捷键：command+,2.找到左侧的install菜单，输入你想要安装的Packages插件名/Theme名 APM命令安装 1.打开terminal控制台2.执行以下命令：12345678# 查询是否有apm命令which apm# 安装apm install# 查看插件安装列表apm list 具体的命令查询help，其实大部分安装包的命令都一样，npm、pip等等等，安装install、列表list、卸载uninstall/remove。 手动安装 上面2种安装解决了大部分安装插件的问题，如果在库中没有，需要手动git项目进行安装，步骤如下：1.进入到atom的插件目录（cd ~/.atom/package），再通过git clone克隆仓库到本地2.cd到插件的目录，执行apm install命令进行插件的安装 最近有些懈怠了，写写文章、学学习，让自己充实起来，人生需要不断的前进。]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDE</tag>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu-Unable to locate package错误解决办法]]></title>
    <url>%2Farticles%2F53363%2F</url>
    <content type="text"><![CDATA[在Windows Terminal上集成了Ubuntu Terminal，安装小火车sl的时候，出现以下的错误： Ubuntu Unable to locate package大概意思就是找不到需要安装的包，执行以下命令：1sudo apt-get update 这个命令会访问apt配置文件中所有的源，会读取源的软件列表保存在本地。以后使用apt、apt-get命令去install的时候会遍历本机保存的软件列表，所以需要定期对软件列表进行update命令更新源的软件列表。在去执行刚才需要安装的命令。 拓展 1sudo apt-get upgrade 执行upgrade命令会把本机安装的packages与上述update更新的软件列表进行比对，如果版本低于软件列表，会进行更新操作。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue入门系列-VUE全家桶架构图]]></title>
    <url>%2Farticles%2F54029%2F</url>
    <content type="text"><![CDATA[前段时间在慕课网学习了基础的VUE视频，受益匪浅啊，决定把自己从VUE入门的学习过程写一个系列的文章做一个分享，如果学习过程有错误的理解或者有什么记录不对的地方，可以留言进行交流。 VUE 从这个架构图上可以看出，我把VUE分为4个部分，分别是： 基础环境 VUE基础知识 VUE其他 部署最后一个是要做一个实战，实现todolist的功能，后端代码打算用python3实现API对接。 持续更新中。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[413 Request Entity Too Large]]></title>
    <url>%2Farticles%2F60121%2F</url>
    <content type="text"><![CDATA[在发布的pyhton web项目上传2M的文件，提示413 Request Entity Too Large，请求实体过大也就是requests的Content-Length过大，记得当时本机开发的时候没有报过这个问题，为何上线就有了，大概率是域名、nginx那的问题。 Nginx 确认问题出处之后就好解决，baidu查了一下，是因为nginx的配置问题，找到云服务器nginx的配置：/etc/nginx/nginx.conf在http配置处添加1client_max_body_size 100M; 重启nginx，搞定。]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openpyxl写入性能的比较]]></title>
    <url>%2Farticles%2F24240%2F</url>
    <content type="text"><![CDATA[简单比较一下openpyxl在行写入与单元格写入性能上的对比。 Python Excel 简述 之前一直用xlrd、xlwt处理表格，但是发现限制台，超过了65535就不能读取了，改用openpyxl，了解了一下之后，发现openpyxl可以行写入，测试一下行写入与单元格写入二者的性能。 样本 表格元数据176233行、7列，数据包含字符串类型、数字、时间等常见类型。 试验体 PC：MacOSopenpyxl版本：3.0.7 源代码 123456789101112131415161718192021222324252627282930313233import datetimeimport openpyxl# 读取reader_workbook = openpyxl.load_workbook(&apos;data/LLBB_GRCKYE1.xlsx&apos;)sheet = reader_workbook.get_sheet_by_name(reader_workbook.sheetnames[0])sheet_row = sheet.max_rowsheet_col = sheet.max_column# ===================================# 行写入start1 = datetime.datetime.now()new_wb = openpyxl.Workbook()new_sheet = new_wb.create_sheet(title=&apos;Sheet&apos;, index=0)for row in sheet.values: new_sheet.append(row)new_wb.save(&apos;result/res2.xlsx&apos;)end1 = datetime.datetime.now()print((end1-start1).seconds)# ===================================# 单元格写入start2 = datetime.datetime.now()new_wb = openpyxl.Workbook()new_sheet = new_wb.create_sheet(title=&apos;Sheet&apos;, index=0)for row in range(1, sheet_row + 1, 1): for col in range(1, sheet_col + 1, 1): new_sheet.cell(row=row, column=col, value=sheet.cell(row=row, column=col).value )new_wb.save(&apos;result/res3.xlsx&apos;)end2 = datetime.datetime.now()print((end2-start2).seconds) 比较结果 单位：s 类别 第1次 第2次 第3次 第4次 第5次 第6次 第7次 第8次 第9次 第10次 平均值 行 25 26 28 29 27 28 27 26 26 26 26.8 单元格 26 28 30 28 30 29 27 27 26 29 28.0 总结 总体来说，大数据量可以看出行写入的速率较快，如果是数据量在几万行，性能都差不多，而且行写入代码也比较简单。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决Python处理Excel65535的问题]]></title>
    <url>%2Farticles%2F26307%2F</url>
    <content type="text"><![CDATA[问题描述使用Python去处理表格的时候，居然报错，提示为：undefined Python 基于xlrd、xlwt进行Excel的处理，其包中对单个Sheet限制最大行数为65535，当读写数据超出这个范围就会出现如上错误。 解决方案 可以使用openpyxl包，其最大行数为1048576，存储的文件类型为xlsx，但是弊端就是不能读取xls老的Excel格式文件。对于这个，我在项目中想了一个解决方案，判断是xls格式就用xlrd、xlwt包的方法；xlsx就用openpyxl。如果是xls并且行数超过65536，让用户上传xlsx格式的文件，网上有xls、xlsx格式的转换，有需要的可以找找。 如果使用openpyxl读取.xls文件，报错：123raise InvalidFileException(msg)openpyxl.utils.exceptions.InvalidFileException: openpyxl does not support the old .xls file format,please use xlrd to read this file, or convert it to the more recent .xlsx file format.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap的动态icon]]></title>
    <url>%2Farticles%2F63837%2F</url>
    <content type="text"><![CDATA[Bootstrap图标使用的是Font Awesome，加上基本的class可以产生动画效果，让页面看起来更加酷炫。 Bootstrap icon 实现代码：1234567891011&lt;div class=&quot;fa-5x&quot;&gt; &lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-refresh fa-spin&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-cog fa-spin&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-spinner fa-pulse&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-refresh fa-pulse&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-cog fa-pulse&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-spinner fa-rotate-90&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-refresh fa-rotate-90&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-cog fa-rotate-90&quot;&gt;&lt;/i&gt;&lt;/div&gt; fa-spin：让icon图标不停的动态旋转 fa-pulse：图标以八步为周期进行旋转，比较适合表示刷新、加载等功能的图标，如.fa-spinner、.fa-refresh、.fa-cog等 fa-rotate-xx：图标以某个角度进行选择 fa-flip-horizontal：水平翻转 fa-flip-vertical：垂直翻转 fa-3x：图标大小的设置，有fa-x、fa-2x、fa-3x，想要多大有多大，使用默认大小fa-x居多]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA的Error:loading:xxxx\jvm.dll问题解决]]></title>
    <url>%2Farticles%2F35460%2F</url>
    <content type="text"><![CDATA[问题描述： 在服务器执行java环境的时候，发现报以上的错误：Error: loading: xxxx\jvm.dll，记得在服务器坏之前还是好的，修复了之后就变成这样了，不管咋样，修复好才是王道。 解决方案 直接修改path环境变量，把%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin;放到path变量的最前面。 解决过程 首先，报Error: loading: xxxx\jvm.dll这个文件的问题，正常java的环境应该回去找安装好的jvm.dll文件。 于是，我把这个对应指定的文件重命名，发现报另一个的错误：Error: missing server‘ JVM atXXXXXbin\server\jvm.dll‘. 初步设想应该是JAVA环境配置出了问题，于是把JAVA环境重新配置了一边，好了。 原因 应该是JAVA去找jvm.dll的时候，从PATH的顺序去找，把JAVA配置的路径放在最前面，先从JAVA环境找起。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ERROR集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows系统服务器之间的大文件互传]]></title>
    <url>%2Farticles%2F555%2F</url>
    <content type="text"><![CDATA[简述 在服务器之间经常有文件要进行传输，而且很多情况都是10G以上的大文件，服务器操作系统主流为Windows、Linux、Unix，今日用到了两台Windows服务器之间进行大文件传输，总结一下，分享出来。 服务器 文件传输 Windows 环境 id ip name Version 1 16.19.209.67 Windows Windows Server2008 R2 1 16.19.209.100 Windows Windows Server2008 R2 两台服务器为内网连同的两台机器。 方案 文件共享 文件夹开启高级共享，右键-&gt;属性-&gt;共享-&gt;高级共享 使用MSTSC进行连接，快捷键WIN+R，输入MSTSC，输入相关远程电脑的连接信息 连接之后再另一台电脑的计算机顶部地址栏输入共享服务器的ip 选择共享的文件夹，输入对应的账号、密码 复制到本地 xcopy Win系统自带的命令，启用CMD控制台。12345678# 格式net use \\IP地址 密码/user:账户# 示例net use \\16.19.209.100 Aqwe123/user:Administratorxcopy /e E:\BACKUP_MZLPAS\*.* \\16.19.209.100\E$\BACKUP_MZLPAS\ /y/y 表示直接覆盖原来的文件，不需要询问/e 表示复制文件夹下所有文件及文件夹 前提是这个文件夹开启共享。 python 服务器具有python环境，利用python命令开启一个web服务，连接方进行下载。12# python2python -m SimpleHTTPServer XXXX 其中，XXXX为端口。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>文件传输</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2报错：SQLCODE=-668, SQLSTATE=57016]]></title>
    <url>%2Farticles%2F34462%2F</url>
    <content type="text"><![CDATA[今日跑存储过程，很简单的一个存储过程，从来没包错过，居然报错了，提示SQLCODE：-20244，网上查资料发现没有这个SQLCODE，于是一个表一个表的SELECT，发现其中有个表报错：SQLCODE=-668, SQLSTATE=57016 DB2 SQLCODE 当存储过程出现：SQLCODE=-668, SQLSTATE=57016，说明表处于“暂挂状态”，需要load + reorg处理下就可以了。 1.查询表的状态，DB2 CMD执行：db2 load query table pas.jxdx_dkzh_bf 这个错误是：表处于”装入暂挂”状态。 2.执行以下对应的命令用来解除暂挂状态。 12345# Linuxdb2 load from /dev/null of del terminate into pas.jxdx_dkzh_bf# Windowsdb2 load from E:/test.txt of del terminate into pas.jxdx_dkzh_bf 根据系统自行选择要执行的命令，Windows需要在命令指定的目录下建立一个空文件。 3.然后 1db2 reorg table pas.jxdx_dkzh_bf 4.测试select语句，如果可以了就可以执行存储过程了。 注意要点 table后面跟的表名格式：策略.表名]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PDF转WORD]]></title>
    <url>%2Farticles%2F28829%2F</url>
    <content type="text"><![CDATA[简介 利用业余时间参加了公司的创新项目活动，里面有一个PDF转WORD的功能，分享出来。主要使用了python3版本的pdf2docx包，包的使用也很简单，基于基础功能写写逻辑、封装下页面就可以做出web功能了。 Python实战 PDF转WORD 环境 id name Version 1 Python 3.7 pdf2docx只支持python3。 安装依赖12345678910docx==0.2.4fitz==0.0.1.dev2fonttools==4.24.4idna==2.10lxml==4.6.3numpy==1.21.0opencv-python==4.5.2.54pdf2docx==0.5.2PyMuPDF==1.16.14python-docx==0.8.11 官方代码 示例一 转换整个文档。123456789from pdf2docx import Converterpdf_file = &apos;/path/to/sample.pdf&apos;docx_file = &apos;path/to/sample.docx&apos;# convert pdf to docxcv = Converter(pdf_file)cv.convert(docx_file) # all pages by defaultcv.close() 示例二 转换文档指定页。12345678# convert from the second page to the end (by default)cv.convert(docx_file, start=1)# convert from the first page (by default) to the third (end=3, excluded)cv.convert(docx_file, end=3)# convert from the second page and the thirdcv.convert(docx_file, start=1, end=3) 示例三 多进程转换。1cv.convert(docx_file, multi_processing=True, cpu_count=4) 示例四 加密文档转换。123cv = Converter(pdf_file, password)cv.convert(docx_file)cv.close() 参考学习官网：https://dothinking.github.io/pdf2docx/index.html 项目转换代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#!/usr/bin/python# -*- coding: utf-8 -*-&quot;&quot;&quot;--------------------------------------------------------------describe:base_info: __version__ = &quot;v.10&quot; __author__ = &quot;mingliang.gao&quot; __time__ = &quot;2020/10/1 9:31 AM&quot; __mail__ = &quot;gaoming971366@163.com&quot;--------------------------------------------------------------&quot;&quot;&quot;# ------------------------------------------------------------# usage: /usr/bin/python file_lib.py# ------------------------------------------------------------import osfrom multiprocessing import cpu_countfrom pdf2docx import Converterfrom deploy.utils.utils import get_storefilename_by_md5, \ get_base_dir, get_now, mk_dirsfrom deploy.config import TRANSFER_BASE_DIRclass FileLib(object): ALLOWED_EXTENSIONS = [ &apos;.doc&apos;, &apos;.docx&apos;, &apos;.xls&apos;, &apos;.xlsx&apos;, &apos;.ppt&apos;, &apos;.pptx&apos;, &apos;.pdf&apos;, &apos;.txt&apos;, ] def __init__(self): self.cpu_count = cpu_count() def allow_format_fmt(self, fname): return True if (os.path.splitext(fname)[1]).lower() in self.ALLOWED_EXTENSIONS else False def store_file(self, file, compress=False, is_md5_store_name=True): if not file: return False, &#123;&apos;message&apos;: &apos;没有发现文件&apos;&#125; try: # 文件存储初始化 now_date = get_now(format=&quot;%Y-%m-%d&quot;) real_store_dir = get_base_dir() + TRANSFER_BASE_DIR + now_date store_dir = os.path.join(TRANSFER_BASE_DIR + now_date) if not os.path.exists(real_store_dir): mk_dirs(real_store_dir) file_name = file.filename md5_v, store_file_name = get_storefilename_by_md5(file_name, ftype=&apos;file&apos;) _real_file = os.path.join(real_store_dir, store_file_name) \ if is_md5_store_name else os.path.join(real_store_dir, file_name) file.save(_real_file) # 压缩 # if compress: # pass return True, &#123;&apos;store_name&apos;: store_file_name if is_md5_store_name else file_name, &apos;md5&apos;: md5_v, &apos;path&apos;: os.path.join(store_dir, store_file_name) if is_md5_store_name else os.path.join(store_dir, file_name), &apos;message&apos;: &apos;success&apos;&#125; except: return False, &#123;&apos;message&apos;: &apos;文件存储发生错误&apos;&#125; def pdf_2_word(self, file_pdf: str, docx_name: str = None, start: int = 0, end: int = None, pages: list = None, is_multi_processing: bool = False, cpu_count: int = 1): if not file_pdf: return False, &#123;&apos;message&apos;: &apos;Pdf file is null&apos;, &apos;tar_file&apos;: &apos;&apos;&#125; src_file = get_base_dir() + file_pdf if not os.path.exists(src_file): return False, &#123;&apos;message&apos;: &apos;Pdf file is not exist&apos;, &apos;tar_file&apos;: &apos;&apos;&#125; if not os.path.isfile(src_file): return False, &#123;&apos;message&apos;: &apos;Pdf file is not file&apos;, &apos;tar_file&apos;: &apos;&apos;&#125; if docx_name: docx_names = os.path.splitext(docx_name) if len(docx_names) &lt; 2: return False, &#123;&apos;message&apos;: &apos;Pdf file name not have suffix&apos;, &apos;tar_file&apos;: &apos;&apos;&#125; src_path, src_name = os.path.split(src_file) transfer_name_pdf = docx_name if docx_name else src_name transfer_name_word = os.path.splitext(transfer_name_pdf)[0] + &apos;.docx&apos; docx_file = os.path.join(src_path, transfer_name_word) rel_path = os.path.split(file_pdf)[0] tar_file = os.path.join(rel_path, transfer_name_word) # convert pdf to docx cv = Converter(src_file) # all pages by default if is_multi_processing and cpu_count &gt;= self.cpu_count: cpu_count = self.cpu_count cv.convert(docx_file, multi_processing=True, cpu_count=cpu_count) \ if is_multi_processing else cv.convert(docx_file) cv.close() return True, &#123;&apos;message&apos;: &apos;success&apos;, &apos;tar_file&apos;: tar_file&#125;]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7安装python3]]></title>
    <url>%2Farticles%2F64746%2F</url>
    <content type="text"><![CDATA[简介 python2已经不维护更新了，不管是DEV开发、还是服务器运行环境，python3推广是迟早的事，学习一下在Centos7系统上安装python3。 环境 id name Version 1 Centos CentOS Linux release 7.5.1804 (Core) 2 Python 3.7 安装步骤 检查 查看目前服务器上的现有版本。12which pythonpython --version 下载 没有wget的命令的，可以装一下，很有用。12345# wget安装yum install wget# 下载python3版本wget https://www.python.org/ftp/python/3.7.11/Python-3.7.11.tgz 可以自由选择python3的版本 解压 1tar -xvf Python-3.7.11.tgz 创建编译安装目录 1mkdir /usr/local/python3 编译 123cd Python-3.7.11./configure --prefix=/usr/local/python3make &amp;&amp; make install 创建软连 因为服务器已经存在一个python的版本了，所以命名为python3进行区分。12ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 测试 12python3 -Vpip3 -V]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pip升级之后No module named 'pip._internal'问题解决]]></title>
    <url>%2Farticles%2F19559%2F</url>
    <content type="text"><![CDATA[问题起源项目使用virtualenv创建虚拟环境，用来做项目的运行环境，发现创建新环境之后，使用pip install 包的时候出现一下错误: ModuleNotFoundError: No module named ‘pip._internal’。网上查找了很久，记录一下解决的方案。 PIP 解决方案使用python对pip进行升级。12source .venv/bin/activatepython -m pip install --upgrade pip 参考学习gitub解决讨论：https://github.com/pypa/pip/issues/5373]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PIP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap之FileInput的基础学习]]></title>
    <url>%2Farticles%2F24956%2F</url>
    <content type="text"><![CDATA[最近在做一个上传文件的功能，自己写的样式那叫一个难看啊。。。。。上网找了一下，发现有Bootstrap封装好的、而且重要的是还免费的FileInput，拿来用就可以了。 Bootstrap FileInput 示例官网：https://plugins.krajee.com/file-basic-usage-demo中文：http://www.bootstrap-fileinput.com/examples.html 安装安装有很多种方式，看中文官网。我直接github上下载的源码文件，直接引用，我使用的是python+flask框架的模板。123456&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;plugins/bootstrap-fileinput/js/fileinput.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;plugins/bootstrap-fileinput/css/fileinput.min.css&apos;) &#125;&#125;&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;plugins/bootstrap-fileinput/themes/fas/theme.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;plugins/bootstrap-fileinput/themes/explorer-fas/theme.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;plugins/bootstrap-fileinput/themes/explorer-fas/theme.min.css&apos;) &#125;&#125;&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;plugins/bootstrap-fileinput/js/locales/zh.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt; 使用 HTML代码 我才用了modal+fileinput的方式使用。123&lt;div class=&quot;modal-body&quot;&gt; &lt;input id=&quot;fileinput_1&quot; type=&quot;file&quot;&gt;&lt;/div&gt; JS代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125$(function()&#123; $(&apos;[data-toggle=&quot;tooltip&quot;]&apos;).tooltip(); // 也可以使用 $(&apos;#text&apos;).tooltip(); // bootstrap fileinput: https://github.com/kartik-v/bootstrap-fileinput /* init default, config: http://www.bootstrap-fileinput.com/options.html showUpload: true, //是否显示上传按钮 showCaption: true, //是否显示标题 showPreview: true, //是否显示文件预览 showRemove: true, //是否显示删除/清除按钮 showCancel: true, //是否显示文件上传取消按钮 showClose: true, //是否显示预览界面的关闭图标 showUploadedThumbs: true, //否在预览窗口中持续显示已经上传的文件缩略图 showBrowse: true, //是否显示文件浏览按钮 dropZoneEnabled: true, //是否显示拖拽区域 browseOnZoneClick: true, //是否在点击预览区域时触发文件浏览/选择 uploadClass: &quot;btn btn-primary&quot;, //上传按钮样式 removeClass: &quot;btn btn-danger&quot;, //移除按钮样式 maxImageWidth: 1000,//图片的最大宽度 maxImageHeight: 1000,//图片的最大高度 minImageWidth: 30, //图片的最小宽度 minImageHeight: 30, //图片的最小高度 overwriteInitial: false, // 是否要覆盖初始预览内容和标题设置 previewFileIconSettings: &#123; &apos;doc&apos;: &apos;&lt;i class=&quot;fa fa-file-word-o text-primary&quot;&gt;&lt;/i&gt;&apos;, &apos;xls&apos;: &apos;&lt;i class=&quot;fa fa-file-excel-o text-success&quot;&gt;&lt;/i&gt;&apos;, &apos;ppt&apos;: &apos;&lt;i class=&quot;fa fa-file-powerpoint-o text-danger&quot;&gt;&lt;/i&gt;&apos;, &apos;jpg&apos;: &apos;&lt;i class=&quot;fa fa-file-photo-o text-warning&quot;&gt;&lt;/i&gt;&apos;, &apos;pdf&apos;: &apos;&lt;i class=&quot;fa fa-file-pdf-o text-danger&quot;&gt;&lt;/i&gt;&apos;, &apos;zip&apos;: &apos;&lt;i class=&quot;fa fa-file-archive-o text-muted&quot;&gt;&lt;/i&gt;&apos;, &#125; uploadAsync: true, //bool whether the batch upload of multiple files will be asynchronous/in parallel. Defaults to true. */ // theme: bs5 fa fas gly explorer explorer-fa explorer-fas $(&quot;#fileinput_1&quot;).fileinput(&#123; theme: &apos;fas&apos;, language: &apos;zh&apos;, //设置语言 uploadUrl: &apos;/common/upload_file/&apos;, //上传的地址 uploadAsync: false, allowedFileExtensions: [&apos;pdf&apos;], //允许的文件拓展类型 browseOnZoneClick: true, //是否在点击预览区域时触发文件浏览/选择 frameClass: &apos;krajee-default&apos;, browseClass: &quot;btn btn-primary&quot;, //按钮样式 maxFileSize: 0,//单位为kb，如果为0表示不限制文件大小 minFileCount: 0, maxFileCount: 1, //表示允许同时上传的最大文件个数 enctype: &apos;multipart/form-data&apos;, uploadExtraData:function()&#123; return &#123;&apos;transfer&apos;: &apos;1&apos;&#125;; &#125; &#125;); $(&quot;#fileinput_m&quot;).fileinput(&#123; theme: &apos;explorer-fas&apos;, language: &apos;zh&apos;, //设置语言 uploadUrl: &apos;/common/upload_file/&apos;, //上传的地址 uploadAsync: false, allowedFileExtensions: [&apos;pdf&apos;], //允许的文件拓展类型 browseOnZoneClick: true, //是否在点击预览区域时触发文件浏览/选择 frameClass: &apos;krajee-default&apos;, browseClass: &quot;btn btn-primary&quot;, //按钮样式 maxFileSize: 0,//单位为kb，如果为0表示不限制文件大小 minFileCount: 0, enctype: &apos;multipart/form-data&apos;, //maxFileCount: 5, //表示允许同时上传的最大文件个数 hideThumbnailContent: true, uploadExtraData:function()&#123; return &#123;&apos;transfer&apos;: &apos;1&apos;&#125;; &#125; &#125;);&#125;);// 单文件上传监听$(&apos;#fileinput_1&apos;).on(&apos;fileuploaded&apos;, function(event, data, previewId, index) &#123; var status_id = data.response.status_id; if (status_id == 100)&#123; toastr.success(data.response.msg, &quot;温馨提示：&quot;); &#125;else if(200 &lt; status_id &amp;&amp; status_id &lt; 500)&#123; toastr.warning(data.response.msg, &quot;温馨提示：&quot;); &#125;else&#123; toastr.error(data.response.msg, &quot;温馨提示：&quot;); &#125;&#125;);$(&apos;#fileinput_1&apos;).on(&apos;filebatchuploadsuccess&apos;, function(event, data, previewId, index) &#123; var status_id = data.response.status_id; if (status_id == 100)&#123; toastr.success(data.response.msg, &quot;温馨提示：&quot;); &#125;else if(200 &lt; status_id &amp;&amp; status_id &lt; 500)&#123; toastr.warning(data.response.msg, &quot;温馨提示：&quot;); &#125;else&#123; toastr.error(data.response.msg, &quot;温馨提示：&quot;); &#125;&#125;);// 多文件上传监听$(&apos;#fileinput_m&apos;).on(&apos;fileuploaded&apos;, function(event, data, previewId, index) &#123; var status_id = data.response.status_id; if (status_id == 100)&#123; toastr.success(data.response.msg, &quot;温馨提示：&quot;); &#125;else if(200 &lt; status_id &amp;&amp; status_id &lt; 500)&#123; toastr.warning(data.response.msg, &quot;温馨提示：&quot;); &#125;else&#123; toastr.error(data.response.msg, &quot;温馨提示：&quot;); &#125;&#125;);$(&apos;#fileinput_m&apos;).on(&apos;filebatchuploadsuccess&apos;, function(event, data, previewId, index) &#123; var status_id = data.response.status_id; if (status_id == 100)&#123; toastr.success(data.response.msg, &quot;温馨提示：&quot;); &#125;else if(200 &lt; status_id &amp;&amp; status_id &lt; 500)&#123; toastr.warning(data.response.msg, &quot;温馨提示：&quot;); &#125;else&#123; toastr.error(data.response.msg, &quot;温馨提示：&quot;); &#125;&#125;);// 监听fileinput modal关闭重新拉取数据$(&apos;#fileInputModal&apos;).on(&apos;hidden.bs.modal&apos;, function () &#123; draw_table();&#125;);$(&apos;#manyFileInputModal&apos;).on(&apos;hidden.bs.modal&apos;, function () &#123; draw_table();&#125;); 后台python 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107view:@common.route(&apos;/upload_file/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;], strict_slashes=False)def upload_file(): if request.method == &apos;GET&apos;: return Status( 201, &apos;failure&apos;, u&apos;upload_file API请求方法错误&apos;, &#123;&#125; ).json() try: files = request.files.getlist(&apos;file_data&apos;) res = CommonService().upload_file(files, transfer=request.values.get(&apos;transfer&apos;), is_start_fmt=False)################################################################################################################################################## controller:def upload_file(self, files, transfer, is_start_fmt=True): if not files: return Status( 206, &apos;failure&apos;, u&apos;没有发现上传文件&apos;, &#123;&#125; ).json() # check office_transfer office_transfer_models = self.enums_bo.get_all_by_name(name=&apos;office_transfer&apos;) office_transfers = list() for ot in office_transfer_models: if not ot or not ot.sub_name: continue office_transfers.append(ot.sub_name) if transfer not in office_transfers: return Status( 203, &apos;failure&apos;, u&apos;transfer值参数不合法&apos;, &#123;&#125; ).json() success_list = list() failure_list = list() for f in files: if not f: continue f_name = f.filename if is_start_fmt and not self.file_lib.allow_format_fmt(f_name): failure_list.append(f_name) continue is_ok, store_msg = self.file_lib.store_file(f, compress=False, is_md5_store_name=False) if not is_ok: failure_list.append(f_name) continue store_msg[&apos;name&apos;] = f_name is_to_db = self.__store_file_to_db(store_msg, transfer) success_list.append(f_name) if is_to_db else failure_list.append(f_name) if files and len(failure_list) == len(files): return Status( 210, &apos;failure&apos;, u&apos;文件上传失败&apos;, &#123;&#125; ).json() if failure_list: return Status( 303, &apos;failure&apos;, u&apos;文件上传成功：%s，失败：%s&apos; % (len(success_list), len(failure_list)), &#123;&#125; ).json() return Status( 100, &apos;success&apos;, u&apos;文件上传成功&apos;, &#123;&#125; ).json()################################################################################################################################################## services:def store_file(self, file, compress=False, is_md5_store_name=True): if not file: return False, &#123;&apos;message&apos;: &apos;没有发现文件&apos;&#125; try: # 文件存储初始化 now_date = get_now(format=&quot;%Y-%m-%d&quot;) real_store_dir = get_base_dir() + TRANSFER_BASE_DIR + now_date store_dir = os.path.join(TRANSFER_BASE_DIR + now_date) if not os.path.exists(real_store_dir): mk_dirs(real_store_dir) file_name = file.filename md5_v, store_file_name = get_storefilename_by_md5(file_name, ftype=&apos;file&apos;) _real_file = os.path.join(real_store_dir, store_file_name) \ if is_md5_store_name else os.path.join(real_store_dir, file_name) file.save(_real_file) # 压缩 # if compress: # pass return True, &#123;&apos;store_name&apos;: store_file_name if is_md5_store_name else file_name, &apos;md5&apos;: md5_v, &apos;path&apos;: os.path.join(store_dir, store_file_name) if is_md5_store_name else os.path.join(store_dir, file_name), &apos;message&apos;: &apos;success&apos;&#125; except: return False, &#123;&apos;message&apos;: &apos;文件存储发生错误&apos;&#125; 参考学习 中文官网：http://www.bootstrap-fileinput.com/ bootstrap-fileinput源码：https://github.com/kartik-v/bootstrap-fileinput bootstrap-fileinput在线API：http://plugins.krajee.com/file-input bootstrap-fileinput Demo展示：http://plugins.krajee.com/file-basic-usage-demo]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Brew安装与常用命令]]></title>
    <url>%2Farticles%2F12880%2F</url>
    <content type="text"><![CDATA[问题背景 MacOS系统安装软件使用Brew进行管理，这里主要自己记录一下Brew不常用的命令，方便自己查找与使用。 安装item2直接执行。1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; 等待执行结果，查看版本：1brew --version brew安装软件目录：/usr/local/Cellar 命令 搜索 1brew search xxx 安装 1brew install xxxx 卸载 1brew uninstall xxxx 查询 1brew info xxxx 主要查看具体的软件信息、下载地址、安装依赖、基础信息等等。 更新 1brew update xxxx 查看安装列表 1brew list 检测新版本 1brew outdated xxxx 升级 1234# 升级所有 当然也可以指定升级brew upgrade# 升级指定软件brew upgrade xxxx 打开官网 1brew home 清理 1brew cleanup 更多命令 1man brew 参考官网：https://brew.sh/]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2自动化全量备份]]></title>
    <url>%2Farticles%2F16336%2F</url>
    <content type="text"><![CDATA[项目上使用的是DB2数据库，全库备份一直是手动备份，自动化的东西没有代码解决不了的问题，初识bat自动化脚本，写的也很简单，分享一下。 DB2 backup 自动化 实现流程 设置执行命令的编码，这个与运行服务器db2cmd的编码保持一致，设置936，如果是windows8、10等设置65001 备份信息的配置，包含数据库名称、用户、密码、存储目录、日志文件 存储目录不存在新建、日志文件不存在新建 db2全库备份 记录执行结果 目前实现了基础的备份功能，后续加上彩色打印、自动化删除指定日期前备份文件功能，持续更新中。。。。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100@echo off:: CMD默认为65001编码，使用db2cmd执行需要设置936chcp 936SETLOCAL EnableDelayedExpansionfor /F &quot;tokens=1,2 delims=#&quot; %%a in (&apos;&quot;prompt #$H#$E# &amp; echo on &amp; for %%b in (1) do rem&quot;&apos;) do ( set &quot;DEL=%%a&quot;)title DB2 database backupclsREM +-------------------------------------------------------------+REM + Base info: +REM + -- auhtor: mingliang.gao +REM + -- time: 2021/05/31 +REM + -- version: v1.0.1 +REM + -- system: Windows +REM + -- desc: DB2 Windows all backup script +REM + +REM + Execute method: +REM + -- auto: db2cmd + task +REM + -- manual: all path run the script with db2cmd +REM + +REM + Debug: +REM + -- 自定义位置加入pause +REM + +REM + 打印乱问题: +REM + -- 1.设置编码与db2cmd编码一致，根据服务器db2cmd编码设定, +REM + db2cmd右键-&gt;属性-&gt;选项中查看编码 +REM + -- 2.文件用文本编辑器打开，另存为ANSI编码格式 +REM + +REM + Useage: +REM + -- 1.修改chcp编码，以运行服务器db2cmd编码为准 +REM + -- 2.修改backup config +REM + -- 3.选择手动或者自动运行方式 +REM + +REM + Others: +REM + -- 1.设置定时任务时，程序选择db2cmd命令，参数选择备份脚本 +REM +-------------------------------------------------------------+REM +-------------------------------------------------------------+REM + Backup info: +REM + -- ip: 16.19.209.67 +REM + -- task: 每周六晚上11点备份 +REM +-------------------------------------------------------------+REM +-------------------------------------------------------------+REM backup configset db=mzlpasset user=passet password=passet backup_dir=E:\BACKUP_MZLPASset backup_log=%backup_dir%\backup.logREM +-------------------------------------------------------------+for /f &quot;tokens=1-4 delims=/-\ &quot; %%a in (&apos;date /t&apos;) do ( set week=%%a set year=%%b set month=%%c set day=%%d)set curdate=%year%%month%%day%echo ========================start backup========================:: print base informationsecho 当前时间: %date% %time%call :ColorText 0a &quot;blue&quot;echo 数据库: %db%echo 用户: %user%echo 密码: %password%echo 备份目录: %backup_dir%echo 备份日志: %backup_log%:: if not exist dir or log file, createdif not exist %backup_dir% ( mkdir %backup_dir%)if not exist %backup_log% ( echo %db% backup log &gt;&gt; %backup_log%):: backup commanddb2 connect to %db% user %user% using %password%db2 force applications alldb2 backup db %db% to %backup_dir% PARALLELISM 2 COMPRESSecho.:: record the backup resultif errorlevel 0 ( echo %curdate%: success echo %curdate%: success &gt;&gt; %backup_log%) else ( echo %curdate%: failed echo %curdate%: failed &gt;&gt; %backup_log% exit)echo =========================end backup=========================pauseexit]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win Server服务器EventLog中的6005、6006、6008、6009、6013]]></title>
    <url>%2Farticles%2F54459%2F</url>
    <content type="text"><![CDATA[背景 早上访问web项目，发现挂掉了，以为是内网网线的问题（本人电脑内外网跳板机），主要有线转换头经常出现问题，但是整了半天依然不行，于是打开服务器一看，什么东西都没了，一看就是重启了，于是需要查找到什么时候重启的，学会了查看系统的EventLog，记录一下用到的6005, 6006, 6008, 6009, 6013。 Windows EventLog 功能查询查看系统的日志记录，查询服务器发生了哪些明细，所在位置： 我的电脑 &gt; 管理 &gt; 服务管理器 &gt; 诊断 &gt; 事件查看器 &gt; windows日期 &gt; 系统 主要功能说明： 目录：EventLog所在的功能树 事件日志：服务器的事件日志历史记录 事件明细：对于历史记录的详细说明 功能区：对EventLog的常用功能，主要用到筛选当前日志 点击上面的历史事件，可以在明细区域查看具体情况。 筛选功能利用筛选功能选出需要的日志，主要有3大筛选条件： 记录时间：可以选取近1h、12h、24h、7天、30天 事件来源：选取eventlog、Eventlog 事件ID：输入需要过滤的事件ID EventLog ID ID level ｜ describe 6005 信息 事件服务日期启动（开机） 6006 信息 事件服务日期关闭（关机） 6008 错误 上一次系统的 4:12:37 在 ?2021/?5/?21 上的关闭是意外的（记录系统意外关机事件） 6009 信息 Microsoft (R) Windows (R) 6.01. 7601 Service Pack 1 Multiprocessor Free（服务器开机的一些信息） 60013 信息 记录操作系统运行了多久时间，24h运行一次 破案了，原来是断电了，服务器来电后自己又自己起来了，但是服务全没了。 记录遇到的各种Eventlog ID，持续更新中。。。。。。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FreeFileSync探索]]></title>
    <url>%2Farticles%2F15964%2F</url>
    <content type="text"><![CDATA[一款备份软件可以运行在win、macos、linux上的文件备份软件。 官网：https://freefilesync.org/ 有兴趣或者需要的同学可以详细研究一下。。。。。。 Synchronize Files and FoldersKey featuresFreeFileSync is a folder comparison and synchronization software that creates and manages backup copies of all your important files. Instead of copying every file every time, FreeFileSync determines the differences between a source and a target folder and transfers only the minimum amount of data needed. FreeFileSync is Open Source software, available for Windows, macOS, and Linux.]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>FreeFileSync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2存储过程异常处理]]></title>
    <url>%2Farticles%2F40004%2F</url>
    <content type="text"><![CDATA[记录下DB2数据库存储过程对异常的处理，DECLARE声明异常的方式。 DB2 存储过程 SQLEXCEPTIOIN DECLARE 语法糖 1DECLARE [handler-type] HANDLER FOR [condition] [handler-action] handler-type 异常处理器类型(handler-type)有以下几种： CONTINUE：处理器完成handler-action操作之后，继续执行产生这个异常语句的下一条语句，说白了就是执行一下handler-action。 EXIT：处理器完成handler-action操作之后，存储过程终止，并将handler-action操作结果控制返回给调用者。 UNDO：处理器操作handler-action执行之前，DB2会回滚存储过程中执行的SQL操作。在处理器操作完成之后，存储过程会终止，并将控制返回给调用者。 condition 异常处理器可以处理基于特定SQLSTATE值的定制异常，或者处理预定义异常的类。预定义的3种异常如下所示： NOT FOUND：标识导致SQLCODE值为+100或者SQLSATE值为02000的异常。这个异常通常在SELECT没有返回行的时候出现。 SQLEXCEPTIOIN：标识导致SQLCODE值为负的异常。 SQLWARNING：标识导致警告异常或者导致+100以外的SQLCODE正值的异常。 handler-action handler-action为定义处理异常的sql语句，一般主要用来设定返回值、记录日志等操作。 实例 1234567declare exit handler for sqlexceptionbegin set i_code=sqlcode; set i_err_no=1; call SP_PASSYS_ERRHANDLE(v_proc_name,i_code); commit;end; i_code：sqlexception产生的错误代码sqlcode。 i_err_no：返回给调用者的返回值。 SP_PASSYS_ERRHANDLE：调用日志记录存储过程。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cygwin工具简介]]></title>
    <url>%2Farticles%2F28873%2F</url>
    <content type="text"><![CDATA[Get that Linux feeling - on Windows运行于Windows系统上可以运行Linux命令的shell。 Linux SHELL Windows 近5年依赖一直使用Macos系统，突然切换到WIN10多多少少还是有些不适应的，但是最不能忍受的是不能再电脑上使用命令去操作文件，很烦。。。。。。所以上网找了下，可以在WIN上运行并且使用Linux的shell还是不少的，我看了知乎上的比较，对于cygwin的评价还是可以的，同类的还有cmder、powershell、git-for-windows等等。 下载地址http://www.cygwin.com/ 安装安装：官网下载安装，目录：D:\cygwin64。 配置D:\cygwin64\binD:\cygwin64\sbin以上路径加入到系统path，让系统cmd也可以使用命令。 apt-cyg 安装 1.下载命令：https://github.com/transcode-open/apt-cyg2.解压文件，把apt-cyg命令复制到D:\cygwin64\bin3.重启cygwin，测试apt-cyg命令 常用参数 install 安装 remove 卸载 update 更新 download 下载软件但不安装 show 展示安装包的信息 list 列举已安装的软件 search/searchall 查询软件 感觉跟pip、yum、brew很像啊，可能这些玩意都大概类似把。。。 学习参考cygwin详解：https://www.cnblogs.com/feipeng8848/p/8555648.htmlapt-cyg命令详解：https://zhuanlan.zhihu.com/p/66930502cmder神器：https://zhuanlan.zhihu.com/p/28400466Windows命令工具大对比：https://www.zhihu.com/question/19739424 成功没有偶然，继续努力前行]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2存储过程备份]]></title>
    <url>%2Farticles%2F55299%2F</url>
    <content type="text"><![CDATA[基于Windows系统的db2自动化存储过程备份，每天一次，这样再也不用担心存储过程修改之后不能复原的问题了。主要使用到了routine这个命令。 DB2 存储过程 自动备份 项目的数据是基于DB2存储过程进行计算的，所以存储过程的修改、增加、删除是必须操作，为了防止复原进行自动化定时备份，主要分为2部分： 生成备份SQL 123select &apos;db2 get routine into &quot;D:\db_backup_procdures\20210507\&apos;||procname||&apos;.sar&quot; from procedure &apos;||procnamefrom SYSCAT.PROCEDURESwhere procschema = &apos;PAS&apos;; 其中，【D:\db_backup_procdures\20210507\】为存储过程存放的路径，需要提前建立好（目前为手动备份模式）；【PAS】为SCHEMA。执行完毕后，会生成对应schema所有的存储过程存储SQL语句。 生成文件 将上一步生成的SQL复制到一个.bat文件，在第一行填写db2连接数据库语句，大致内容：123456db2 connect to mzlpas user pas using pasdb2 get routine into &quot;D:\db_backup_procdures\20210507\SP_APP_LOAD_CDSJY.sar&quot; from procedure SP_APP_LOAD_CDSJYdb2 get routine into &quot;D:\db_backup_procdures\20210507\SP_APP_LOAD_CKZH.sar&quot; from procedure SP_APP_LOAD_CKZHdb2 get routine into &quot;D:\db_backup_procdures\20210507\SP_APP_LOAD_DKZH.sar&quot; from procedure SP_APP_LOAD_DKZH... 把脚本放到db2cmd中进行执行，完成存储过程备份。 自动化备份脚本完成中，未完待续。。。。。。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rsync命令参数详解]]></title>
    <url>%2Farticles%2F22710%2F</url>
    <content type="text"><![CDATA[记录一下rsync命令的参数。 RSYNC 列举一些常用的参数： ID NAME ENGLISH CHINESE 1 –verbose, -v increase verbosity 详细模式输出 2 –quiet, -q suppress non-error messages 精简输出模式 3 –progress show progress during transfer 在传输时现实传输过程 4 –archive, -a archive mode is -rlptgoD (no -A,-X,-U,-N,-H) 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD 5 -compress, -z compress file data during the transfer 对备份的文件在传输时进行压缩处理 6 –delete delete extraneous files from dest dirs 删除那些DST中SRC没有的文件 7 –config=FILE specify alternate rsyncd.conf file 指定其他的配置文件，不使用默认的rsyncd.conf文件 8 –password-file=FILE read daemon-access password from FILE 从FILE中得到密码 9 –port=PORT listen on alternate port number 指定其他的rsync服务端口 10 –existing skip creating new files on receiver 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件 11 –partial keep partially transferred files 保留那些因故没有完全传输的文件，以是加快随后的再次传输 12 –daemon run as an rsync daemon 以daemon模型运行 13 –exclude=PATTERN exclude files matching PATTERN 指定排除不需要传输的文件模式 14 –exclude-from=FILE read exclude patterns from FILE 排除FILE中指定模式的文件 官网参数说明：https://download.samba.org/pub/rsync/rsync.1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154--debug=FLAGS fine-grained debug verbosity--stderr=e|a|c change stderr output mode (default: errors)--quiet, -q suppress non-error messages--no-motd suppress daemon-mode MOTD--checksum, -c skip based on checksum, not mod-time &amp; size--archive, -a archive mode is -rlptgoD (no -A,-X,-U,-N,-H)--no-OPTION turn off an implied OPTION (e.g. --no-D)--recursive, -r recurse into directories--relative, -R use relative path names--no-implied-dirs don&apos;t send implied dirs with --relative--backup, -b make backups (see --suffix &amp; --backup-dir)--backup-dir=DIR make backups into hierarchy based in DIR--suffix=SUFFIX backup suffix (default ~ w/o --backup-dir)--update, -u skip files that are newer on the receiver--inplace update destination files in-place--append append data onto shorter files--append-verify --append w/old data in file checksum--dirs, -d transfer directories without recursing--mkpath create the destination&apos;s path component--links, -l copy symlinks as symlinks--copy-links, -L transform symlink into referent file/dir--copy-unsafe-links only &quot;unsafe&quot; symlinks are transformed--safe-links ignore symlinks that point outside the tree--munge-links munge symlinks to make them safe &amp; unusable--copy-dirlinks, -k transform symlink to dir into referent dir--keep-dirlinks, -K treat symlinked dir on receiver as dir--hard-links, -H preserve hard links--perms, -p preserve permissions--executability, -E preserve executability--chmod=CHMOD affect file and/or directory permissions--acls, -A preserve ACLs (implies --perms)--xattrs, -X preserve extended attributes--owner, -o preserve owner (super-user only)--group, -g preserve group--devices preserve device files (super-user only)--specials preserve special files-D same as --devices --specials--times, -t preserve modification times--atimes, -U preserve access (use) times--open-noatime avoid changing the atime on opened files--crtimes, -N preserve create times (newness)--omit-dir-times, -O omit directories from --times--omit-link-times, -J omit symlinks from --times--super receiver attempts super-user activities--fake-super store/recover privileged attrs using xattrs--sparse, -S turn sequences of nulls into sparse blocks--preallocate allocate dest files before writing them--write-devices write to devices as files (implies --inplace)--dry-run, -n perform a trial run with no changes made--whole-file, -W copy files whole (w/o delta-xfer algorithm)--checksum-choice=STR choose the checksum algorithm (aka --cc)--one-file-system, -x don&apos;t cross filesystem boundaries--block-size=SIZE, -B force a fixed checksum block-size--rsh=COMMAND, -e specify the remote shell to use--rsync-path=PROGRAM specify the rsync to run on remote machine--existing skip creating new files on receiver--ignore-existing skip updating files that exist on receiver--remove-source-files sender removes synchronized files (non-dir)--del an alias for --delete-during--delete delete extraneous files from dest dirs--delete-before receiver deletes before xfer, not during--delete-during receiver deletes during the transfer--delete-delay find deletions during, delete after--delete-after receiver deletes after transfer, not during--delete-excluded also delete excluded files from dest dirs--ignore-missing-args ignore missing source args without error--delete-missing-args delete missing source args from destination--ignore-errors delete even if there are I/O errors--force force deletion of dirs even if not empty--max-delete=NUM don&apos;t delete more than NUM files--max-size=SIZE don&apos;t transfer any file larger than SIZE--min-size=SIZE don&apos;t transfer any file smaller than SIZE--max-alloc=SIZE change a limit relating to memory alloc--partial keep partially transferred files--partial-dir=DIR put a partially transferred file into DIR--delay-updates put all updated files into place at end--prune-empty-dirs, -m prune empty directory chains from file-list--numeric-ids don&apos;t map uid/gid values by user/group name--usermap=STRING custom username mapping--groupmap=STRING custom groupname mapping--chown=USER:GROUP simple username/groupname mapping--timeout=SECONDS set I/O timeout in seconds--contimeout=SECONDS set daemon connection timeout in seconds--ignore-times, -I don&apos;t skip files that match size and time--size-only skip files that match in size--modify-window=NUM, -@ set the accuracy for mod-time comparisons--temp-dir=DIR, -T create temporary files in directory DIR--fuzzy, -y find similar file for basis if no dest file--compare-dest=DIR also compare destination files relative to DIR--copy-dest=DIR ... and include copies of unchanged files--link-dest=DIR hardlink to files in DIR when unchanged--compress, -z compress file data during the transfer--compress-choice=STR choose the compression algorithm (aka --zc)--compress-level=NUM explicitly set compression level (aka --zl)--skip-compress=LIST skip compressing files with suffix in LIST--cvs-exclude, -C auto-ignore files in the same way CVS does--filter=RULE, -f add a file-filtering RULE-F same as --filter=&apos;dir-merge /.rsync-filter&apos; repeated: --filter=&apos;- .rsync-filter&apos;--exclude=PATTERN exclude files matching PATTERN--exclude-from=FILE read exclude patterns from FILE--include=PATTERN don&apos;t exclude files matching PATTERN--include-from=FILE read include patterns from FILE--files-from=FILE read list of source-file names from FILE--from0, -0 all *-from/filter files are delimited by 0s--protect-args, -s no space-splitting; wildcard chars only--copy-as=USER[:GROUP] specify user &amp; optional group for the copy--address=ADDRESS bind address for outgoing socket to daemon--port=PORT specify double-colon alternate port number--sockopts=OPTIONS specify custom TCP options--blocking-io use blocking I/O for the remote shell--outbuf=N|L|B set out buffering to None, Line, or Block--stats give some file-transfer stats--8-bit-output, -8 leave high-bit chars unescaped in output--human-readable, -h output numbers in a human-readable format--progress show progress during transfer-P same as --partial --progress--itemize-changes, -i output a change-summary for all updates--remote-option=OPT, -M send OPTION to the remote side only--out-format=FORMAT output updates using the specified FORMAT--log-file=FILE log what we&apos;re doing to the specified FILE--log-file-format=FMT log updates using the specified FMT--password-file=FILE read daemon-access password from FILE--early-input=FILE use FILE for daemon&apos;s early exec input--list-only list the files instead of copying them--bwlimit=RATE limit socket I/O bandwidth--stop-after=MINS Stop rsync after MINS minutes have elapsed--stop-at=y-m-dTh:m Stop rsync at the specified point in time--write-batch=FILE write a batched update to FILE--only-write-batch=FILE like --write-batch but w/o updating dest--read-batch=FILE read a batched update from FILE--protocol=NUM force an older protocol version to be used--iconv=CONVERT_SPEC request charset conversion of filenames--checksum-seed=NUM set block/file checksum seed (advanced)--ipv4, -4 prefer IPv4--ipv6, -6 prefer IPv6--version, -V print the version + other info and exit--help, -h (*) show this help (* -h is help only on its own)Rsync can also be run as a daemon, in which case the following options are accepted:--daemon run as an rsync daemon--address=ADDRESS bind to the specified address--bwlimit=RATE limit socket I/O bandwidth--config=FILE specify alternate rsyncd.conf file--dparam=OVERRIDE, -M override global daemon config parameter--no-detach do not detach from the parent--port=PORT listen on alternate port number--log-file=FILE override the &quot;log file&quot; setting--log-file-format=FMT override the &quot;log format&quot; setting--sockopts=OPTIONS specify custom TCP options--verbose, -v increase verbosity--ipv4, -4 prefer IPv4--ipv6, -6 prefer IPv6--help, -h show this help (when used with --daemon)]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>Rsync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rsync安装与配置]]></title>
    <url>%2Farticles%2F11384%2F</url>
    <content type="text"><![CDATA[项目上有需要对服务器之间的数据进行同步备份需求，想到了之前在Qunar使用过的开源同步软件RSYNC，这里做个简单的基础使用说明，主要是安装与配置。 RSYNC 数据同步 服务器 RSYNC一款开源的数据备份软件，主要有一下几个特点： 跨平台，支持Windows与Linux双向同步 采用1服务端-N客户端运行模式，实现多台服务器同时请求 与其他命令结合使用方便，例如crontab、sersync（实时同步） 操作简单，安装完成后修改配置即可运行 实现增量/全量备份 之前使用是基于Linux系统的sersync+sync搭建的实时同步环境，当前项目上没不需要实时同步数据的要求，所以只搭建了rsync的使用，由于项目上有其他比较着急的事情，后续准备再升级到实时同步环境。 环境简介 ID NAME SYSTEM DESC 1 server1 RedHAT6.4 数据源服务器，用于做备份的SERVER 2 server2 Windows Server 2008 R2 主要做备份的服务器，安装rsync客户端 项目上数据源的服务器是Linux的，用来说备份的Server端，这个是不可以更改的系统类型，其他服务器是Windows的，用来做备份的Client。 下载地址Windows：https://www.itefix.net/cwrsyncLinux：https://rsync.samba.org/ Windows需要下载cwrsync软件包，官网下载即可。Linux安装采用在线安装，也可以下载源码包进行离线安装，均可。 安装关于安装对于系统的不同分别进行说明，其中Linux的安装讲3种方式安装，一些Linux的基础命令使用还是需要掌握的，不会的童鞋需要恶补一下了，废话不说，咱们开始整。 Linux 在线安装前提保证服务器连网，可以充分使用yum。12# 查询yum源是否有rsync软件yum search rsync 使用search进行查找，如果没有，需要进行yum源的设置；如果有，进行install安装即可。1yum -y install rsync 离线安装12345wget https://download.samba.org/pub/rsync/src/rsync-3.2.3.tar.gztar -zxvf rsync-3.2.3.tar.gz./configure --prefix=/usr/local/rsyncmakemake install 使用wget或者官网下载rsync源码包，并移动到服务器上进行解压与安装，具体命令如上。 镜像安装12345mount -o loop /root/mingliang.gao/rhel-server-6.4-x86_64-dvd.iso /mnt/cd /mnt/Packagesls -l | grep rsyncrpm -ivh rsync-3.0.6-9.el6.x86_64.rpmumount /mnt/ 镜像安装有个弊端，就是需要下载与服务器系统版本一致的ios镜像包，移动到服务器进行挂载、安装。 安装建议 关于Linux的安装，建议使用在线安装&gt;镜像安装&gt;离线安装，如果是内网不能连网的情况考虑镜像安装与离线安装，离线安装rpm方式需要一定的依赖，如果是一台新的服务器而且还不能连网，安装起来很费劲，不建议使用源码安装。 Windows Windows安装客户端比较简单，直接官网进行下载：https://www.itefix.net/cwrsync 下载好的包进行解压，把对应的路径加入系统PATH即可。 配置配置主要是基于Server端进行配置，需要开启服务，Client进行数据获取，主要配置的操作如下： mkdir -p /etc/rsyncd cd /etc/rsyncd rsyncd.passwd配置文件 touch rsyncd.conf 粘贴下面的内容到rsyncd.conf配置文件 123456789101112131415161718192021222324252627282930# /etc/rsyncd: configuration file for rsync daemon mode# See rsyncd.conf man page for more options.port = 873uid = rootgid = rootuse chroot = yesread only = nowrite only = no# IP白名单hosts allow = *hosts deny = *max connections = 4# motd file = /etc/rsyncd/rsyncd.motdpid file = /var/run/rsyncd.pidlock file = /var/run/rsyncd.locktransfer logging = yeslog format = %t %a %m %f %blog file = /var/log/rsync.logexclude = lost+found/timeout = 900ignore nonreadable = yesdont compress = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2list = noignore errorsauth users = rootsecrets file = /etc/rsyncd/rsyncd.passwd# 数据路径配置[gtp]path = /home/gtp/data 主要更改[gtp]数据模块配置与hosts allow rsyncd.passwd touch rsyncd.passwd 内容：root:Root123（服务器连接的用户、用户密码，用英文:分割） chmod 600 rsyncd.passwd 重点，需要设置文件的600模式，其他模式不允许。 配置文件说明 全局参数 port：服务端口，默认873 uid：用什么用户运行 gid：运行用户所属组 use chroot：若为 true，则 rsync 在传输文件之前首先chroot到 path 参数所指定的目录下。这样做的原因是实现额外的安全防护，但是缺点是需要 root 权限，并且不能备份指向 path 外部的符号连接所指向的目录文件。 motd file：同步开始打印的内容 pid file：rsync进程的.pid文件，文件里面存放PID lock file：rsync进程的.lock文件 模块参数 hosts allow：IP白名单，*或者注释代表全部允许 hosts deny：IP黑名单，不允许同步的IP max connections：最大连接数量，0为无限制 transfer logging：使rsync配置的记录日志文件 log format：日志格式 log file：日志 exclude：排除哪些目录不同步 timeout：一次连接的最大时长 ignore nonreadable： dont compress：用来指定在传输之前不进行压缩处理的文件格式 list：指定当客户请求列出可以使用的模块列表时，该模块是否应该被列出。如果设置该选项为 false，可以创建隐藏的模块 ignore errors：可以忽略一些无关的IO错误 auth users：授权的用户，需要与发起方保持一致，多个用户用,分隔 secrets file：密钥文件，里面是服务器连接的用户、用户密码 数据模块格式 可以定义多个，格式如下：123[模块名称]path = 具体路径comment = 同步数据模型的描述 官网rsync配置文件参数说明：https://download.samba.org/pub/rsync/rsyncd.conf.5 运行 Linux服务端 检查端口 1netstat -nltp|grep 873 或者 lsof -i:873 服务端默认的端口是873，先check下服务器的873是否被占用，如果没有直接启动服务即可；被占用需要更改上面的配置文件中的port进行端口更换再进行启动。 运行 1rsync --daemon --config=/etc/rsyncd/rsyncd.conf 启动服务。 查看1ps -ef | grep rsync Windows客户端 1rsync --port 873 -avzP --password-file=/cygdrive/D/cwRsync/rsyncd.passwd root@16.19.209.68::newgtp /cygdrive/E/newdata 如果出现没有发现rsync命令，就是没有把rsync的安装路径加入系统PATH。不想加入系统PATH就把rsync的路径补全，采用路径+rsync的方式运行。 参数说明：12345678910-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD-v, --verbose 详细模式输出--progress 在传输时现实传输过程-z, --compress 对备份的文件在传输时进行压缩处理--delete 删除那些DST中SRC没有的文件--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件--password-file=FILE 从FILE中得到密码--port=PORT 指定其他的rsync服务端口--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输 其他 umount问题：umount: /mnt: device is busy. 解决方案：fuser -m /mnt/ 查看使用文件的进程idkill或者exit、重新ssh重新umount 重新启动 123ps -ef | grep rsynckill 进程IDrsync --daemon --config=/etc/rsyncd/rsyncd.conf 学习参考yum命令与源设置：https://zhuanlan.zhihu.com/p/71906253Linux编译详解：https://www.cnblogs.com/tinywan/p/7230039.htmlrsync安装：https://www.cnblogs.com/champaign/p/9082137.htmlrsync参数：https://www.cnblogs.com/koushuige/p/9162920.htmlrsync配置文件参数说明：https://download.samba.org/pub/rsync/rsyncd.conf.5]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>Rsync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客域名切换]]></title>
    <url>%2Farticles%2F36343%2F</url>
    <content type="text"><![CDATA[pygo2.top上线 博客域名由pygo2.cn改为pygo2.top，正式上线。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS配置svn免账号密码]]></title>
    <url>%2Farticles%2F49218%2F</url>
    <content type="text"><![CDATA[SVN 环境 MacOS Big Sur 11.1 版本 version 1.11.1 (r1850623) 配置 编辑配置文件 vim ~/.subversion/config 12store-passwords = yesstore-auth-creds = yes 权限配置 1sudo chmod 775 -R auth/]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CkEditor图片上传到服务端]]></title>
    <url>%2Farticles%2F32287%2F</url>
    <content type="text"><![CDATA[CKEditor系列教程（三） CKEditor 前端应用 效果 配置前 配置后 图片上传配置在config.js配置文件中进行图片上传的配置123456//上传图片APIconfig.filebrowserImageUploadUrl = &quot;/apis/uploadimg&quot;;// 去掉图片预览框的文字config.image_previewText = &apos;&apos;;// 隐藏“超链接”与“高级选项”只留上传和预览按钮config.removeDialogTabs = &apos;image:advanced;image:Link;&apos;; 后台代码1234567891011121314151617181920@apis.route(&apos;/uploadimg/&apos;, methods=[&apos;POST&apos;, &apos;OPTIONS&apos;], strict_slashes=False)def uploadimg(): image = request.files.get(&apos;upload&apos;) no_res = jsonify(&#123; &quot;uploaded&quot;: 0, &quot;fileName&quot;: &apos;&apos;, &quot;url&quot;: &apos;&apos; &#125;) if not image: return no_res res = ApisService().store_to_imgae(image) json_res = json.loads(res) if json_res.get(&apos;status_id&apos;) != 100: return no_res return jsonify(&#123; &quot;uploaded&quot;: 1, &quot;fileName&quot;: json_res.get(&apos;data&apos;).get(&apos;name&apos;), &quot;url&quot;: json_res.get(&apos;data&apos;).get(&apos;url&apos;) &#125;) 上面是python对于图片存储的代码，store_to_imgae是实际存储的，需要的可以给我留言，要让前端ckedit能获取返回值，需要json格式，内容目标如下：12345&#123; &quot;uploaded&quot;: 1, &quot;fileName&quot;: json_res.get(&apos;data&apos;).get(&apos;name&apos;), &quot;url&quot;: json_res.get(&apos;data&apos;).get(&apos;url&apos;)&#125; 这样，前端就可以进行显示了。]]></content>
      <categories>
        <category>前端应用</category>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端组件</tag>
        <tag>CkEditor</tag>
        <tag>富文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux服务上安装Win字体]]></title>
    <url>%2Farticles%2F34016%2F</url>
    <content type="text"><![CDATA[在开源项目上集成了CKEditor富文本编辑器，但是发现面板上字体没有宋体、微软雅黑等Win字体，web服务大部分应用都是win系统，在CKEditor上config.js添加了字体选择，但是没有效果，需要在Linux服务器添加所需要的字体。 Linux CKEditor 这里介绍2种配置，均可以。 系统环境 Contos7.5 基础操作 拷贝Win系统的字体传到Linux服务器上，放在/usr/share/fonts/chinese目录下，fonts目录下是没有chinese文件夹的，需要root用户新建并赋予755权限。Win系统的字体库位置：C:/Windows/FontsLinux涉及命令：su、scp、mkdir、chmod ================第一种================ 1234cd /usr/share/fonts/chinesesudo mkfontscalesudo mkfontdirsudo fc-cache –fv 执行以上命令之后，在执行fc-list查看字体列表，查看中文字体：fc-list :lang=zh。 mkfontscale &amp;&amp; mkfontdir 区别 man查看二者命令：12mkfontscale - create an index of scalable font files for Xmkfontdir - create an index of X font files in a directory 都是在字体库目录建立索引文件的命令，而且内容也是相同的。 ================第二种================ 用编辑器打开/etc/fonts/fonts.conf，通常会有如下内容:123456&lt;dir&gt;/usr/share/fonts&lt;/dir&gt;&lt;dir&gt;/usr/share/fonts/chinese&lt;/dir&gt;&lt;dir&gt;/usr/share/X11/fonts/Type1&lt;/dir&gt; &lt;dir&gt;/usr/share/X11/fonts/TTF&lt;/dir&gt; &lt;dir&gt;/usr/local/share/fonts&lt;/dir&gt;&lt;dir prefix=&quot;xdg&quot;&gt;fonts&lt;/dir&gt;&lt;!-- the following element will be removed in the future --&gt; &lt;dir&gt;~/.fonts&lt;/dir&gt; 把中文字体库文件放到其中一个目录即可或者把自定义的目录路径加到fonts.conf。 刷新字体库fc-cache -fv 查看已安装字体fc-list :lang=zh 纵使生活再艰难，也不要放弃，微信面对，致自己！！！]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>CkEditor</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CkEditor的配置说明]]></title>
    <url>%2Farticles%2F32150%2F</url>
    <content type="text"><![CDATA[CKEditor系列教程（二） CKEditor 前端应用 配置配置文件在插件的config.js，也可以自定义config js文件。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/** * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved. * For licensing, see https://ckeditor.com/legal/ckeditor-oss-license */CKEDITOR.editorConfig = function( config ) &#123; // 语言 config.language = &apos;zh-cn&apos;; // placeholder设置 config.editorplaceholder = &apos;开始新的篇章......&apos;; // 设置宽高 // config.width = 400; config.height = 500; // UI面板配色 config.uiColor = &apos;#F7B42C&apos;; // 编辑器样式：bootstrapck icy_orange kama minimalist moono moono-dark moonocolor office2013 // default：moono-lisa config.skin = &apos;icy_orange&apos;; // 添加字体 config.font_names=&apos;宋体/SimSun;新宋体/NSimSun;仿宋_GB2312/FangSong_GB2312;楷体_GB2312/KaiTi_GB2312;黑体/SimHei;微软雅黑/Microsoft YaHei;&apos;+ config.font_names; // 添加该行代码关闭easyimage、cloudservices插件即可 config.removePlugins = &apos;easyimage,cloudservices&apos;; // 工具栏是否可以被收缩 config.toolbarCanCollapse = true; // 工具栏的位置，可选：bottom config.toolbarLocation = &apos;top&apos;; // 工具栏默认是否展开 config.toolbarStartupExpanded = true; // 取消 “拖拽以改变尺寸”功能 config.resize_enabled = false; // 当提交包含有此编辑器的表单时，是否自动更新元素内的资料 config.autoUpdateElement = true; // 编辑器的z-index值 config.baseFloatZIndex = 10000; // 工具栏 config.toolbar = [ &#123; name: &apos;document&apos;, groups: [ &apos;mode&apos;, &apos;document&apos;, &apos;doctools&apos;, &apos;undo&apos;], items: [ &apos;NewPage&apos;, &apos;Save&apos;, &apos;Preview&apos;, &apos;Print&apos;, &apos;-&apos;, &apos;Templates&apos; , &apos;-&apos;, &apos;Undo&apos;, &apos;Redo&apos; ] &#125;, &#123; name: &apos;editing&apos;, groups: [ &apos;find&apos;, &apos;selection&apos;, &apos;spellchecker&apos; ], items: [ &apos;Find&apos;, &apos;Replace&apos;, &apos;-&apos;, &apos;SelectAll&apos;, &apos;-&apos;, &apos;Scayt&apos; ] &#125;, &#123; name: &apos;clipboard&apos;, groups: [ &apos;clipboard&apos;], items: [ &apos;Cut&apos;, &apos;Copy&apos;, &apos;Paste&apos;, &apos;PasteText&apos;, &apos;PasteFromWord&apos;] &#125;, //&#123; name: &apos;forms&apos;, items: [ &apos;Form&apos;, &apos;Checkbox&apos;, &apos;Radio&apos;, &apos;TextField&apos;, &apos;Textarea&apos;, &apos;Select&apos;, &apos;Button&apos;, &apos;ImageButton&apos;, &apos;HiddenField&apos; ] &#125;, &#123; name: &apos;insert&apos;, groups: [ &apos;links&apos;, &apos;clipboard&apos;], items: [ &apos;Link&apos;, &apos;Unlink&apos;, &apos;Anchor&apos;, &apos;-&apos;, &apos;Image&apos;, &apos;Table&apos;, &apos;-&apos;, &apos;HorizontalRule&apos;, &apos;Smiley&apos;, &apos;SpecialChar&apos;] &#125;, &apos;/&apos;, &#123; name: &apos;basicstyles&apos;, groups: [ &apos;basicstyles&apos;, &apos;cleanup&apos; ], items: [ &apos;Bold&apos;, &apos;Italic&apos;, &apos;Underline&apos;, &apos;Strike&apos;, &apos;-&apos;, &apos;TextColor&apos;, &apos;BGColor&apos;, &apos;-&apos;, &apos;Subscript&apos;, &apos;Superscript&apos;, &apos;-&apos;, &apos;RemoveFormat&apos; ] &#125;, &#123; name: &apos;paragraph&apos;, groups: [ &apos;list&apos;, &apos;indent&apos;, &apos;blocks&apos;, &apos;align&apos;, &apos;bidi&apos; ], items: [ &apos;NumberedList&apos;, &apos;BulletedList&apos;, &apos;-&apos;, &apos;Outdent&apos;, &apos;Indent&apos;, &apos;-&apos;, &apos;JustifyLeft&apos;, &apos;JustifyCenter&apos;, &apos;JustifyRight&apos;, &apos;JustifyBlock&apos;, &apos;-&apos;, &apos;BidiLtr&apos;, &apos;BidiRtl&apos;, &apos;Language&apos; ] &#125;, &apos;/&apos;, &#123; name: &apos;styles&apos;, items: [ &apos;Styles&apos;, &apos;Format&apos;, &apos;Font&apos;, &apos;FontSize&apos; ] &#125;, &#123; name: &apos;others&apos;, items: [ &apos;Maximize&apos;, &apos;-&apos;, &apos;ShowBlocks&apos;, &apos;Blockquote&apos;, &apos;CreateDiv&apos;, &apos;-&apos;, &apos;Source&apos;] &#125; ]; //上传图片API config.filebrowserImageUploadUrl = &quot;/apis/uploadimg&quot;; // 去掉图片预览框的文字 config.image_previewText = &apos;&apos;; // 隐藏“超链接”与“高级选项”只留上传和预览按钮 config.removeDialogTabs = &apos;image:advanced;image:Link;&apos;;&#125;; 特别说明：config.skin的皮肤需要自己进行下载，插件的skins目录下是没有。有需要的同学可以邮件我：gaoming971366@163.com 学习参考官网配置：https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.htmlCKEditor系列教程（一）：CkEditor的安装与基础使用CKEditor系列教程（二）：CkEditor的配置说明CKEditor系列教程（三）：CkEditor图片上传到服务端]]></content>
      <categories>
        <category>前端应用</category>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端组件</tag>
        <tag>CkEditor</tag>
        <tag>富文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CkEditor的安装与基础使用]]></title>
    <url>%2Farticles%2F9743%2F</url>
    <content type="text"><![CDATA[CKEditor系列教程（一） CKEditor 前端应用 CkEditor有4版本以及最新5系列版本，看了内容，感觉4就够了，有兴趣的人可以下载5。 下载地址https://ckeditor.com/ckeditor-4/download/ CkEditor4有4个版本下载：base（基础版）、standard（标准版）、full（完整版）、custome（定制版）。说白了就是插件多少的问题，建议选择full版本，反正项目部署到服务器，CkEditor插件每次也不会更新，不会影响任何问题。 其他方式安装：https://ckeditor.com/docs/ckeditor4/latest/guide/dev_installation.html Demo HTML 12345678910111213141516171819202122232425262728&lt;!DOCTYPE HTML&gt;&lt;html lang=&quot;en-US&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;ditor demo&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;ckeditor_4.15.1_full_easyimage/ckeditor.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button onclick=&quot;show()&quot;&gt;展示&lt;/button&gt; &lt;br&gt; &lt;br&gt; &lt;form&gt; &lt;textarea name=&quot;articleArea&quot; id=&quot;articleArea&quot; rows=&quot;10&quot; cols=&quot;80&quot;&gt; &lt;/textarea&gt; &lt;/form&gt;&lt;/body&gt;&lt;script&gt; // with a CKEditor 4, instance, using default configuration. CKEDITOR.replace( &apos;articleArea&apos; ); function show() &#123; var editor_data = CKEDITOR.instances.articleArea.getData(); console.log(editor_data) &#125;&lt;/script&gt;&lt;/html&gt; show方法是打印内容。 学习参考官网：https://ckeditor.com/CKEditor系列教程（一）：CkEditor的安装与基础使用CKEditor系列教程（二）：CkEditor的配置说明CKEditor系列教程（三）：CkEditor图片上传到服务端]]></content>
      <categories>
        <category>前端应用</category>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端组件</tag>
        <tag>CkEditor</tag>
        <tag>富文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Contos7.5环境上的Java安装]]></title>
    <url>%2Farticles%2F50773%2F</url>
    <content type="text"><![CDATA[简述 基于云服务器Centos7.5，安装libreoffice需要java环境，安装方式有2种，建议选择第二种手动方式。首先，安装的路径你可以自动随便选择；其次yum安装的jdk只是jre环境，而手动安装包含了JDK与JRE2个环境，包含dt.jar、tools.jar包。 Linux Java 前几天安装libreoffice环境，不清楚这个是干什么的，可以参考libreoffice安装与使用。 系统环境Contos7.5 -------------------------- Let's go -------------------------- 安装这个主要用到yum命令，不清楚使用的同学可以baidu一下。 yum 查找JDK 1yum search jdk 安装 这里我选择的是1.8版本，根据服务器的位数选择对应的版本。 1yum install java-1.8.0-openjdk.x86_64 安装完是下面这个样子： 配置 打开/etc/profile文件，把下面配置加到最下面。 12345#set java environmentJAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk-1.8.0.275.b01-0.el7_9.x86_64PATH=$PATH:$JAVA_HOME/binCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport JAVA_HOME CLASSPATH PATH 验证 1java -version 其他说明 yum安装的默认路径为：/usr/lib/jvm。 手动 下载源码包 下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html 选择需要安装的版本，这里选择的是：Linux x64 Compressed Archive。 上传服务器 1scp ~/Downloads/jdk-8u281-linux-x64.tar.gz root@121.4.56.169:~ 解压 12tar -zxvf jdk-8u281-linux-x64.tar.gzmv jdk-8u281-linux-x64 /usr/local/jdk1.8.0_281 配置 同样还是/etc/profile文件。 123456#set java environmentJAVA_HOME=/usr/local/jdk1.8.0_281JRE_HOME=/usr/local/jdk1.8.0_281/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 测试 1java -version JDK与JRE区别 含义 JDK：java development kit JRE：java runtime environment 组成 JDK：JVM + 基础类库 + 开发工具 JRE：JVM]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Libreoffice安装与使用]]></title>
    <url>%2Farticles%2F10477%2F</url>
    <content type="text"><![CDATA[简介 官网介绍：LibreOffice is Free and Open Source Software. LibreOffice is a powerful and free office suite, a successor to OpenOffice(.org), used by millions of people around the world. Its clean interface and feature-rich tools help you unleash your creativity and enhance your productivity. LibreOffice includes several applications that make it the most versatile Free and Open Source office suite on the market: Writer (word processing), Calc (spreadsheets), Impress (presentations), Draw (vector graphics and flowcharts), Base (databases), and Math (formula editing).大致意思：LibreOffice是开源、免费的，用于文档方面处理的工具，很牛逼。功能模块：文档-Writer(word processing)表格-Calc (spreadsheets)PPT-Impress (presentations)绘图-Draw (vector graphics and flowcharts)数据库-Base (databases)算法-Math (formula editing)基于Linux安装并使用！！！。 Libreoffice Linux 办公工具 LibreOffice跨平台，可以Windows、Linux、MacOS多平台安装，最新版为7.0.4。下载地址：https://www.libreoffice.org/download/download/ 版本信息 name version 腾讯云服务器 CentOS Linux release 7.5.1804 (Core) Libreoffice 6.4.7 -------------------------- Let's go -------------------------- 安装下载文件选择 Linux x86_64(rpm) 的版本，下载得到 LibreOffice_6.4.7_Linux_x86-64_rpm.tar.gz。Linux环境建议使用wget工具。1wget //download.documentfoundation.org/libreoffice/stable/6.4.7/mac/x86_64/LibreOffice_6.4.7_MacOS_x86-64.dmg 清理环境在安装之前，先删除已经安装的 LibreOffice:1yum remove libreoffice* 解压1tar -xvf LibreOffice_6.4.7_Linux_x86-64_rpm.tar.gz 安装12cd LibreOffice_6.4.7_Linux_x86-64_rpm/RPMSyum localinstall *.rpm 或者 rpm -ivh *.rpm 测试12[mingliang.gao@VM-0-15-centos install_packages]$ which libreoffice6.4/usr/bin/libreoffice6.4 安装目录：/opt/libreoffice6.4可以用find或者locate去查找安装目录。 安装依赖执行 libreoffice6.4 可能会提示库文件找不到libcairo.so.2，执行下面几条命令安装需要的库:123yum install cairo -yyum install cups-libs -yyum install libSM -y pdf转word1libreoffice6.4 --headless --infilter=&apos;writer_pdf_import&apos; --convert-to doc:&quot;MS Word 2007 XML&quot; db2.pdf 其他LibreOffice for Android and iOSWhile The Document Foundation doesn’t currently offer an Android or iOS version of LibreOffice, there is a LibreOffice-based product in app stores from Collabora, one of our certified developers and ecosystem members:暂时不支持移动端，支持了之后，感觉格式转换这好多公司要没了。。。 学习参考官网：https://www.libreoffice.org/中文官网：https://zh-cn.libreoffice.org/官网安装说明：https://www.libreoffice.org/get-help/install-howto/Linux安装：https://wiki.documentfoundation.org/Installing_LibreOffice_on_Linux#Fedora_.2F_CentOS 任何学习的东西在官网都找得到，对于LibreOffice本人也是初窥门径，日后也会给出其他的相关使用命令。 只有不断的学习才明白自己菜得一逼，加油，继续学习，致自己！！！]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Libreoffice</tag>
        <tag>办公工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qita-常用DNS]]></title>
    <url>%2Farticles%2F35553%2F</url>
    <content type="text"><![CDATA[ID IP NAME 1 8.8.8.8 Google 2 8.8.4.4 Google备用 3 119.29.29.29 腾讯 4 180.76.76.76 百度 5 223.5.5.5 阿里 6 223.6.6.6 阿里 7 114.114.114.114 114 8 114.114.114.115 114备用]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NPM install报错：code128]]></title>
    <url>%2Farticles%2F57475%2F</url>
    <content type="text"><![CDATA[用的是vue-element-admin脚手架在macos上起来了，后来在win电脑上也下载了自己写的open2lui项目，npm install的时候发现报了code 128的错误，记录一下。 VUE NPM 问题描述 在npm install安装包的时候出现一下问题： 解决方案 看了下错误，发现是raphael.git项目git不下来，baidu了一下控制台进行git设置：12git config --global http.sslverify &quot;false&quot;git config --global url.&quot;https://&quot;.insteadOf git:// 执行完之后，在进行npm install。 推荐 vueAdmin-template是基于vue-element-admin的一套后台管理系统基础模板，简单易用。GitHub地址：https://github.com/PanJiaChen/vue-admin-template 坚持学习。。。。。。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>NPM</tag>
        <tag>NODE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML+CSS标题艺术字]]></title>
    <url>%2Farticles%2F25985%2F</url>
    <content type="text"><![CDATA[HTML基于css开发的艺术字，有特效。 样式分为2种，其实就是把效果反过来了，pushdown与raisedoup。 HTML1234567&lt;div class=&quot;f-pr-heading-wrapper&quot;&gt; &lt;a href=&quot;&quot; class=&quot;f-pushdown-header f-pushdown-header-pushDown&quot; title=&quot;HOVER ME&quot;&gt; You can &lt;span style=&quot;color:red;&quot;&gt;search&lt;/span&gt; everything &lt;/a&gt;&lt;/div&gt; CSSf-pr-heading-wrapper为div基础标签。background:-webkit-gradient是用于标签背景。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950.f-pr-heading-wrapper &#123; width: 100%; text-align: center; /*padding: 10px;*/ background-color: #00BFFF; background:-webkit-gradient(linear, 0% 0%, 0% 100%,from(#FFFF00), to(#2EFE2E));&#125;/* PUSH DOWN */.f-pushdown-header &#123; display: inline-block; text-align: center; font-family: &apos;Francois One&apos;, Helvetica, Arial, sans-serif; font-size: 6rem; color: #e7e7e7; text-decoration: none; transition: all 400ms ease-in-out;&#125;.f-pushdown-header-pushDown &#123; text-shadow: 1.5px 1.5px 0 #333, 0px 1.5px 0 #333, -1.5px -1.5px 0 #333, -1.5px -1.5px 0 #333, -1.5px 1.5px 0 #333, 1.5px -1.5px 0 #333, 0.77782px 0.77782px 0 #aaaaaa, 1.55563px 1.55563px 0 #aaaaaa, 2.33345px 2.33345px 0 #aaaaaa, 3.11127px 3.11127px 0 #aaaaaa, 3.88909px 3.88909px 0 #aaaaaa, 4.6669px 4.6669px 0 #aaaaaa, 5.44472px 5.44472px 0 #aaaaaa, 6.22254px 6.22254px 0 #aaaaaa, 7.00036px 7.00036px 0 #aaaaaa, 7.77817px 7.77817px 0 #aaaaaa;&#125;.f-pushdown-header-pushDown:hover &#123; color: #0d6aad; transform: translate(10px, 0); text-shadow: 1.5px 1.5px 0 #cac6c5, -1.5px -1.5px 0 #cac6c5, -1.5px -1.5px 0 #cac6c5, -1.5px 1.5px 0 #cac6c5, 1.5px -1.5px 0 #cac6c5;&#125;/* RAISE UP */.f-raiseup-header &#123; display: inline-block; text-align: center; font-family: &apos;Francois One&apos;, Helvetica, Arial, sans-serif; font-size: 6rem; color: #e7e7e7; text-decoration: none; transition: all 400ms ease-in-out;&#125;.f-raiseup-header-pushDown &#123; text-shadow: 1.5px 1.5px 0 #cac6c5, -1.5px -1.5px 0 #cac6c5, -1.5px -1.5px 0 #cac6c5, -1.5px 1.5px 0 #cac6c5, 1.5px -1.5px 0 #cac6c5;&#125;.f-raiseup-header-pushDown:hover &#123; color: #0d6aad; transform: translate(10px, 0); text-shadow: 1.5px 1.5px 0 #333, 0px 1.5px 0 #333, -1.5px -1.5px 0 #333, -1.5px -1.5px 0 #333, -1.5px 1.5px 0 #333, 1.5px -1.5px 0 #333, 0.77782px 0.77782px 0 #aaaaaa, 1.55563px 1.55563px 0 #aaaaaa, 2.33345px 2.33345px 0 #aaaaaa, 3.11127px 3.11127px 0 #aaaaaa, 3.88909px 3.88909px 0 #aaaaaa, 4.6669px 4.6669px 0 #aaaaaa, 5.44472px 5.44472px 0 #aaaaaa, 6.22254px 6.22254px 0 #aaaaaa, 7.00036px 7.00036px 0 #aaaaaa, 7.77817px 7.77817px 0 #aaaaaa;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML+CSS+HR分割线]]></title>
    <url>%2Farticles%2F50666%2F</url>
    <content type="text"><![CDATA[推荐几款好看的hr标签分割线，也是网上找的，基于html与css，总结一下。 HTML1234567891011121314&lt;hr class=&quot;hr-grow-base hr-grow-trans hr-grow-hr1&quot;&gt;内容。。。。。。。。。。。。。。。。。。。。&lt;hr class=&quot;hr-grow-base hr-grow-trans hr-grow-hr2&quot;&gt;&lt;hr class=&quot;hr-color-fade&quot;&gt;&lt;hr class=&quot;hr-lean-line&quot;&gt;&lt;hr class=&quot;hr-gray-fade&quot;&gt;&lt;hr class=&quot;hr-grap-shadow&quot;&gt;&lt;hr class=&quot;hr-dots&quot;&gt;&lt;hr class=&quot;hr-accessory&quot;&gt;&lt;hr class=&quot;hr-pill&quot;&gt;&lt;hr class=&quot;hr-vertical-lines&quot;&gt;&lt;hr class=&quot;hr-slash&quot;&gt;&lt;hr class=&quot;hr-wave&quot;&gt;&lt;hr class=&quot;hr-stars&quot;&gt; 其中，关于Hr grow style样式需要说明一下，除了加上html与css之外，还需要加上js才会有动画效果。123setTimeout(function()&#123; $(&apos;.hr-grow-trans&apos;).addClass(&apos;hr-grow-add&apos;);&#125;, 275); CSS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158/* Color fade */.hr-color-fade &#123; width: 100%; margin: 0 auto; border: 0; height: 4px; background: #333; background-image: linear-gradient(to right, red, #333, rgb(9, 206, 91));&#125;/* Gray fade */.hr-gray-fade &#123; width: 100%; margin:0 auto; border: 0; height: 4px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));&#125;/*Lean line*/.hr-lean-line &#123; position: relative; display: block; margin-top: 4em; margin-bottom: 4em; height: 3px; border:none; background: linear-gradient(to right, transparent 50%, #fff 50%), linear-gradient(to right, #00b9ff, #59d941); background-size: 1.5rem, 100%; transform: rotate(-4.5deg); transform-origin: 50% 0;&#125;/*Grap-shadow*/.hr-grap-shadow &#123; height: 10px; border: 0; box-shadow: 0 10px 10px -10px #3c3f41 inset;&#125;/* Hr grow stylehtml:&lt;hr class=&quot;hr-grow-base hr-grow-trans hr-grow-hr1&quot;&gt;&lt;hr class=&quot;hr-grow-base hr-grow-trans hr-grow-hr2&quot;&gt;js:setTimeout(function()&#123; $(&apos;.hr-grow-trans&apos;).addClass(&apos;hr-grow-add&apos;);&#125;, 275);*/.hr-grow-base&#123; margin-top: 20px; padding: 1.5px 0; border: none; /*background-color: rgb(250, 150, 0);*/ background-image: linear-gradient(to right, red, #333, rgb(9, 206, 91)); letter-spacing: 5px;&#125;.hr-grow-hr1&#123; margin-left: 2%;&#125;.hr-grow-hr2&#123; margin-right: 2%;&#125;.hr-grow-trans&#123; -webkit-transition: width 1s ease-out; transition: width 1s ease-out; width : 0;&#125;.hr-grow-add&#123; width: 96%;&#125;/*Dots*/.hr-dots&#123; color: orange; border-width: 0 0 8px; border-style: solid; border-image: url(&apos;data:image/svg+xml,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 2 1&quot; width=&quot;8&quot; height=&quot;4&quot;&gt;&lt;circle fill=&quot;orange&quot; cx=&quot;1&quot; cy=&quot;0.5&quot; r=&quot;0.5&quot;/&gt;&lt;/svg&gt;&apos;) 0 0 100% repeat; width: 90%;&#125;/*accessory*/.hr-accessory &#123; height: 6px; background-image: radial-gradient(closest-side, gray, rgba(128, 128, 128, 0) 100%); position: relative;&#125;.hr-accessory:after &#123; position: absolute; top: 50%; left: 50%; display: block; background-color: #bfbfbf; height: 12px; width: 12px; transform: rotate(45deg); margin-top: -10px; margin-left: -10px; border-radius: 4px 0; border: 4px solid rgba(255, 255, 255, 0.35); background-clip: padding-box; box-shadow: -10px 10px 0 rgba(255, 255, 255, 0.15), 10px -10px 0 rgba(255, 255, 255, 0.15);&#125;/*pill*/.hr-pill &#123; height: 1rem; border-radius: 1rem; color: teal; background-color: #00FFFF; border: 2px solid currentColor; width: 80%;&#125;/*vertical-lines*/.hr-vertical-lines &#123; height: 1rem; color: orange; background-image: linear-gradient(90deg, currentColor, currentColor 33.33%, transparent 33.33%, transparent 100%); background-size: 3px 100%; width: 80%;&#125;/*slash*/.hr-slash &#123; height: 10px; background-image: linear-gradient(45deg, rgba(13, 13, 13, 0), rgba(13, 13, 13, 0) 33.33%, #0d0d0d 33.33%, #0d0d0d 66.67%, rgba(13, 13, 13, 0) 66.67%, rgba(13, 13, 13, 0) 100%); background-size: 10px 100%; width: 90%;&#125;/* Wave */.hr-wave &#123; width: 96%; border-image: url(&apos;data:image/svg+xml,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 12 15&quot; width=&quot;12&quot; height=&quot;15&quot;&gt;&lt;path fill=&quot;none&quot; stroke=&quot;rgba(191, 191, 191, 0.9)&quot; stroke-width=&quot;3&quot; d=&quot;M0,13.5c3,0,3-12,6-12s3,12,6,12&quot;/&gt;&lt;/svg&gt;&apos;) 0 0 100% repeat; border-width: 0 0 0.8rem; border-style: solid;&#125;/* stars */.hr-stars &#123; border: 0; height: auto; color: gold; text-align: center;&#125;.hr-stars:after &#123; content: &quot;★&quot;; font-size: 1em; text-shadow: -6em 0, -5em 0, -4em 0, -3em 0, -2em 0, -1em 0, 1em 0, 2em 0, 3em 0, 4em 0, 5em 0, 6em 0;&#125;]]></content>
      <categories>
        <category>前端应用</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python之NLTK包[ERRNO61] Connection Refused]]></title>
    <url>%2Farticles%2F38502%2F</url>
    <content type="text"><![CDATA[解决MacOS安装nltk报[ERRNO61] Connection Refused的问题。 要解析一些DB2的存储过程，查询一些指定的词语，打算搞个脚本，用到nltk这个自然语言处理的包，安装之后，运行：123# GUI Downloaderimport nltknltk.download() 出现上述情况，下载不了包。 =============解决方案============= 方案一 离线下载包，地址：https://github.com/nltk/nltk_data/tree/gh-pages下载之后把文件放在/Users/用户名/nltk_data目录下，改下用户即可。 方案二 在GUI Downloader上，更换Server Index地址：http://www.nltk.org/nltk_data/可行，但是不是永久的，每次打开都得重新设置。 方案三 找到nltk包的downloader文件，去更改默认下载地址。我用的是conda建造的环境，或者用pycharm的去一级一级找就可以了。位置：/opt/anaconda3/envs/python3.7/lib/python3.7/site-packages/nltk/downloader.py 本人开发环境：MacOS + Pyhton3.7]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>ERROR集</tag>
        <tag>Python包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VIM基础配置]]></title>
    <url>%2Farticles%2F36465%2F</url>
    <content type="text"><![CDATA[VIM基础配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&quot; A vimrc file.&quot;&quot; User: mingliang.gao&quot; Create time: 2020-12-20&quot;&quot; ================================ base setting ================================set nocompatibleset numberfiletype plugin indent onset history=1000set background=darksyntax onsyntax enableset rulerset showmatchset laststatus=2set showmodeset ignorecaseset nofoldenable &quot; 不折叠代码set showcmdset mouse=a &quot; 开启鼠标set wrapset noerrorbellsset backspace=2&quot; 设置molokai主题let mapleader=&apos;,&apos;let g:molokai_original = 1let g:rehash256 = 1set t_Co=256colorscheme molokai&quot; searchset hlsearchset incsearch&quot; 文件编码set termencoding=utf-8set encoding=utf8set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030&quot; 分割布局set splitbelowset splitright&quot; 用浅颜色高亮当前行，列set culset cuchighlight CursorLine cterm=NONE ctermbg=black ctermfg=blue guibg=NONE guifg=NONEhighlight CursorColumn cterm=NONE ctermbg=black ctermfg=blue guibg=NONE guifg=NONE&quot; 缩进方式set autoindentset smartindentset tabstop=4set shiftwidth=4&quot; 备份if has(&quot;vms&quot;) set nobackup &quot; do not keep a backup file, use versions insteadelse set backup &quot; keep a backup file (restore to previous version) if has(&apos;persistent_undo&apos;) set undofile &quot; keep an undo file (undo changes after closing) endifendif&quot; swap文件与undo文件set swapfileset undofile&quot;===================================================================================== 基础配置说明 set nocompatible：不兼容vi set number：行号 filetype plugin indent on：自动识别文件类型 set history=1000：回退的历史记录 set background=dark：主题 syntax on：语法高亮开启 set ruler：设置XX行XX列 set showmatch：括号匹配 set laststatus=2：一直显示vim底部状态信息 set showmode：显示当前vim模式（正常、编辑、视图） set ignorecase：忽略大小写搜索 set nofoldenable “ 不折叠代码 set showcmd：如果!+cmd执行命令，显示执行的命令 set mouse=a：开启鼠标 set wrap：自动换行 set noerrorbells：关闭错误提示声音 set backspace=2：可以在编辑模式下使用backspace 设置molokai主题 github地址：https://github.com/tomasr/molokai文件放在/Users/gaomingliang/.vim/colors目录下。 set t_Co=256：设置配置 colorscheme molokai：设置主题 search搜索配置 set hlsearch：设置查询的高亮显示 set incsearch：增强vim中自带的?（向下搜索）和／（向上搜索）搜索功能 文件编码 set termencoding=utf-8：输出到客户终端（Term）采用的编码类型 set encoding=utf8：于缓冲的文本、寄存器、脚本文件等 set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030：设置写入文件支持的编码 分割布局 set splitbelow：横向-下 set splitright：纵向-右很少用到，习惯多个tab，用taglist插件进行切换。 用浅颜色高亮当前行，列 set cul set cuc highlight CursorLine cterm=NONE ctermbg=black ctermfg=blue guibg=NONE guifg=NONE highlight CursorColumn cterm=NONE ctermbg=black ctermfg=blue guibg=NONE guifg=NONE “ 缩进方式 set autoindent：自动化缩进，VIM会根据打开文件类型进行缩进。 set smartindent：同上。 set tabstop=4：tab键为4个空格 set shiftwidth=4：程序自动缩进的空格数，默认缩进 备份 12345678if has(&quot;vms&quot;) set nobackup &quot; do not keep a backup file, use versions insteadelse set backup &quot; keep a backup file (restore to previous version) if has(&apos;persistent_undo&apos;) set undofile &quot; keep an undo file (undo changes after closing) endifendif 使用这个命令会打开一个文件进行备份一个文件，不建议使用，文件太多了。 swap文件与undo文件 set swapfile：自动多一个.swap文件。 set undofile：自动多一个.undo文件，用来回退的文件。 持续更新中～]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>VIM</tag>
        <tag>IDE</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Crontab指定用户运行任务]]></title>
    <url>%2Farticles%2F44008%2F</url>
    <content type="text"><![CDATA[每一个用户都有属于自己的crontab，crontab -l的时候显示都是自己的定时任务，不便于管理。把所有任务集中管理，并指定每个任务的执行用户，记录一下。 Crontab 定时任务 系统环境 Contos7.5 操作 root用户。 打开/etc/crontab文件中添加。 1234567891011121314151617181920SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed# baidu自动推送1 23 * * * mingliang.gao bash /home/mingliang.gao/crontab/auto_push_baidu/auto_baidu_push.sh# db backup30 02 * * * mingliang.gao bash /home/mingliang.gao/crontab/db_backup_task.sh &gt; /dev/null 2&gt;&amp;1 这里面需要指定用户名，统一管理。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Crontab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql自动备份脚本]]></title>
    <url>%2Farticles%2F8234%2F</url>
    <content type="text"><![CDATA[Mysqldump自动备份脚本，基于shell脚本，加入crontab定时任务。 Mysql Mysqldump 备份 定时任务crontab -e 130 02 * * * bash /home/mingliang.gao/crontab/db_backup/db_backup_task.sh &gt; /dev/null 2&gt;&amp;1 备份脚本 db parameters db相关的配置，可更改。 db_user：账号 db_passwd：密码 db_host：数据库服务器IP db_port：数据库端口 db_backup_dir：备份数据库存放路径 db_names：为要备份的数据库名称，如果不设置指定的备份数据库，直接注释，在下面会把information_schema、mysql、performance_schem系统数据库除外的都进行备份。 dir parameters 备份数据的存放位置，以及记录备份历史，不可更改。 cur_date：执行的本次日期。 backup_history_file：执行记录文件。 today_backup_dir：备份文件夹。 other parameters 设置备份数据保留天数。 backup_keep_days：备份数据保留天数。任务脚本最下面有个find去处理保留的备份文件。 内容 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#!/bin/bash# ========================================================================================# version: v.1.0# author: mingliang.gao# time: 2020/12/15 23:56:28# mail: mingliang.gao@163.com# summary: This script daily use to backup database# crontab: 30 02 * * * bash /home/mingliang.gao/crontab/db_backup/db_backup_task.sh &gt; /dev/null 2&gt;&amp;1## Enjoy the good lift everyday！！!# ========================================================================================echo &quot;***************************************************&quot;echo &quot;-------------Server Host: 121.4.56.169-------------&quot;echo &quot;------------------DB start backup------------------&quot;# db parametersdb_user=&quot;mingliang.gao&quot;db_passwd=&quot;910809ecb44c92db12ad5fa369375d00&quot;db_host=&quot;127.0.0.1&quot;db_port=3306db_backup_dir=&quot;/home/mingliang.gao/db_backup/&quot;db_names=&quot;&quot;db_names=(elt enterprise ht) # config dbs# base commandrm=&quot;$(which rm)&quot;find=&quot;$(which find)&quot;mkdir=&quot;$(which mkdir)&quot;touch=&quot;$(which touch)&quot;# dir parameterscur_date=&quot;$(date +&quot;%Y%m%d&quot;)&quot;backup_history_file=&quot;$&#123;db_backup_dir&#125;backup_history.log&quot;today_backup_dir=&quot;$&#123;db_backup_dir&#125;$&#123;cur_date&#125;&quot;if [ ! -d &quot;$today_backup_dir&quot; ];then $mkdir -p &quot;$today_backup_dir&quot;fiif [ ! -e &quot;$backup_history_file&quot; ];then $touch &quot;$backup_history_file&quot;fi# other parametersbackup_keep_days=2start_time=&quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&quot;# mysql commandmysql=&quot;$(which mysql)&quot;if [ $? -eq 0 ]; then echo &quot;&quot;Mysql command: &quot;$mysql&quot; else echo &quot;Not found mysql, exit.&quot; exit 1fimysqldump=&quot;$(which mysqldump)&quot;if [ $? -eq 0 ]; then echo &quot;&quot;Mysqldump command: &quot;$mysqldump&quot; else echo &quot;Not found mysqldump, exit.&quot; exit 1fiif [ -z &quot;$db_names&quot; ] then db_names=$(mysql -h$db_host -P$db_port -u$db_user -p$db_passwd -e &apos;show databases&apos;| grep -vE &apos;Database|information_schema|mysql|performance_schema&apos;)fifor db in $&#123;db_names[*]&#125;; do echo &quot;&quot;=============: &quot;$db&quot; $mysqldump -h$db_host -P$db_port -u$db_user -p$db_passwd $db &gt; &quot;$&#123;today_backup_dir&#125;/$&#123;db&#125;.sql&quot;done# delete +3 db backup dir$find $db_backup_dir -type d -mtime +$backup_keep_days -exec $rm -rf &#123;&#125; \;# record historyend_time=&quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&quot;start_seconds=$(date --date=&quot;$start_time&quot; +%s);end_seconds=$(date --date=&quot;$end_time&quot; +%s);echo &quot;$&#123;cur_date&#125;: &quot;$((end_seconds-start_seconds)) &gt;&gt; &quot;$backup_history_file&quot;echo &quot;$&#123;cur_date&#125;本次运行时间： &quot;$((end_seconds-start_seconds))&quot;s&quot;echo &quot;---------------Author: mingliang.gao---------------&quot;echo &quot;-------------------DB end backup-------------------&quot;echo &quot;***************************************************&quot;exit 0 Enjoy the good life everyday！！!]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql备份与恢复]]></title>
    <url>%2Farticles%2F37328%2F</url>
    <content type="text"><![CDATA[服务器16号到期，得抓紧时间迁移数据库，Mysql备份主要用的是Mysqldump，学习并记录一下Mysqldump命令。 Mysql Mysqldump 备份 恢复 ====================Mysqldump==================== Mysqldump备份的数据为.sql格式文件，可以用vim等编辑器打开，可以查看里面的内容，都是sql语句。 备份语法糖1mysqldump -h [db host] -P [db port] -u [db user] -p [db name] &gt; [file name].sql db host：数据库连接ip，如果是本机可省略不写，本机可以默认127.0.0.1。 db port：端口，默认3306。 -p：输入命令后，会让输入密码。 db user：数据库用户，必填。 db name：数据库名称。 file name：导出的sql文件（建议：绝对路径 + 名称）。 这是最基本的语法，下面解释一下mysqldump相关参数。 参数说明介绍一下常用参数。 基础参数 参数 说明 -h 数据库服务器host -p 数据库端口，默认3306 -u 连接数据库的用户 -p 用户对应的密码 -B &amp;&amp; –databases 指定导出的数据库，有这个参数之后，导出的sql文件中会有CREATE DATABASE。 -A –all-databases 导出全部数据库，同样导出的sql文件中也会包含创建数据库语句。 –add-drop-database 从参数上大致可以明白，创建数据库之前先执行drop数据库语句。 –add-drop-table 创建表之前执行drop数据表语句，默认参数，使用–skip-add-drop-table可取消。 –add-drop-table 创建表之前执行drop数据表语句，默认参数，使用–skip-add-drop-table可取消。 –add-locks 在数据insert插入增加LOCK TABLES，插入后UNLOCK TABLE，默认为打开状态，使用–skip-add-locks可取消，为了数据实时与安全，不建议取消。 -n &amp;&amp; –no-create-db 只导出数据，而不添加CREATE DATABASE 语句。 -t &amp;&amp; –no-create-info 只导出数据，而不添加CREATE TABLE 语句。 -d &amp;&amp; –no-data 不导出任何数据，只导出数据库表结构。 –compact 导出更少的输出信息，可以让缩小文件体积大小。 -c &amp;&amp; –complete-insert 使用完整的insert语句，包含列名称。 –default-character-set 设置导出字符集，默认值为utf8。 -single-transaction 适合Innodb事务数据库的备份，来保证备份的一致性，原理是设定本次会话的隔离级别为Repeatable read，来保证本次会话（也就是dump）时，不会看到其它会话已经提交了的数据。如果数据库引擎是Innodb，备份语句加上这个参数。查看数据库引擎：12345# Mysql支持哪些存储引擎show engines;# Mysql当前存储引擎show variables like &apos;%storage_engine%&apos;; –where, -w 只导出给定的WHERE条件选择的记录，主要用于备份表。 –set-gtid-purged=off 加了–set-gtid-purged=OFF时，在会记录binlog日志，如果不加，不记录binlog日志，所以在我们做主从用了gtid时，用mysqldump备份时就要加–set-gtid-purged=OFF，否则你在主上导入恢复了数据，主没有了binlog日志，同步则不会被同步。 -ignore-table 不导出指定表。指定忽略多个表时，需要重复多次，每次一个表。每个表必须同时指定数据库和表名。例如：–ignore-table=database.table1 –ignore-table=database.table2 常用命令 备份指定1个数据库 无–databases参数 建议使用 12345# 备份mysqldump -h [db host] -P [db port] -u [db user] -p [db name] &gt; [file name].sql# 恢复mysql -h [db host] -P [db port] -u [db user] -p [db name] &lt; [file name].sql 这样导出的数据无CREARE DARABASE语句，需要提前在新的数据库提前创建好数据库，在mysql恢复的时候指定数据库。数据进行恢复的时候，不会更改数据库原有配置，例如指定字符集之类的配置。如果新的数据不存在会存在报错：ERROR 1046 (3D000) at line 22: No database selected。 有–databases参数 12345# 备份mysqldump -h [db host] -P [db port] -u [db user] -p --add-drop-database --databases [db name] &gt; [file name].sql# 恢复mysql -h [db host] -P [db port] -u [db user] -p &lt; [file name].sql 加上–databases参数指定数据库之后，不需要手动创建数据，加上–add-drop-database参数，备份的sql文件中会先drop-create数据库，避免创建数据库出现问题。如果不加–add-drop-database参数，数据库已存在进行数据恢复会报错：database exist。 备份多个数据库 12345# 多个，在--databases后面加上导出的数据库，用空格分割mysqldump -h [db host] -P [db port] -u [db user] -p --add-drop-database --databases [db name1] [db name2] &gt; [file name].sql# 全部mysqldump -h [db host] -P [db port] -u [db user] -p --add-drop-database --all-databases &gt; [file name].sql 数据库备份不建议多个或者全部，在恢复的时候会把备份的数据都进行恢复，导致没问题的数据库也会进行恢复。不过应该有办法解决恢复多个数据库问题，还没查，日后会补上。 压缩命令来压缩备份文件 建议使用 12345# 备份mysqldump -h [db host] -P [db port] -u [db user] -p [db name] | gzip &gt; [file name].sql.gz# 恢复gunzip &lt; [file name].sql.gz | mysql -h [db host] -P [db port] -u [db user] -p [db name] 缩小体积，加快传输效率。 备份指定表 1mysqldump -h [db host] -P [db port] -u [db user] -p [db name] [table name] &gt; [file name].sql 如果是多个表，写在table name后面，用空格分割。 表数据或者表结构 这2个命令放到一起，便于记忆，但是针对于备份数据库来说，用的不是很多。1234567891011# 全部表结构备份mysqldump -h [db host] -P [db port] -u [db user] -p --no-data [db name] &gt; [file name].sql# 全部表数据备份mysqldump -h [db host] -P [db port] -u [db user] -p --no-create-info [db name] &gt; [file name].sql# 指定表结构备份mysqldump -h [db host] -P [db port] -u [db user] -p --no-data [db name] [table name] &gt; [file name].sql# 指定表数据备份mysqldump -h [db host] -P [db port] -u [db user] -p --no-create-info [db name] [table name] &gt; [file name].sql -d = –no-data -t = –no-create-info ====================Mysql==================== 恢复 标准 1mysql -h [db host] -P [db port] -u [db user] -p &lt; [file name].sql 指定数据库 1mysql -h [db host] -P [db port] -u [db user] -p [db name] &lt; [file name].sql 压缩文件 1gunzip &lt; [file name].sql.gz | mysql -h [db host] -P [db port] -u [db user] -p [db name] 学习参考 Mysqldump官网：https://dev.mysql.com/doc/refman/5.6/en/mysqldump.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器SSH长连接设置]]></title>
    <url>%2Farticles%2F13423%2F</url>
    <content type="text"><![CDATA[SSH经常服务器之后，只要几分钟不去操作服务器，几分钟就会断开，经常重启一个新的终端（iTerm：command+t）重新进行ssh连接。这种影响操作的事情不能容忍，上网寻求帮助，自己做个记录。 SSH 长连接 ssh连接到，远程服务器，切换到root用户。 sshd_config 开放一下3个配置。123TCPKeepAlive yesClientAliveInterval 60ClientAliveCountMax 10 TCPKeepAlive：保持TCP长时间连接。 ClientAliveInterval：每隔xxx秒发送向客户端发送一次包，检测是否活动状态的间隔时间。 ClientAliveCountMax：发包请求次数，达到指定次数未收到回应，主动断开连接。 设置完上面之后，如果客户端无响应，最多存留10分钟。 重启sshd服务 Root用户操作。1systemctl sshd restart 弊端 w查看当前服务器登录用户。 ssh连接中会存在重复用户。 ssh连接长时间不断开也不操作，影响服务器性能，浪费资源。 建议 kill掉重复用户。 养成好习惯，不用的时候exit进行推出。 kill终端 w列出当前登录用户信息，包含终端信息，第二列。 123456[mingliang.gao@VM-0-15-centos ~]$ w -s 23:18:23 up 10 days, 11:17, 3 users, load average: 0.00, 0.01, 0.05USER TTY FROM IDLE WHATminglian pts/0 123.179.117.77 1:07m sshd: mingliang.gao [priv]minglian pts/1 123.179.117.77 1:04m -bashminglian pts/3 123.179.117.77 7.00s w -s ps -t pts/1查询终端进行进程ID。 kill 进程ID 或者直接一个命令：1pkill -kill -t pts/1 内容希望有帮助。。。。。。]]></content>
      <categories>
        <category>服务器</category>
        <category>协议类</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>协议类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH登录服务器显示佛主保佑]]></title>
    <url>%2Farticles%2F14163%2F</url>
    <content type="text"><![CDATA[Linux root操作。1vim /etc/motd 添加下列图形：1234567891011121314151617181920212223242526272829303132333435363738 _oo0oo_ 088888880 88&quot; . &quot;88 (| -_- |) 0\ = /0 ___/&apos;---&apos;\___ .&apos; \\\\| |// &apos;. / \\\\||| : |||// \\ /_ ||||| -:- |||||- \\ | | \\\\\\ - /// | | | \_| &apos;&apos;\---/&apos;&apos; |_/ | \ .-\__ &apos;-&apos; __/-. / ___&apos;. .&apos; /--.--\ &apos;. .&apos;___ .&quot;&quot; &apos;&lt; &apos;.___\_&lt;|&gt;_/___.&apos; &gt;&apos; &quot;&quot;. | | : &apos;- \&apos;.;&apos;\ _ /&apos;;.&apos;/ - &apos; : | | \ \ &apos;_. \_ __\ /__ _/ .-&apos; / / =====&apos;-.____&apos;.___ \_____/___.-&apos;____.-&apos;===== &apos;=---=&apos;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 将进酒 -- 李白 君不见黄河之水天上来，奔流到海不复回。 君不见高堂明镜悲白发，朝如青丝暮成雪。 人生得意须尽欢，莫使金樽空对月。 天生我材必有用，千金散尽还复来。 烹羊宰牛且为乐，会须一饮三百杯。 岑夫子，丹丘生，将进酒，杯莫停。 与君歌一曲，请君为我倾耳听。 钟鼓馔玉不足贵，但愿长醉不复醒。 古来圣贤皆寂寞，惟有饮者留其名。 陈王昔时宴平乐，斗酒十千恣欢谑。 主人何为言少钱，径须沽取对君酌。 五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。 其他图形：http://www.asciiworld.com/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux其他篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux云服务器环境初始化]]></title>
    <url>%2Farticles%2F49695%2F</url>
    <content type="text"><![CDATA[Linux SSH git Supervisor Swap Nginx 前言 新购买的腾讯云服务器需要在上面进行环境的一些处理以及软件安装，这里我介绍一下我的服务器初始化过程。 系统CentOS Linux release 7.5.1804 (Core) Linux查看系统版本：1234567891011121314151617181920cat /etc/*release*CentOS Stream release 8NAME=&quot;CentOS Stream&quot;VERSION=&quot;8&quot;ID=&quot;centos&quot;ID_LIKE=&quot;rhel fedora&quot;VERSION_ID=&quot;8&quot;PLATFORM_ID=&quot;platform:el8&quot;PRETTY_NAME=&quot;CentOS Stream 8&quot;ANSI_COLOR=&quot;0;31&quot;CPE_NAME=&quot;cpe:/o:centos:centos:8&quot;HOME_URL=&quot;https://centos.org/&quot;BUG_REPORT_URL=&quot;https://bugzilla.redhat.com/&quot;REDHAT_SUPPORT_PRODUCT=&quot;Red Hat Enterprise Linux 8&quot;REDHAT_SUPPORT_PRODUCT_VERSION=&quot;CentOS Stream&quot;CentOS Stream release 8CentOS Stream release 8cpe:/o:centos:centos:8 初始化用户 添加用户与组 12345678# 新建用户useradd mingliang.gao# 新建组groupadd opsdev# 用户设置密码passwd mingliang.gao# 用户添加工作组usermod -G opsdev mingliang.gao 配置用户root权限 root用户vim /etc/sudoers12root ALL=(ALL) ALLmingliang.gao ALL=(ALL) ALL 其他 12删除用户：userdel 用户名删除组：groupdel 组名 环境编码修改服务器系统环境编码，执行vim /etc/profile，加入一下内容：123# 编码export LC_ALL=en_US.UTF-8export LANG=en_US.UTF-8 查看环境编码：1234567891011121314151617181920[root@VM-4-7-centos mingliang.gao]# echo $LANGen_US.UTF-8[root@VM-4-7-centos mingliang.gao]# localelocale: Cannot set LC_CTYPE to default locale: No such file or directorylocale: Cannot set LC_ALL to default locale: No such file or directoryLANG=en_US.UTF-8LC_CTYPE=zh_CN.UTF-8LC_NUMERIC=&quot;en_US.UTF-8&quot;LC_TIME=&quot;en_US.UTF-8&quot;LC_COLLATE=&quot;en_US.UTF-8&quot;LC_MONETARY=&quot;en_US.UTF-8&quot;LC_MESSAGES=&quot;en_US.UTF-8&quot;LC_PAPER=&quot;en_US.UTF-8&quot;LC_NAME=&quot;en_US.UTF-8&quot;LC_ADDRESS=&quot;en_US.UTF-8&quot;LC_TELEPHONE=&quot;en_US.UTF-8&quot;LC_MEASUREMENT=&quot;en_US.UTF-8&quot;LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;LC_ALL= VIM新的云服务器初始化环境只有VI，但是编辑的时候VIM很好用，需要安装。 安装 1yum -y install vim 配置 vi /etc/vimrc，打开vimrc配置问题添加一下2行简单配置，如果详细配置请百度。12set nu &quot; 设置显示行号set showmode &quot; 设置在命令行界面最下面显示当前模式等 SSH用于免密码连接登录。12ssh-copy-id 用户@服务器IP输入用户登录密码 详情：SSH之免密码登录 SWAP有些人可能对swap可能陌生，简单说下SWAP可以理解成虚拟内存，当服务器物理内存不足时，拿出部分硬盘指定空间当swap分区（虚拟成内存）使用，从而解决内存容量不足的情况。可以先free一下看下是否又swap，如果想配置请用root用户操作。 生成 1234dd if=/dev/zero of=/var/swap bs=1024 count=3072000mkswap /var/swapswapon /var/swapfree -m 解释一下dd，可以理解成dd获取了磁盘的一块空间，有兴趣的可以深入学习一下dd。 Swap开机初始化 vi /etc/fstab，最后一行添加1swap /var/swap swap defaults 0 0 清理swap 1swapoff /var/swap Swap活跃使用度 vim /proc/sys/vm/swappiness，范围是0～100，指数越大使用的活跃度越大，建议30-50即可。 GIT 查看 1which git 安装 1yum -y install git 配置 下面是全局配置，也可以在单独的git项目中单独配置属于项目的git配置。1234567# 用户名git config --global user.name &quot;mingliang.gao&quot;# 邮箱git config --global user.email &quot;gaoming971366@163.com&quot;# 查看配置git config --list MariaDBMariaDB安装与配置 Miniconda 下载 这里介绍2种方式，第一种就是直接去官网下载：https://docs.conda.io/projects/miniconda/en/latest/第二种方式直接在服务器上执行wget：1wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 安装 1base Miniconda3-latest-Linux-x86_64.sh Do you accept the license terms? [yes|no] 输入yes接受许可条款 配置安装路径，默认安装到根目录下的，可自定义路径（建议/usr/local/miniconda） 等待安装后，出现Do you wish the installer to initialize Miniconda3，如果输入yes会对~/.bashrc文件添加一下内容1234567891011121314# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;# !! Contents within this block are managed by &apos;conda init&apos; !!__conda_setup=&quot;$(&apos;/usr/local/miniconda/bin/conda&apos; &apos;shell.bash&apos; &apos;hook&apos; 2&gt; /dev/null)&quot;if [ $? -eq 0 ]; then eval &quot;$__conda_setup&quot;else if [ -f &quot;/usr/local/miniconda/etc/profile.d/conda.sh&quot; ]; then . &quot;/usr/local/miniconda/etc/profile.d/conda.sh&quot; else export PATH=&quot;/usr/local/miniconda/bin:$PATH&quot; fifiunset __conda_setup# &lt;&lt;&lt; conda initialize &lt;&lt;&lt; 配置 生效：1source ~/.bashrc 禁止用户登录后自动激活base环境：1conda config --set auto_activate_base 具体conda命令请参考学习官网或者baidu。 Gunicorn 安装 在python项目运行环境中会进行安装，单独安装命令：1pip install gunicorn 日志配置 python项目需要用到，提前建好，用来存放日志，root用户执行。1mkdir -p /var/log/gunicorn Supervisor 安装 1234567yum install -y supervisor# 启动服务systemctl start supervisord# 开机自启动：systemctl enable supervisord 查看下进程 1ps -ef | grep supervisord 系统默认的启用命令是：/usr/bin/supervisord -c /etc/supervisord.conf 自定义配置 切换root执行。1234echo_supervisord_conf &gt; /etc/supervisord.d/supervisord.confcd /etc/supervisord.dmkdir includemkdir -p /var/log/supervisord echo_supervisord_conf是配置文件写入，把项目配置文件与是sp的配置文件放在一起便于管理，建立include存放项目的对应配置文件，以下是本人的配置文件：1234567891011121314151617181920212223242526272829[unix_http_server]file=/var/run/supervisor.sock ;;UNIX socket 文件，supervisorctl会使用其与supervisord通信chmod=0777 ;;socket文件的mode，默认是0700，改成0777: chmod 777 /var/run/supervisor.sock;chown=nobody:nogroup ;;socket文件的owner，格式：uid:gid;[inet_http_server] ;;web管理界面;port=0.0.0.0:10001 ;;Web管理后台运行的IP和端口;username=mingliang.gao ;;登录管理后台的用户名;password=971366 ;;登录管理后台的密码[supervisorctl]serverurl=unix:///var/run/supervisor.sock ;;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致;serverurl=http://0.0.0.0:10001 ;;通过HTTP的方式连接supervisord[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface[supervisord]logfile=/var/log/supervisord/supervisord.log ;;日志文件logfile_maxbytes=50MB ;;日志文件大小，超出会rotate，默认 50MB。如果设成0，表示不限制大小logfile_backups=10 ;;日志文件保留备份数量默认10，设为0表示不备份loglevel=info ;;日志级别，默认info，其它: debug,warn,tracepidfile=/var/run/supervisord.pid ;;pid 文件nodaemon=false ;;是否在前台启动，默认是false，即以 daemon 的方式启动minfds=1024 ;;可以打开的文件描述符的最小值，默认 1024minprocs=200 ;;可以打开的进程数的最小值，默认 200[include]files = /etc/supervisord.d/include/*.conf 启动命令：/usr/bin/supervisord -c /etc/supervisord.d/supervisord.conf-c为指定配置文件。 这样启动的supervisor如果重启需要杀死进程：12ps -ef | grep supervisordkill 进程ID 为了方便我把2个命令合并到一起：1ps -ef | grep supervisord | grep -v grep | awk -F &quot; &quot; &apos;&#123;print $2&#125;&apos; | xargs kill 直接执行上面这句话就可以直接杀死进行，这是个通用杀死指定进程的命令，只需要更换grep supervisord需要查询过滤的进程关键字。 其他 贴一下自己的supervisord项目配置文件。12345678910111213[program:open2lisapi]directory=/home/mingliang.gao/projects/open2lisapicommand=/home/mingliang.gao/projects/open2lisapi/.venv/bin/gunicorn -c /home/mingliang.gao/projects/open2lisapi/etc/prod/gunicorn.conf wsgi:app ;; ERROR (no such file)，把gunicorn启动命令写全，绝对路径autostart=True ;; 是否开机自动启动autorestart=True ;; 是否挂了自动重启startretries = 3 ;; 启动失败自动重试次数，默认是 3redirect_stderr=True ;; 是否把stderr定向到stdoutstopasgroup=True;;user=mingliang.gao ;;用哪个用户启动进程，默认是rootpriority=999 ;;进程启动优先级，默认999，值小的优先启动stdout_logfile_maxbytes=20MB ;;stdout 日志文件大小，默认50MBstdout_logfile_backups = 20 ;;stdout 日志文件备份数，默认是10stdout_logfile=/var/log/supervisord/supervisor_open2lisapi.log Nginx 检查gcc环境 gcc编译器。12345# 检查gcc环境gcc -v# 安装yum -y install gcc 安装Nginx root用户或者sudo命令。12345# 查看版本yum list | grep nginx# 安装yum -y install nginx 安装后执行whereis Nginx 执行目录：/usr/sbin/nginx 模块所在目录：/usr/lib64/nginx 配置所在目录：/etc/nginx/ 默认站点目录：/usr/share/nginx/html 启动 12345678# 启动/停止/重启systemctl start/stop/restart nginx.service# 开启启动systemctl enable nginx.service# 重新加载配置systemctl reload nginx.service# 查看状态systemctl status nginx.service 查看进程 1ps -ef | grep nginx 开放端口 123456789# 添加端口firewall-cmd --zone=public --add-port=80/tcp --permanent# 重加载或者重启firewall-cmd --reloadsystemctl restart firewalld# 查看firewall-cmd --list-all 这里根据自己的项目需求，对外开放端口。 配置 下面是我的nginx配置，仅供参考：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495# For more information on configuration, see:# * Official English Documentation: http://nginx.org/en/docs/# * Official Russian Documentation: http://nginx.org/ru/docs/user root;worker_processes 2;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events &#123; # use epoll worker_connections 1024;&#125;# sendfile on;# tcp_nopush on;# keepalive_timeout 65;# gzip压缩功能设置# gzip on;# gzip_min_length 1k;# gzip_buffers 4 16k;# gzip_http_version 1.0;# gzip_comp_level 6;# gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;# gzip_vary on;# http_proxy 设置# client_max_body_size 10m;# client_body_buffer_size 128k;# proxy_connect_timeout 75;# proxy_send_timeout 75;# proxy_read_timeout 75;# proxy_buffer_size 4k;# proxy_buffers 4 32k;# proxy_busy_buffers_size 64k;# proxy_temp_file_write_size 64k;# proxy_temp_path /usr/local/nginx/proxy_temp 1 2;http &#123; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf;# Settings for a TLS enabled server.## server &#123;# listen 443 ssl http2 default_server;# listen [::]:443 ssl http2 default_server;# server_name _;# root /usr/share/nginx/html;## ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;# ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;# ssl_session_cache shared:SSL:1m;# ssl_session_timeout 10m;# ssl_ciphers HIGH:!aNULL:!MD5;# ssl_prefer_server_ciphers on;## # Load configuration files for the default server block.# include /etc/nginx/default.d/*.conf;## location / &#123;# &#125;## error_page 404 /404.html;# location = /40x.html &#123;# &#125;## error_page 500 502 503 504 /50x.html;# location = /50x.html &#123;# &#125;# &#125;&#125; 因为有些参数在腾讯云服务器不能识别，所以有些被注释。 user root本人使用root用户启动，使用哪个用户就配置哪个 server配置，单独文件，存放/etc/nginx/conf.d1234567891011121314151617181920212223242526272829server &#123; listen 80; server_name _; access_log /var/log/nginx/default_server.access.log main; root /home/mingliang.gao/projects/blog; location = / &#123; # index index.html index.htm; index root.html; &#125; location / &#123; index index.jsp index.html index.htm; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-PORT $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; error_page 404 /error.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /error.html; location = /50x.html &#123; &#125;&#125; server_name：域名 listen：端口 常用命令 12345# 指定配置文件nginx -c /etc/nginx/nginx.conf# 重新加载配置文件，执行这个可以不用重启nginx -s reload 访问 配置完把nginx重启之后，访问IP:PORT。 源码安装 Nginx源码安装教程 详细连接MariaDB安装与配置Git服务器仓库并上传Supervisor学习：https://www.cnblogs.com/xuezhigu/p/7660203.html]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MariaDB安装与配置]]></title>
    <url>%2Farticles%2F3296%2F</url>
    <content type="text"><![CDATA[MariaDB 配置 user 前言 在腾讯云上的服务器到期了，又重新买了一个3年的，需要把项目、数据库、管理工具都得迁移新的机器，本篇主要讲MariaDB的安装、初始化以及一些配置，后续会给出一个云服务器环境初始化的讲解。简单说下Mysql与MariaDB的不同：MySQL创始人担心MySQL被Oracle收购后使用MySQL收费，于是基于MySQL6.0研发的分支研发了MariaDB，开源、性能、操作等与MySQL一样。 系统说明 Name Version 服务器 Centos7.5x64 MariaDB 5.5.68 正文安装1yum -y install mariadb mariadb-server mariadb为客户端 mariadb-server服务端 安装指定版本 1234567# yum 查询 &amp;&amp; 安装yum list | grep mariadbyum -y install mariadb-server.x86_64# rpm 不建议使用rpm -qa | grep mariadbrpm -ivh xxxxx 开启服务1234# 开启服务systemctl start mariadb# 设置为开机自启动服务systemctl enable mariadb Centos7之后，服务管理用systemctl。 初始化配置1mysql_secure_installation 执行数据库初始化命令： Enter current password for root (enter for none):回车就行，初始化的时候root密码默认是空的。 Set root password? [Y/n]是否设置root用户密码，输入y New password: Re-enter new password:输入2次root密码，2次不一样会让重新输入。 Remove anonymous users? [Y/n]是否移除匿名用户，输入 y Disallow root login remotely? [Y/n]是否拒绝root远程登录，建议输入y，毕竟是root，为了数据安全，为每个数据库创建指定用户，在创建一个总的用户来进行操作，后续会给出相关配置。 Remove test database and access to it? [Y/n]是否删除test数据库，输入y，不需要测试数据库。 Reload privilege tables now? [Y/n]重新加载权限表，输入y。 测试1mysql -u root -p 输入密码即可。 配置UTF-8字符切换root用户，vim操作。 /etc/my.cnf 在[mysqld]标签下添加12345init_connect=&apos;SET collation_connection = utf8_unicode_ci&apos;init_connect=&apos;SET NAMES utf8&apos;character-set-server=utf8collation-server=utf8_unicode_ciskip-character-set-client-handshake /etc/my.cnf.d/client.cnf 在[client]标签下添加1default-character-set=utf8 /etc/my.cnf.d/mysql-clients.cnf 在[mysql]标签下添加1default-character-set=utf8 重启服务 1systemctl restart mariadb 查看字符集 12show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;; 创建用户上面说过了，创建一个新的用户用来管理或者连接所有数据，这个账号可以作为管理账号，以后创建每一个数据库都对应创建一个用户，分配指定权限，用于数据隔离。创建用户之前在Mysql常用命令中我已经总结了，在这里直接干命令了。连接数据库：12345create user &apos;mingliang.gao&apos;@&apos;%&apos; identified by &apos;密码&apos;;grant all privileges on *.* to &apos;mingliang.gao&apos;;# 授权root访问，建议禁止grant all privileges on *.* TO &apos;root&apos;@&apos;%&apos; identified by &apos;密码&apos; WITH GRANT OPTION;flush privileges; 创建一个mingliang.gao的用户，%代表可以远程连接。 授权所有数据库*所有表对mingliang.gao用户，第一个星号为数据库，第二个为表内容，常用的就是第一个星号改成对应分配的数据以及用户。 开启远程连接云服务器都是禁用端口访问的，所以需要开启，这里用到了firewall-cmd命令，不清楚的可以baidu一下。Root用户操作：12# 查看所有防火墙信息firewall-cmd --list-all 1234567891011121314[sudo] password for mingliang.gao:public target: default icmp-block-inversion: no interfaces: sources: services: dhcpv6-client ssh ports: 3306/tcp protocols: masquerade: no forward-ports: source-ports: icmp-blocks: rich rules: 123456# 添加端口firewall-cmd --zone=public --add-port=3306/tcp --permanent# 加载或者重启firewall-cmd --reloadsystemctl restart firewalld 添加完需要reload或者重启服务，在进行list-all查询，在本机或者其他机器可以进行连接了。 结束语后续会出一篇关于云服务器初始化环境的文章。 既然决定了在技术道路上走下去，就要坚持，致自己。。。。。。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows常用命令]]></title>
    <url>%2Farticles%2F48352%2F</url>
    <content type="text"><![CDATA[目前换工作之后，对于Windows系统的机子或者服务器接触日益频繁，身为一个开发，无时不刻不能忘记自己的使命，用命令去装13。在这里总结一下常用的Windows常用的系统命令，比如：cmd、shutdown、compmgmt.msc、net等等，方便快捷的打开需要的软件或者设置。 Windows 常用命令 方式 command + R打开允许，输入命令。 常用命令 describe command 控制台 cmd 打开资源管理器（我的电脑） explorer 注销 logoff 关机（60s后） shutdown 计算机管理 compmgmt.msc 系统服务 services.msc 任务管理器 taskmgr 记事本 notepad 垃圾整理 clearmgr 开启/关闭XXXXX服务 net start/stop XXXXX 计算器 calc 注册表 regedit.exe 远程桌面连接 mstsc 学习参考 Windows命令大全：https://www.jb51.net/article/141568.htm]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ADB模拟按键代码]]></title>
    <url>%2Farticles%2F11756%2F</url>
    <content type="text"><![CDATA[DB2 keycode desc 3 HOME 键 4 返回键 5 打开拨号应用 6 挂断电话 24 增加音量 25 降低音量 26 电源键 27 拍照（需要在相机应用里） 64 打开浏览器 82 菜单键 85 播放/暂停 86 停止播放 87 播放下一首 88 播放上一首 122 移动光标到行首或列表顶部 123 移动光标到行末或列表底部 126 恢复播放 127 暂停播放 164 静音 176 打开系统设置 187 切换应用 207 打开联系人 208 打开日历 209 打开音乐 210 打开计算器 220 降低屏幕亮度 221 提高屏幕亮度 223 系统休眠 224 点亮屏幕 231 打开语音助手 276 如果没有 wakelock 则让系统休眠 暂时总结这么多，欢迎留言补全。。。。。。]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>ADB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2导入与导出]]></title>
    <url>%2Farticles%2F33542%2F</url>
    <content type="text"><![CDATA[继续学习DB2，本篇主要关于导入与导出的操作。 DB2 导入 导出 说明：操作在db2cmd控制台。 导入模式说明：一共有5种。 CREATE：首先创建目标表和它的索引，然后将数据导入到新表中。该选项惟一支持的文件格式是 PC/IXF，还可以指定新表所在表空间的名称。 INSERT：将导入的数据插入表中，目标表必须已经存在。 INSERT_UPDATE：将数据插入表中，或者更新表中具有匹配主键的行。目标表必须已经存在，并且定义了一个主键。 REPLACE：删除所有已有的数据，并将导入的数据插入到一个已有的目标表中。 REPLACE_CREATE：如果目标表已经存在，则导入实用程序删除已有的数据，并插入新的数据，就像REPLACE选项那样；如果表结构不存在。创建。 codepage编码： 1386 GBK 1208 UTF-8 文件格式del与ixf区别： del格式是一个文本文件，文件按行来存储，含有回车的文本内容在del文件中会另起一行，del文件可视。 ixf格式保存的是结构和数据，是一个二进制文件，ixf文件不可视。 load和import区别： import导入是以insert方式插入数据。 import在导入数据的时候需要写入日志、load在导入数据的时候不需要写入日志。 import在导入数据的时候，目标表是可以进行访问和操作的，load只能进行select操作。 import在导入数据的时候，不能对索引模式进行选择，load可以。 import在导入数据的时候，不会使被导入数据表所属的表空间处于backup pending状态，而load会，当然如果load加nonrecoverable就可以避免表空间处于pending。 import在导入数据的时候，要进行各种约束性验证、触发器和参照完整性的约束，而load导入数据的时候只会进行唯一性检查和非法值检查，不会进行完整性检查，不会调用触发器。 load 12345678910# 无行警告db2 load from &apos;文件全路径&apos; of del modified by norowwarnings replace into 表名# 设置编码db2 load from &apos;文件全路径&apos; of del modified by codepage=1386 replace into 表名# 监控载入的进展db2 load query table 表名# 中断加载db2 load from &apos;文件全路径&apos; of del terminate into 表名 import 1234567891011121314151617181920# 标准db2 import from &apos;XXXX.ixf&apos; of ixf insert into table# 批量提交，达到5w条commit一次db2 import from &apos;filename&apos; of del COMMITCOUNT 50000 insert into tabname# 批量插入，一次插入500条db2 import from &apos;filename&apos; of del MODIFIED BY COMPOUND=500 insert into tabname# 导入条数限制，只导入1w条db2 import from &apos;filename&apos; of del ROWCOUNT 10000 insert into tabname# 导入指定起点数据db2 import from &apos;filename&apos; of del RESTARTCOUNT 10 insert into tabname# 警告数据的条数限制db2 import from &apos;filename&apos; of del WARNINGCOUNT 10 insert into tabname# 禁止发出行警告db2 import from &apos;filename&apos; of del MODIFIED BY NOROWWARNINGS insert into tabname 常用：1db2 import from &apos;filename&apos; of del MODIFIED BY COMMITCOUNT 50000 COMPOUND=1000 insert into tabname db21db2 –cvf xxx.sql 导入存储过程/函数 1db2 -td@ -v -f e:\procudure.sql 导出 export 单个表导出数据，支持IXF，DEL或WSF。12345678# 标准语法db2 export to &apos;XXXX.ixf&apos; of ixf select * from XXXX where XXXX# 不同字符集的导出 MODIFIED BY CODEPAGE=1386db2 exprot to &apos;filename.del&apos; of del MODIFIED BY CODEPAGE=1386 select * from XXXX where XXXX# 时间字段格式化的 MODIFIED BY TIMESTAMPFORMAT=&quot;yyyy-mm-dd hh:mm:ss tt&quot;db2 exprot to &apos;filename.del&apos; of del MODIFIED BY TIMESTAMPFORMAT=&quot;yyyy-mm-dd hh:mm:ss tt&quot; select * from XXXX where XXXX 其中XXXX.ixf、filename.del文件的路径+名称。 db2move 导入数据库的所有表及数据1db2move &lt;数据库名&gt; import db2look 导出表创建语句12db2look -d xxxpas -e -a -x -i pas -w pas123 -o e:\db2look.sqldb2look -d &lt;数据库名&gt; -u &lt;用户&gt; -e -o &lt;脚本名称&gt;.sql 备份与恢复缺点：必须断开所有连接，属于离线备份。 准备工作 首先，在指定存放文件备份的目前建立对应数据的文件夹。第二，在执行下列命令，断开所有连接：12345# 断开所有连接db2 force application all# 查看是否还有连着连接db2 list applications 如果还有连接，请继续等待，直至到没有连接。 备份 123db2 backup db &lt;database name&gt; [ to &lt;dir name&gt; ]# demodb2 backup db $生产库名 to $备份路径 PARALLELISM 2 COMPRESS database name：表示数据库。to dir name：表示为备份到的目录路径,为可选项,默认在当前目录下。 检查 1db2ckbkp -h &lt;database name&gt; 备份的数据库全名。 恢复 1db2 restore db &lt;OLD_DB_NAME&gt; [ from &lt;dir name&gt; ] taken at 20190505181334 into &lt;NEW_DB_NAME&gt; OLD_DB_NAME：表示恢复的数据库名。NEW_DB_NAME：新的数据库名称。from dir name：表示为备份到的目录路径,为可选项,默认在当前目录下。20190505181334：backup备份的时候有个时间。 历史备份查看 1db2 list history backup all for 数据库 学习参考导入与导出：https://blog.csdn.net/reaper1022/article/details/18601973]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DB2基础学习之常用命令]]></title>
    <url>%2Farticles%2F8747%2F</url>
    <content type="text"><![CDATA[工作环境的原因，第一次实际上使用到了DB2这个数据库，记录一下学习的要点与过程，都是一些比较基础的命令。 DB2 命令 基本操作 cmd 在系统cmd中执行的命令。12345# 普通用户db2cmd# 管理员cmd，有权限执行：db2start，db2stopdb2cmdadmin 创建数据库 123456# SAMPLE数据库db2sampldb2sampl -force# 标准数据库创建db2 create db TEST alias TEST using codeset gbk territory cn collate using system PAGESIZE 8 K 删除数据库 1db2 drop db XXXX 查看数据库列表 12345# 数据库db2 list db directory# 节点db2 list node directory 数据库连接 123456789# 连接db2 connect to XXXX user 用户名 using 密码# 断开（2种方式）db2 connect resetdb2 terminate# 断开所有db2 force application all 数据库添加schema connect数据库状态123456# 创建db2 CREATE SCHEMA XXXX# 设置db2 SET SCHEMA XXXX# 删除db2 DROP SCHEMA XXXX RESTRICT 授权 connect数据库状态授权在这里说2种，都是亲身实践 代码方式 语法糖：1db2 grant 权限 on database to user XXXX 注意：sql语句中的database是固定写法，不是数据库名称。 dbadm：DBADM 用户对一个数据库有几乎完全的控制能力。DBADM 用户不能执行某些维护或管理任务 CREATETAB：用户可以在数据库中创建表。 BINDADD：用户可以使用 BIND 命令在数据库中创建包。 CONNECT：用户可以连接数据库。 CREATE_NOT_FENCED：用户可以创建 unfenced 用户定义函数(UDF)。 IMPLICIT_SCHEMA：用户可以在数据库中隐式地创建模式，而不需要使用 CREATE SCHEMA 命令。 LOAD：用户可以将数据装载进表中。 QUIESCE_CONNECT：用户可以访问处于静默(quiesced)状态的数据库。 CREATE_EXTERNAL_ROUTINE：用户可以创建供应用程序和数据库的其他用户使用的过程。 secadm：安全性管理员 可视化操作方式 打开DB2的控制中心 点击要进行授权的数据库 找到用户和组对象-&gt;数据库用户 双击要进行授权的用户 勾选权限，确定 缓冲池 connect数据库连接状态12345678# 创建 XXXX为名称db2 CREATE BUFFERPOOL XXXX IMMEDIATE SIZE 250 AUTOMATIC PAGESIZE 8 K# 查看db2 select * from SYSCAT.BUFFERPOOLS# 删除db2 DROP BUFFERPOOL XXXX 数据库参数配置 12345# 查看db2 get db cfg# 更新db2 &quot;UPDATE DB CFG USING KEY VALUE&quot; 在更新的语法糖上，key为DB2数据库参数，value为参数值。 高级操作 表空间 表空间类别： 系统表空间（SYSCATSPACE）系统表空间又称为系统编目表空间，DB2系统编目表是DB2数据库保存所有DB2对象元数据的地方。 系统工具表空间（SYSTOOLSPACE）系统工具表空间是供DB2管理工具和SQL管理例程使用的特定表空。 用户表空间（USERSPACE）用户表空间也是数据库创建时自动创建的，表空间名称为USERSPACE1数据库中用户表默认存放于这个表空间中，必须至少有一个用户表空间。 临时表空间（TEMPSPACE）数据库管理器使用临时表空间在执行SQL操作时存储临时数据，例如排序，表重组，索引创建以及表链接等操作所产生的中间表都由临时表空间存储，数据库必须至少有一个临时表空间，也可以有多个。DB2支持系统临时表空间和用户临时表空间两种类型，系统临时表空间必须存在，用户临时表空间可以有0个或多个。 常规表空间常规表空间根据容量将表空间划分为常规表空间和大型表空间。 表空间管理类型： 系统管理表空间（SMS，System-Managed Space）数据存储空间完全由操作系统管理；SMS表空间的大小是可以动态增加的。 数据库管理表空间（DMS，Database-Managed Space）DMS表空间由数据库管理系统（DBMS）自己管理控制；这些容器的空间都是预先分配的且不允许修改大小的。 DMS自动存储表空间（Automatic Storage DMS）它是DMS存储的另外一种处理方法。DMS需要很多的维护操作，而自动存储器则是作为一种简化的空间管理手段， 12345678910111213141516171819# 创建db2 create large tablespace 表空间名 pagesize 页大小 managed by database using(容器类型 路径 大小) bufferpool 缓冲池名# 示例db2 CREATE LARGE TABLESPACE TBS_PAS PAGESIZE 16 K MANAGED BY DATABASE USING ( FILE &apos;/home/TBS_PAS01&apos; 1000M) BUFFERPOOL IBMDEFAULTBP# 删除db2 drop tablespace 表空间名# 增加表空间容器db2 ALTER TABLESPACE TBS_PAS add (FILE &apos;/home/TBS_PAS02&apos; 1000)# 增加容器会涉及到表空间容器的重新平衡，可使用命令db2 list utilities [show detail]# 更改表空间容器db2 ALTER TABLESPACE TBS_PAS resize (FILE &apos;/home/TBS_PAS02&apos; 1000M)# 删除表空间容器db2 ALTER TABLESPACE TBS_PAS drop (FILE &apos;/home/TBS_PAS02&apos;) 修改用户密码（控制台） 密码与系统用户保持一致，也可以通过更改用户密码来更改数据库用户密码12db2 connect to neu user db2admin using db2admindb2 connect to neu user db2admin using db2admin new 1 confirm 1 node节点操作 个人认为，node主要用于集群，如果是单节点，貌似没啥用1234567增加结点编目：db2 catalog tcpip node 结点名字 remote 结点所在ip地址 server 服务端口查看结点编目：db2 list node directory删除结点编目：db2 uncatalog node 结点别名增加数据库编目：db2 catalog db 远程数据库名字 as 数据库别名 at node 结点名字查看数据库编目：db2 list db directory删除数据库编目：db2 uncatalog db 数据库别名 拓展 命令编辑器 1db2ce 控制中心 1db2cc 配置助手 1db2ca 查看db2参数 1db2 list command options 坑 1.节点名称不能包含下划线 学习参考授权：http://blog.sina.com.cn/s/blog_626e70700102uxu0.htmlDB2删除schema：DB2删除schema表空间：http://macsishu.com/db23000/db23400node节点操作：http://blog.sina.com.cn/s/blog_4d887acf0102wydv.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git服务器仓库并上传]]></title>
    <url>%2Farticles%2F40662%2F</url>
    <content type="text"><![CDATA[项目要经常修改bug、上线等操作，如果是公司的话会有统一的gitlab、jenkins等工具，但是对于我个人来说，我自己的博客、开源项目都需要发不到服务器上。目前，本人经常用2种方式：把项目tar打包压缩，通过scp上传到服务器，解压，通过supervisor管理项目。在服务器上做一个git仓库，用来实时更新。本篇主要讲述第二种git仓库方式，完美使用！！！。 git 代码发布 版本管理 ssh 用户@服务器IP 切换目录 12345cd 目标目录# git目录mkdir -p /home/mingliang.gao/git# 项目目录mkdir -p /home/mingliang.gao/projects 这里要mkdir2个目录，一个用于存放git仓库，一个用于真实存放项目文件。 初始化仓库 12cd 仓库目录git init --bare 项目名.git 编辑post-receive钩子 12cd 项目名.git/hooksvim post-receive post-receive内容如下：12#!/bin/shgit --work-tree=/home/mingliang.gao/projects/blog --git-dir=/home/mingliang.gao/git/blog.git checkout -f –work-tree：项目实际目录–git-dir：仓库目录 post-receive权限 1chmod 777 post-receive push 到这里就可以对项目进行git操作，push项目到服务器了。]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Select2的基础使用]]></title>
    <url>%2Farticles%2F47159%2F</url>
    <content type="text"><![CDATA[写html的人必定用过select标签，样式确实有些。。。如果自己写样式可以。上网找select组件，发现select2，有好的组件咱们直接用就好了。 Select2 下载地址下载之后放在本地。CSS：https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.cssJS：https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js Demo1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link href=&quot;select2-4.1.0/select2.min.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;select2-4.1.0/select2.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;select class=&quot;js-example-basic-single&quot; name=&quot;state&quot; multiple=&quot;multiple&quot; style=&quot;width: 100%;&quot;&gt; &lt;option value=&quot;AL&quot;&gt;Alabama&lt;/option&gt; &lt;option value=&quot;WY&quot;&gt;Wyoming&lt;/option&gt; &lt;/select&gt;&lt;/body&gt;&lt;script&gt; $(document).ready(function() &#123; $(&apos;.js-example-basic-single&apos;).select2(); &#125;);&lt;/script&gt;&lt;/html&gt; 需要其他写法的可以查看官网。 配置1234567891011$(&apos;#problem_types&apos;).select2(&#123; placeholder: &apos;可多选，最多支持4个一级分类，支持模糊查询&apos;, maximumSelectionLength: 4, allowClear: true, closeOnSelect: false, selectionCssClass: &apos;info_red&apos;, //dropdownCssClass: &apos;info_red&apos;, tags: false, tokenSeparators: [&apos;,&apos;, &apos; &apos;], // 多选 - 输入逗号和空格会自动完成一个选项 前提是：tags: true //theme: &quot;classic&quot;&#125;); multiple：支持多选 placeholder：标签的默认文字显示 maximumSelectionLength：最大选择的个数 allowClear：启用一键清除选择的功能 closeOnSelect：是否选择一个就关闭option选择栏 selectionCssClass：选择的options类x的样式类 dropdownCssClass：下拉列表的文字样式 tags：是否启动自定义选择的功能 tokenSeparators：输入逗号和空格会自动完成一个选项 前提是：tags: true theme：select2的样式，目前只看到了classic还有默认 学习参考官网：https://select2.org/配置：https://select2.org/configuration/options-api]]></content>
      <categories>
        <category>前端应用</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端组件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript添加和移除Class类名]]></title>
    <url>%2Farticles%2F27102%2F</url>
    <content type="text"><![CDATA[Javascript 背景 最近再写一个综合系统，包含业务部分、日常任务管理、软件/模板管理等多种功能，前端使用的Adminlte样式，基于Bootstrap的。但是，写HTML经常会遇到添加和移除Class类名的情况，经常忘记，写个blog来记录。 添加Class类名 方法一 一次只能设定一个类。123456// 获取元素element = document.getElementById(&apos;元素id&apos;);element.className = &apos;类名&apos;;// 等同代码document.getElementById(&apos;元素id&apos;).className = &apos;类名&apos;; 方法二 用来设置自定义属性和值，如果是class，直接传入”class”即可；可以通过 .getAttribute 方法获取。12345element = document.getElementById(&apos;元素id&apos;);element.setAttribute(&apos;属性名&apos;,&apos;值&apos;);// 等同代码document.getElementById(&apos;元素id&apos;).setAttribute(&apos;属性名&apos;,&apos;值&apos;); 移除Class类名移除的方法与添加的方式都是对应的。 方法一 123456// 获取元素element = document.getElementById(&apos;元素id&apos;);element.className = &apos;&apos;;// 等同代码document.getElementById(&apos;元素id&apos;).className = &apos;&apos;; 方法二 直接通过removeAttribute移除。12345element = document.getElementById(&apos;元素id&apos;);element.removeAttribute(&apos;属性名&apos;);// 等同代码document.getElementById(&apos;元素id&apos;).removeAttribute(&apos;属性名&apos;);]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ADB设备包列表]]></title>
    <url>%2Farticles%2F14917%2F</url>
    <content type="text"><![CDATA[DB2 包名称 ID Package App 1 com.tencent.mm 微信 2 com.tencent.mobileqq QQ 3 com.tencent.weishi 微视 4 com.achievo.vipshop 唯品会 5 net.oschina.app OsChina 6 cn.wps.moffice_eng WPS Office 7 com.heytap.smarthome 智能家居 8 tv.danmaku.bili Bibi 9 com.netease.cloudmusic 网易云音乐 10 com.netease.newsreader.activity 网易新闻 11 com.taobao.taobao 淘宝 12 com.jingdong.app.mall 京东 13 com.baidu.netdisk 百度云 14 com.baidu.searchbox 百度浏览器 15 com.baidu.tieba 百度贴吧 16 com.baidu.BaiduMap 百度地图 17 sina.weibo 微博 18 com.tencent.tmgp.pubgmhd 和平精英 19 com.hpbr.bosszhipin Boss直聘 20 com.qiyi.video 爱奇艺 21 com.heytap.cloud Oppo云服务 22 com.sankuai.meituan 美团 23 cmb.pb 招商银行 24 com.chinamworld.main 建设银行 25 com.xingin.xhs 小红书 26 com.sdu.didi.psnger 滴滴 27 com.to8to.housekeeper 土巴兔 28 com.wuba 58同城 29 com.mfw.roadbook 马蜂窝 30 com.xunmeng.pinduoduo 拼多多 31 com.cubic.autohome 汽车之家 32 com.huatu.handheld_huatu 华图 33 com.zhongduomei.rrmj.society 人人视频 34 com.Qunar 去哪儿 35 qsbk.app 糗百 36 com.jiongji.andriod.card 百词斩 37 com.hipipal.qpyplus Python 38 com.qicai.translate 翻译官 39 com.autonavi.minimap 高德地图 40 com.smartisanos.smartfolder.aoa HandShaker 41 com.ss.android.ugc.aweme 抖音 持续更新中。。。。。。]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>ADB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ADB基础命令]]></title>
    <url>%2Farticles%2F61770%2F</url>
    <content type="text"><![CDATA[DB2 命令 Android Debug Bridge 搞了几天的ADB命令，记录一下，都是一些比较基础的命令。 环境：MacOs 安装1brew install android-platform-tools 服务12345# 启动adb服务adb start-server# 结束adb服务adb kill-server 指定端口服务：adb -P port start-server，这个port与设备tcpip开放的端口对应。 连接12345# 连接（one）-数据线adb devices# 连接/断开-IPadb connect/disconnect 设备IP 设备状态1adb get-state device：设备正常连接 offline：连接出现异常，设备无响应 unknown：没有连接设备 重启设备1adb -s 设备名称 reboot 重启到recovery/bootloader模式：adb reboot recovery/bootloader。 APP包 查看设备包 1adb shell pm list packages 不加参数，默认：所有应用 -f：显示应用关联的 apk 文件 -d：只显示 disabled 的应用 -e：只显示 enabled 的应用 -s：只显示系统应用 -3：只显示第三方应用 -i：显示应用的installer -u：包含已卸载应用 获取当前窗口APP包名 1234# 第一种adb shell dumpsys window | grep mCurrentFocus # 第二种adb shell dumpsys activity activities | grep mResumedActivity 启动包 1adb shell monkey -p com.ss.android.ugc.aweme -v 1 1: 代表事件次数 -v: 日志级别，-v/-v -v/-v -v -v 包名：ADB设备包列表。 安装/卸载应用程序 1234# 安装adb install -r 安装包a.apk# 卸载adb uninstall com.ss.android.ugc.aweme 安装：-r：允许覆盖安装-s：将应用安装到 sdcard-d：允许降级覆盖安装 卸载： -k：参数可选，表示卸载应用但保留数据和缓存目录 查看应用详细信息 1adb shell dumpsys package &lt;packagename&gt; 输出中包含很多信息，包括 Activity Resolver Table、Registered ContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。 查看应用安装路径 1adb shell pm path &lt;PACKAGE&gt; 清除应用数据与缓存 1adb shell pm clear 包名 强制停止应用 1adb shell am force-stop 包名（com.ss.android.ugc.aweme） 查看设备信息 型号 1adb shell getprop ro.product.model 电池状况 1adb shell dumpsys battery 屏幕分辨率 1234567adb shell wm size# 修改adb shell wm size 480x1024 # 恢复adb shell wm size reset 屏幕密度 1adb shell wm density 屏幕参数 1234567adb shell dumpsys window displays# 显示范围adb shell wm overscan 0,0,0,200 # 恢复adb shell wm overscan reset android_id 1adb shell settings get secure android_id CPU 1adb shell cat /proc/cpuinfo 与Linux查看实施cpu一致。 内存 1adb shell cat /proc/meminfo 同上。 设备shell1adb shell ls, cd, rm, mkdir, touch, pwd, cp, mv, ifconfig, netstat, ping, ps, top等，进入adb shell即可执行，与linux相似。 日志12345# 查看日志adb logcat# 清除日志adb logcat -c 操作 点击 1adb shell input tap 300 1000 x坐标 y坐标。 滑动 1adb shell input swipe 540 1300 540 500 100 起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标。 输入文本1adb shell input text hello 焦点处于某文本框。 输入系统keycode 1adb shell input keyevent XXXX keycode具参考：ADB模拟按键代码。 复制文件12345# 复制设备里的文件到电脑adb pull &lt;设备里的文件路径&gt; [电脑上的目录]# 复制电脑里的文件到设备adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt; 关闭USB调试模式1adb shell settings put global adb_enabled 0 实用工具 截图 12345# 新adb exec-out screencap -p &gt; sc.png # 旧adb shell screencap -p /sdcard/sc.png adb pull /sdcard/sc.png 录制屏幕 1adb shell screenrecord /sdcard/filename.mp4 adb pull /sdcard/filename.mp4 其他 Connection refused无线连接失败，执行一下命令：1adb tcpip 5555 Windows过滤关键字findstr 持续更新中。。。。。。 1]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>ADB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac卡顿Updating-Homebrew的解决方案]]></title>
    <url>%2Farticles%2F62547%2F</url>
    <content type="text"><![CDATA[问题背景 MacOS系统，用brew进行安装，但是每次执行brew install XXXX，都会有Updating Homebrew的提示，而且还要花费很久等待的时候，是时候展现真正的技术了。 归根结底就是brew开启了自动更新，关闭即可。 编辑配置文件 我用的是item2 + zsh。1vim ~/.zshrc 如果使用自带的shell，编辑下面文件：1vim ~/.bash_profile 文件结尾新增一行 1export HOMEBREW_NO_AUTO_UPDATE=true 重新加载配置文件 12source ~/.zshrcsource ~/.bash_profile]]></content>
      <categories>
        <category>日常问题</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[感谢DataTables的礼物]]></title>
    <url>%2Farticles%2F50358%2F</url>
    <content type="text"><![CDATA[背景 感谢DataTables赠送的七夕节小熊宝宝礼物。 简介：Datatables是一款jquery表格插件。它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。特色：实用 简单 上手快 DataTables官网：http://datatables.club/DataTables QQ交流群：20779435 欢迎大家一起来交流Share。。。。。。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux-学习之基础篇-cat]]></title>
    <url>%2Farticles%2F10790%2F</url>
    <content type="text"><![CDATA[Linux cat 基础教程系列 concatenate files and print on the standard output 简介 你看没错，本篇研究的是cat，不顾不是会动的cat，它是用来查看日志的cat。 介绍cat主要使用来查看文件的命令，其他的命令还有tac、tail（tail -f xxx 动态的查看日志）、awk（增强篇中已有）、sed、less、more等等，很多命令。 cat主要用来全量查看日志。 正文格式1cat [参数] [文件名] 参数说明 -n 对输出的文件添加行号，包含空行。 -b 对输出的文件添加行号，去掉空行。 常用命令 基本 1cat 文件名 可以是相对路径，也可以是绝对路径。 输出行号 123cat -n 文件名cat -n 文件名 &gt; 新文件 第二个命令可以把原来不带行号的文件输出到新的文件，并且带行号。 查找关键字的行 1cat 文件名 | grep &quot;关键字&quot; 这个命令平时用的相对较多。 补充关于其他查看日志的方式以后会陆续给出文章。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[邪恶力量]]></title>
    <url>%2Farticles%2F57641%2F</url>
    <content type="text"><![CDATA[《邪恶力量》 剧情 灵异 魔幻 悬疑 惊悚 简介美国驱魔类型题材的电视剧，目前已经出了十三季，本人看到第六季，very good，与《康斯但丁》大同小异。 推荐指数 ⭐️⭐️⭐️⭐️⭐️ 人物角色 主角：兄弟二人 主线剧情 兄弟二人代表人类，与特天使、恶魔进行斗智斗勇的故事。 观后感 科幻、刺激 观看地址 人人视频（并不是打广告，而且真的好用）。]]></content>
      <categories>
        <category>影视说</category>
      </categories>
      <tags>
        <tag>电视剧</tag>
        <tag>美国大片</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql常用命令]]></title>
    <url>%2Farticles%2F14802%2F</url>
    <content type="text"><![CDATA[记录一下常用的命令，虽然关于查询相关的命令常用（select、order by、where、join等），但是关于建立数据库、建立用户、授权等并不常用的命令，做个整理，也方便了自己进行查询和使用。 Mysql select into create user 创建数据库 1create database 数据库名称 default character set utf8 collate utf8_general_ci; 创建用户 12345678create user &apos;用户名&apos;@&apos;%&apos; identified by &apos;密码&apos;;-- % 表示通配符，任意远程主机都可以连接主机【常用】create user &apos;用户名&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;-- localhost 表示本机，用户只有通过本机进行连接主机create user &apos;用户名&apos;@&apos;XXX.XXX.XX.XXX&apos; identified by &apos;123456&apos;;-- XXX.XXX.XX.XXX 表示ip，用户只有通过指定的ip主机进行连接 授权 1234567891011121314151617181920# 所有权限 所有表【常用】grant all privileges on *.* to &apos;用户名称&apos;;# 授权root可以访问，不建议grant all privileges on *.* TO &apos;root&apos;@&apos;%&apos; identified by &apos;密码&apos; WITH GRANT OPTION;# 所有权限 指定数据库 外网连接【常用】grant all privileges on 数据库名称.* to &apos;用户名称&apos;@&apos;%&apos;;# 指定权限 指定数据库grant select,insert,update,delete,create on 数据库名称.* to &apos;用户名称&apos;;# 刷新生效flush privileges;# 查看权限，方案一show grants for &apos;用户名称&apos;;# 方案二use mysql;SELECT User, Password, Host FROM user; 创建用户 + 授权 1GRANT ALL PRIVILEGES ON etherpad.* TO &apos;etherpad&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; 其他 数据库列表：show database;表列表：show tables;切换数据库：use 数据库; 查询方面略]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抖音BMG]]></title>
    <url>%2Farticles%2F16635%2F</url>
    <content type="text"><![CDATA[背景 抖音记录美好生活记录自己喜欢的BGM，喜欢的请拿去，不用谢 Pygo batte fort 凤舞九天：https://music.163.com/#/song?id=1379910808&amp;userid=555314631 Dan Bălan-Lendo Calendo：https://music.163.com/#/song?id=1435770027&amp;userid=555314631 等什么君-赤伶：https://music.163.com/song?id=1447509197&amp;userid=555314631 杨千嬅-野孩子抖音：https://music.163.com/song?id=1385757429&amp;userid=555314631 猜不透 (咚鼓版)：https://music.163.com/song?id=1361558668&amp;userid=555314631 真的爱你 (咚鼓版)：https://music.163.com/song?id=1396568322&amp;userid=555314631 送给未来的你(DJ弹鼓版)：https://music.163.com/song?id=1425463866&amp;userid=555314631 Tony Igy-Astronomia：https://music.163.com/song?id=446154202&amp;userid=555314631 世间美好与你环环相扣：https://music.163.com/song?id=1399664349&amp;userid=555314631 Be Your Sun (DJ版)：https://music.163.com/song?id=1386946637&amp;userid=555314631 ProgHouse（DJ抖音版）：https://music.163.com/song?id=1401433235&amp;userid=555314631 Bingo（DJ抖音版）：https://music.163.com/song?id=22834906&amp;userid=555314631]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发实例之信息管理系统]]></title>
    <url>%2Farticles%2F12268%2F</url>
    <content type="text"><![CDATA[Python实战 Demo系统 Web flask 脚手架 背景 项目基于Python+mysql+gunicorn+supervisor进行搭建的一个web脚手架，python的web框架使用的是flask。架子已经基本搭建起来，备具Restful API、验证session、页面模板功能、一键式安装包、启动等功能。通过这个脚手架开发的一个信息管理综合小系统，用来做Demo，完美使用！！！。 环境说明 开发环境 id name Version 1 Os MacOS10.15.6 2 IDE PyCharm 基础架构 id name Version Function 1 Python 2.7 开发语言，基于python2 2 flask 1.1.2 使用的web框架 3 MariaDB 5.5.65 数据库 4 gunicorn 20.0.4 web服务与进程 5 supervisor 3.4.0 项目启动、停止、重启等操作 项目主要运行于Linux系统上，本人开发使用的是MacOS，线上服务使用的是腾讯云服务器（Centos7.0）。 项目说明 项目地址（gitub） https://github.com/GIS90/base_webframe Demo地址 地址：http://121.4.56.169:18888/ 账号：admin 密码：0 现有功能： 订单管理 任务管理 人员管理 下载功能 定制功能 问题检索 系统设置 环境搭建与项目运行 Centos7.0系统服务器（建议Mac或者云服务器） mysql数据库安装与配置（略，建议baidu一下） 安装git命令，如果有进行下一步（检测：which git） git clone https://github.com/GIS90/base_webframe.git 更新web配置文件：etc/prod/config.py（线上）、etc/dev/config.py（测试），根据不同需求进行项目更改 安装项目运行的环境：python install_env.py，建立项目独立的运行环境，安装了virtualenv、python、gunicorn、packages等操作，了解具体详情请参考代码 cd 项目根目录 项目根目录：source .venv/bin/activate：激活项目环境 启动项目：gunicorn -c etc/prod/gunicorn.conf（线上）、gunicorn -c etc/dev/gunicorn.conf（测试）或者手动启动（下面有介绍），关于dev/prod配置请参考上面介绍 【选做】：安装supervisor &amp;&amp; 项目加入supervisor进行管理，项目包含了supervisord配置文件&amp;&amp;项目supervisor配置文件 配置说明项目配置主要有2套，位于项目的根目录etc下： dev 测试环境 prod 线上环境 每套配置文件夹下有3个配置文件，config与gunicorn进行绑定： config：项目的db、mail、log等配置，这里的log记录项目的log，关于项目相关的配置都可以在此文件进行配置 gunicorn：项目启动时所需要的IP、port、log、进程数量等配置 supervisor: 项目管理的配置信息 .yaml格式的配置文件是有deploy/config.py进行解析的，如果在config.yaml配置文件中添加配置信息，需要在此文件进行解析添加，建议添加配置默认值。 手动启动 项目根目录wsgi.py文件加入 app.run(host=”0.0.0.0”, port=11111, debug=True) 执行sudo python wsgi.py，代码目前已写入，处于注释状态 注意：通过手动启动的项目为dev开发环境配置，可在deploy/config.py中进行默认调整（mode = os.environ.get(‘mode’) or ‘dev’）如果手动启动模式开启，在gunicorn进行启动，会error: [Errno 48] Address already in use.启动项目一定要用virtualenv安装的python环境进行启动（source .venv/bin/activate） 其他 安装包 手动进行包安装： 1pip install -r requirements.txt 此程序运行于python2，其中requirements.txt项目所需要的包，已固定版本。 supervisor 管理项目进程的启动、停止、重启等操作。 安装： 1pip install supervisor 配置： dev：etc/dev/supervisor_base_webframe.conf prod：etc/prod/supervisor_base_webframe.conf 把指定环境的supervisor_base_webframe.conf cp到/etc/supervisord.d/include/*下。项目root根目录下有supervisord.conf文件，用来配置supervisord。 管理gunicorn 负责web项目进程、服务。 安装： 1pip install gunicorn 配置： dev：etc/dev/gunicorn.conf prod：etc/prod/gunicorn.conf 如需特别项目启动信息，可以加入gunicorn.conf或者更改命令行gunicorn启动方式加入参数即可。 sql 创建sql： deploy&gt;sql&gt;table_create_sql.sql，直接执行即可。 插入sql： deploy&gt;sql&gt;print_insert_sql.py，具体需要哪些insert的数据，看代码，根据需要插入。 其他 base_webframe_start.bash、base_webframe_end.bash为手动方式进行项目启动与项目结束（已废弃）。 deploy&gt;utils&gt;utils.py 为工具方法，任何python2项目都适合使用。 结束语如果觉得脚手架还可以，麻烦在github上点个小星星。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx源码安装]]></title>
    <url>%2Farticles%2F47364%2F</url>
    <content type="text"><![CDATA[身为一个Python Web开发者，当然对Nginx的使用需要了解一点，本篇对Nginx安装进行记录，基于源码安装！！！。 Nginx 系统环境 腾讯云服务器：CentOS Linux release 7.5.1804 (Core) 安装依赖 gccNginx编译需要依赖编译依赖gcc环境，如果没有gcc环境，则需要安装： 1yum -y install gcc pcre pcre-devel都是正则表达库。 1yum install -y pcre pcre-devel zlib压缩和解压缩库。 1yum install -y zlib zlib-devel OpenSSL 安装ssl协议库。 1yum install -y openssl openssl-devel 下载Nginx源码包 访问下列地址，看使用哪个源码包进行下载，又开发版、稳定版、历史版本，建议稳定版。https://nginx.org/en/download.html，1wget https://nginx.org/download/nginx-1.18.0.tar.gz 使用wget进行下载，没有的搞一下，wget可是一个下载神器。 解压1tar -zxvf nginx-1.9.9.tar.gz 编译安装 1234567cd nginx-1.18.0./configuremakemake install 如果在编译安装过程中出现错误，大部分原因都是依赖问题，yum去解决依赖问题即可。 查看安装目录1whereis nginx 执行目录：/usr/sbin/nginx模块所在目录：/usr/lib64/nginx配置所在目录：/etc/nginx/默认站点目录：/usr/share/nginx/html 启动 两种方式启动。123# 启动/停止/重启systemctl start/stop/restart nginx.servicenginx -c /etc/nginx/nginx.conf 其他设置 123456# 开启启动systemctl enable nginx.service# 重新加载配置systemctl reload nginx.service# 查看状态systemctl status nginx.service 进程 查看进程 1ps -ef | grep nginx 杀死 1kill 进程ID 常用命令 12345# 指定配置文件nginx -c /etc/nginx/nginx.conf# 重新加载配置文件，执行这个可以不用重启nginx -s reload 开放端口 如果是云服务器，需要开放指定端口。123456789# 添加端口firewall-cmd --zone=public --add-port=80/tcp --permanent# 重加载或者重启firewall-cmd --reloadsystemctl restart firewalld# 查看firewall-cmd --list-all 这里根据自己的项目需求，对外开放端口。 访问 配置完把nginx重启之后，访问IP:PORT。]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之番外篇-nohup]]></title>
    <url>%2Farticles%2F23692%2F</url>
    <content type="text"><![CDATA[Linux nohub...& 后台运行命令 番外教程系列 简介 用途：用于linux后台执行命令，与&amp;一起使用，nohup不挂断地运行命令（退出终端不会影响程序的运行）。语法：nohup command 参数 2&gt;&amp;1 &amp; 这个就是比较实用而且没有任何参数的命令，语法糖就一种。 基本123[root@localhost ~/py_work]#nohup /root/py_work/start.sh &amp;[1] 31491[root@localhost ~/py_work]#nohup: ignoring input and appending output to ‘nohup.out’ 建议命令写全路径，在命令可以写成sh脚本，也可以是直接命令+参数形式。 执行完nohup的时候，出现日志说明，会在当前命令执行文件夹建立日志文件。 终端退出的时候建议用exit。 拓展1nohup /root/py_work/start.sh &gt; xxxxxx.log 2&gt;&amp;1 &amp; 2&gt;&amp;1说明：将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到日志xxxxxx.log文件中。 0 stdin (standard input）标准输入 1 stdout (standard output）标准输出 2 stderr (standard error）标准错误输出 /dev/null 表示空设备文件 输出文件中的方式： &gt; xxxx.log 输出到文件 &gt;&gt; xxxx.log 追加到文件]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux番外篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WIKI Confluence授权的延期]]></title>
    <url>%2Farticles%2F39160%2F</url>
    <content type="text"><![CDATA[简述 关于WIKI Confluence的延期授权 WIKI Confluence 授权 延期 解决方案 点击My Altassian，进入到https://my.atlassian.com/官网。 点击New Trial License，创建新的Trial License。 选择相关对应的产品：confluence。 使用admin登录confluence服务器。 查看confluence的服务器ID，在设置-&gt;一般配置-&gt;管理→授权细节，复制服务ID信息。 在填写New Trial License页面的相关信息，选择confluence产品，输入服务器ID，在create license，会自动生成授权码（复制）。 回到confluence授权细节页面，把复制的授权码粘贴在授权细节中的授权码，点击保存，完成延期使用。]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>WIKI</tag>
        <tag>运维工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql的表复制]]></title>
    <url>%2Farticles%2F34145%2F</url>
    <content type="text"><![CDATA[Mysql 表复制 INSERT INTO SELECT * INTO 背景 玩数据的都会涉及数据库，虽然Navicate带来了许多便利，但是本人还是喜欢使用sql，本篇介绍一下关于表复制的相关sql。 正文表复制分为表结构复制、表数据复制与整表（表结构+表数据）复制。 表结构 123456789# 创建表结构CREATE TABLE 新表 LIKE 旧表;CREATE TABLE 新表 SELECT * FROM 旧表 WHERE 1=2;SELECT * INTO 表2 FROM 表1 WHERE 1=2;# 查看创建表的sqlSHOW CREATE TABLE 旧表; 表数据 123SELECT * INTO 新表 FROM 旧表;INSERT INTO 新表 SELECT * FROM 旧表; 表结构+表数据 1CREATE TABLE 新表 SELECT * FROM 旧表; 弊端：新表中没有旧表的primary key、auto_increment等属性，需要通过alter进行添加。 建议如果是想复制出一个一模一样的表，建议使用：1234# 查看创建表的sqlSHOW CREATE TABLE 旧表;INSERT INTO 新表 SELECT * FROM 旧表;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux-学习之增强篇-crontab]]></title>
    <url>%2Farticles%2F40314%2F</url>
    <content type="text"><![CDATA[简介 Linux自带的定时任务命令。 Linux crontab 高级教程系列 定时任务 推荐指数1🌟🌟🌟 基本介绍定时去执行指定的程序。 首先，先查看一下命令基础使用规则：123456789101112131415[root@localhost ~]#cat /etc/crontabSHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 结合上图，可以语法糖：分钟 小时 日期 月份 星期 [用户] 命令 参数详解crontab的参数很少。 -e 编辑任务，已vim的方式打开crontab的任务列表，可以进行新增、编辑、删除等任务操作。 -l 查看任务，相当于cat 任务表。 符号说明 * 代表全部，默认*。 / 代表除，符合能被后面等数整除的条件，例如：/2 - 代表范围，8-12包含：8、9、10、11、12 ,（英文） 代表指定的数，1,10,22，只有在1,10,22才执行 常用命令 每小时的第5和第10分钟执行command 15,10 * * * * command 每隔5min执行command 1*/5 * * * * command 每隔1小时执行command 1* */1 * * * command 8点的第5分钟执行command： 15 8 * * * command 8-11点的第5和10分钟执行command： 15,10 8-11 * * * command 每周一8-11点的第5和10分钟执行command： 15,10 8-11 * * 1 command 每月1，5，10号的8-11点的第5和10分钟执行command： 15,10 8-11 1,5,10 * 1 command 特别说明crontab很简单，但是很实用，欢迎大家一起交流share。 Crontab指定用户运行任务]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux增强篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux-学习之增强篇:firewall-cmd]]></title>
    <url>%2Farticles%2F60013%2F</url>
    <content type="text"><![CDATA[简介 CentOS7开始，默认使用firewall来配置防火墙，没有安装iptables（旧版默认安装）。时代在更新、CentOS也在更新，我们也必须要更新。 Linux 防火墙 高级教程系列 防火墙没什么好说的，直接开始正餐。 推荐指数1🌟🌟🌟🌟🌟 安装1yum install firewalld 使用方法 查看运行状态 command firewall-cmd –state systemctl status firewalld 启动 function command 开启服务 systemctl start firewalld.service 关闭服务 systemctl stop firewalld.service 开机自动启动 systemctl enable firewalld.service 关闭开机启动 systemctl disable firewalld.service 增加端口 function command 永久 firewall-cmd –permanent –zone=public –add-port=8080-8081/tcp 临时 firewall-cmd –zone=public –add-port=8080-8081/tcp firewall-cmd：Linux中提供的操作firewall的工具。– zone：指定作用域。– add-port=3306/tcp：添加的端口，格式为：端口/通讯协议。– permanent：表示永久生效，没有此参数重启后会失效。 删除端口 1firewall-cmd --zone=public --remove-port=3306/tcp --permanent 改变端口即可。 查看端口 function command 简略 firewall-cmd –list-ports 详情 firewall-cmd –list-ports 其他知识关于–zone=public，应该会有人不了解，对–zone的参数做个说明： type desc drop 任何接受的网络数据包都被丢弃，没有任何回复 block 任何接收的网络连接都被IPv4的icmp-host-prohibited信息和IPv6的icmp6-adm-prohibited信息所拒绝 public 在公共区域内使用，不能相信网络内的其他计算机不会对你的计算机造成危害 external 特别是为路由器启动了伪装功能的外部网 dmz 用于你的非军事区内的电脑 work 用于工作区 home 用于家庭网络 internal 用于内部网络。你可以基本相信网络内的其他计算机不会危害到你 trusted 可接受所有的网络连接 firewalld 的默认zone是public。 详细了解firewall-cmd，请使用firewall-cmd –help查看。 特殊说明添加完端口之后，记得reload或者重启，重新加载，否则不会生效。123456# reloadfirewall-cmd --reload# restart#别忘记重启防火墙systemctl restart firewalld 本人也是属于探索阶段，欢迎大家一起交流，有问题请在博客进行留言。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux增强篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之基础篇-ps]]></title>
    <url>%2Farticles%2F9834%2F</url>
    <content type="text"><![CDATA[Linux process status 基础教程系列 process status 简介 学习ps的用法【ps 参数】，显示系统进程。 介绍Linux中有很多命令可以查询正在运行的进程的信息，其中ps与top最为常用，至于二者的区别，可以认为ps是当前进程的镜像，是静态的，top可以动态的显示进行信息、内存、CPU等信息。本文讲解ps的用法，至于top的使用会在后续中写出。 正文 来个美图 放飞一下 开始正餐 格式123ps [参数]ps [参数] | grep [内容] 参数说明由于ps的参数过多，这里常用的只列举常用参数，如有详细了解请man进行查询！！！。 -a 显示同一终端下的所有程序。 -A 显示所有进程。 c 显示进程的真实名称。 -C&lt;指令名称&gt; 指定执行指令的名称，并列出该指令的进程的状况。 -N 反向选择。 -e 等于“-A”。 e 显示环境变量。 f 显示进程间的相互关系。 -p&lt;进程识别码&gt; 指定进程识别码，并列出该进程的状况。 -H 显示树状结构，表示进程间的相互关系。 r 显示当前终端的进程。 -t&lt;终端机编号&gt; 指定终端机编号，并列出属于该终端机的进程的状况。 T 显示当前终端的所有程序 u 指定用户的所有进程。 -G&lt;群组识别码&gt;-g&lt;群组识别码&gt; 列出属于该群组的进程的状况，也可使用群组名称来指定。 –help 显示帮助信息。 –version 显示版本显示。 常用命令 ps -ef UID：进程拥有者ID PID：进程的ID PPID：父级进程的ID C：进程CPU使用的百分比 STIME：进程的启动时间 TTY：登录终端 TIME：进程使用掉CPU的时间 CMD：执行的命令 ps -aux USER：用户名 %CPU：进程占用的CPU百分比 %MEM：占用内存的百分比 VSZ：进程使用的虚拟內存量（KB） RSS：进程占用的固定內存量（KB）（驻留中页的数量） TTY：登录终端 STAT：进程的状态 状态码 简述 详情 D 不可中断 收到信号不唤醒和不可运行, 进程必须等待直到有中断发生 R 运行 正在运行或在运行队列中等待 S 中断 中断 sleeping T 停止或被追踪 进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行 Z 僵尸进程 进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放 W 内存交换 进入内存交换 START：进程被触发启动时间 TIME：进程实际使用CPU运行的时间 COMMAND：执行的命令 如果需要显示进程的真是名称：1ps -auxc ps -axjf 信息内容与ps -aux差不多，唯一的区别就是在进程COMMAND显示这这块，ps -axjf树形显示进程，比较清晰。 ps -ef -u root 查询指定用户的进程。 内容输出 文本 1ps -ef &gt; /home/mingliang.gao/cur_pro.txt 翻页 1ps -ef | less 补充 grep 用ps去查询想要的进程，我一般都是配合上grep。12# 格式ps -ef | grep &quot;XXXXX&quot; pstree 如果想以树节点形式显示整体的进程，用这个命令，一般系统没有，需要进行安装。 在 Mac OS上 1brew install pstree 在 Fedora/Red Hat/CentOS 1yum -y install psmisc 在 Ubuntu/Debian 1apt-get install psmisc 学习菜鸟说明：https://www.runoob.com/linux/linux-comm-ps.htmlman手册：http://man7.org/linux/man-pages/man1/ps.1.html 推荐使用man手册，是最全面的文档，在文档的EXAMPLES部分，会有常用的命令。 希望对大家有所帮助！！！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-YouZan数据处理小程序]]></title>
    <url>%2Farticles%2F24462%2F</url>
    <content type="text"><![CDATA[Python实战 数据存储 背景 前几天朋友找我问我能不能把人家接口数据存下来，大致需求就是获取YouZan的数据进行存储，存到excel，方便使用。花了大概2days的时间，连查询YouZan官方的API，以及对数据进行一些确认处理，写完了记录下来发布到博客，如果有需求的人，拿走不谢！！！。 环境 id name Version 1 Python 2.7 数据流YouZan -&gt; 获取数据 -&gt; 处理数据 -&gt;存储 执行方法1python2 get_youzan_task.py 存储方式1234# 数据库youzan.run(_type=1)# Excelyouzan.run(_type=2) 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: 先获取可以获取数据的token 以递增的频率方式进行获取全量数据 把数据存储到excel或者数据库usage: python get_youzan.pybase_info: __version__ = &quot;v.10&quot; __author__ = &quot;mingliang.gao&quot; __time__ = &quot;2019/9/6&quot; __mail__ = &quot;mingliang.gao@qunar.com&quot;create table sql:CREATE TABLE `blog`.`client_new` ( `id` bigint AUTO_INCREMENT NOT NULL, `created_at` timestamp NULL COMMENT &apos;\n成为客户的时间，时间戳格式，单位秒\n成为客户的时间\n成为会员的时间&apos;, `is_member` tinyint COMMENT &apos;是否是会员\n是否是会员&apos;, `name` varchar(254) COMMENT &apos;客户姓名&apos;, `show_name` varchar(254) COMMENT &apos;推荐展示姓名&apos;, `mobile` varchar(30) COMMENT &apos;手机号&apos;, `member_created_at` timestamp NULL COMMENT &apos;\n成为会员的时间，时间戳格式，单位秒&apos;, PRIMARY KEY (`id`)) COMMENT=&apos;&apos;;insert test sql:insert into client(weixin_fans_id, fans_id, created_at, gender, is_member, trade_count, show_name, name, yz_uid, points, mobile, member_created_at) VALUES(1111111, 111111, &quot;2020-10-10 00:00:00&quot;, &quot;1&quot;, 1, 2000, &quot;测试22222&quot;, &quot;测试1111&quot;, 22222222, 123123, &quot;123123123123&quot;, &quot;2020-10-10 00:00:00&quot;);------------------------------------------------&quot;&quot;&quot;import requestsimport timeimport osimport datetimeimport pymysqlimport xlwtfrom dateutil.relativedelta import relativedelta# 数据库设置DB_HOST = &apos;212.64.61.62&apos;DB_PORT = 3306DB_USER = &apos;mingliang.gao&apos;DB_PWD = &apos;XXXXXXXXXXXX&apos;DB_NAME = &apos;blog&apos;class YOUZAN_Client(object): def __init__(self): self.YOUZAN_ROOT_URL = &quot;https://open.youzanyun.com&quot; self.YOUZAN_TOKEN_URL = &quot;https://open.youzanyun.com/auth/token&quot; self.YOUZAN_CLIENT_URL = &quot;https://open.youzanyun.com/api/youzan.scrm.customer.search/3.1.2&quot; # YouZan 客户端ID self.CLIENT_ID = &apos;XXXXXX&apos; self.CLIENT_SECRET = &apos;XXXXXX&apos; self.GRANT_ID = &apos;XXXXXX&apos; self.TOTAL = 0 # 配置数据获取的开始时间、结束时间、排除时间 self.START_DATETIME = &apos;2020-02-01 00:00:00&apos; self.END_DATETIME = &apos;2020-02-12 10:00:00&apos; self.EXCLUDE_DATETIME = [ &apos;2020-02-06 22:00:00&apos;, &apos;2020-02-06 23:00:00&apos;, &apos;2020-02-07 00:00:00&apos;, &apos;2020-02-07 01:00:00&apos;, &apos;2020-02-07 02:00:00&apos;, &apos;2020-02-07 03:00:00&apos;, &apos;2020-02-07 04:00:00&apos;, &apos;2020-02-07 05:00:00&apos; ] # 配置excel字段，字段只能从返回数据list中进行选取 # weixin_fans_id, fans_id, created_at, gender, is_member, trade_count, show_name, name, yz_uid, points, mobile, member_created_at self.EXCEL_FIELDS = [&quot;id&quot;, &quot;created_at&quot;, &quot;is_member&quot;, &quot;name&quot;, &quot;show_name&quot;, &apos;mobile&apos;, &apos;member_created_at&apos;] # DB数据库初始化 self.conn = pymysql.connect(host=DB_HOST, port=DB_PORT, user=DB_USER, password=DB_PWD, database=DB_NAME, charset=&apos;utf8&apos;) self.MAX_PAGE_SIZE = 50 def add_month(self, transfer_dt, num): &quot;&quot;&quot; 实现时间上的月份相加 :param transfer_dt: :param num: :return: &quot;&quot;&quot; if isinstance(transfer_dt, str): transfer_dt = datetime.datetime.strptime(transfer_dt, &quot;%Y-%m-%d %H:%M:%S&quot;) return datetime.datetime.strftime(transfer_dt + relativedelta(months=+1), &quot;%Y-%m-%d %H:%M:%S&quot;) def deal_time(self, transfer_dt, num, type=&apos;add&apos;, time_type=&apos;day&apos;): &quot;&quot;&quot; 实现时间上的天数相加相减 :param transfer_dt: :param num: :return: &quot;&quot;&quot; if type not in [&apos;add&apos;, &apos;min&apos;]: return None if time_type not in [&apos;days&apos;, &apos;hours&apos;, &apos;minutes&apos;, &apos;seconds&apos;]: return None num = num if type == &apos;add&apos; else -num if isinstance(transfer_dt, str): transfer_dt = datetime.datetime.strptime(transfer_dt, &quot;%Y-%m-%d %H:%M:%S&quot;) if time_type == &apos;day&apos;: return (transfer_dt + datetime.timedelta(days=num)).strftime(&quot;%Y-%m-%d %H:%M:%S&quot;) elif time_type == &apos;hours&apos;: return (transfer_dt + datetime.timedelta(hours=num)).strftime(&quot;%Y-%m-%d %H:%M:%S&quot;) elif time_type == &apos;minutes&apos;: return (transfer_dt + datetime.timedelta(minutes=num)).strftime(&quot;%Y-%m-%d %H:%M:%S&quot;) elif time_type == &apos;seconds&apos;: return (transfer_dt + datetime.timedelta(seconds=num)).strftime(&quot;%Y-%m-%d %H:%M:%S&quot;) def _check_token_expire(self, token_time): &quot;&quot;&quot; check token is or expire :param token_time: :return: &quot;&quot;&quot; if not token_time: return False, &apos;过期时间为null&apos; # 获取的时间为毫秒 token_date_time = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(token_time/1000)) now_time = datetime.datetime.now().strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) return (True, token_date_time) if now_time &lt; token_date_time \ else (False, token_date_time) def get_token(self): &quot;&quot;&quot; get available token from youzan :return: &quot;&quot;&quot; payload = &#123; &quot;client_id&quot;: self.CLIENT_ID, &quot;client_secret&quot;: self.CLIENT_SECRET, &quot;authorize_type&quot;: &quot;silent&quot;, &quot;grant_id&quot;: self.GRANT_ID &#125; headers = &#123; &apos;Content-Type&apos;: &quot;application/json&quot;, &#125; try: token_resp = requests.post(url=self.YOUZAN_TOKEN_URL, headers=headers, json=payload) if token_resp.status_code != 200: return False, &apos;token请求失败&apos; token_resp_json = token_resp.json() if not token_resp_json: return False, &apos;token无json数据&apos; is_ok = token_resp_json.get(&apos;success&apos;) if not is_ok: return False, &apos;token json success为false&apos; token_time = token_resp_json.get(&apos;data&apos;).get(&apos;expires&apos;) is_ok, token_expires = self._check_token_expire(token_time) if not is_ok: return False, &apos;token过期：%s&apos; % token_expires return True, token_resp_json.get(&apos;data&apos;).get(&apos;access_token&apos;) except Exception as e: return False, &apos;token请求Exception失败: %s&apos; % e.message def _transfer_to_time(self, timeStamp, t_type=1): &quot;&quot;&quot; type=1 把时间戳转换成datetime str类型 type=2 把datetime类型/datetime str类型转换成时间戳 :param timeStamp: dateTime or timeStamp :param t_type: 1 or 2 :return: &quot;&quot;&quot; if t_type == 2: if isinstance(timeStamp, str): timeStamp = time.strptime(timeStamp, &quot;%Y-%m-%d %H:%M:%S&quot;) return int(time.mktime(timeStamp)) if isinstance(timeStamp, str): timeStamp = int(timeStamp) return time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(timeStamp)) def set_style(self, name, height, bold=False): style = xlwt.XFStyle() font = xlwt.Font() font.name = name font.bold = bold font.color_index = 4 font.height = height style.font = font return style def _deal_client_to_excel(self, datas): &quot;&quot;&quot; :param datas: client object to excel :return: None &quot;&quot;&quot; if not datas: return f = xlwt.Workbook(encoding=&apos;utf-8&apos;) sheet = f.add_sheet(&apos;sheet&apos;, cell_overwrite_ok=True) title_style = self.set_style(&apos;Times New Roman&apos;, 220, True) content_style = self.set_style(&apos;Times New Roman&apos;, 220, False) # 标题 for i in range(0, len(self.EXCEL_FIELDS)): sheet.write(0, i, self.EXCEL_FIELDS[i], title_style) row = 1 for data in datas: if not data: continue weixin_fans_id = data.get(&apos;weixin_fans_id&apos;) fans_id = data.get(&apos;fans_id&apos;) created_at = self._transfer_to_time(data.get(&apos;created_at&apos;)) \ if data.get(&apos;created_at&apos;) else &apos;&apos; member_created_at = self._transfer_to_time(data.get(&apos;member_created_at&apos;)) \ if data.get(&apos;created_at&apos;) else &apos;&apos; gender = data.get(&apos;gender&apos;) is_member = data.get(&apos;is_member&apos;) trade_count = data.get(&apos;trade_count&apos;) show_name = data.get(&apos;show_name&apos;) name = data.get(&apos;name&apos;) yz_uid = data.get(&apos;yz_uid&apos;) points = data.get(&apos;points&apos;) mobile = data.get(&apos;mobile&apos;) if isinstance(show_name, unicode): show_name = show_name.encode(&apos;utf-8&apos;) if isinstance(mobile, unicode): mobile = mobile.encode(&apos;utf-8&apos;) if isinstance(created_at, unicode): created_at = created_at.encode(&apos;utf-8&apos;) if isinstance(member_created_at, unicode): member_created_at = member_created_at.encode(&apos;utf-8&apos;) if isinstance(name, unicode): name = name.encode(&apos;utf-8&apos;) if isinstance(mobile, unicode): mobile = mobile.encode(&apos;utf-8&apos;) for field in self.EXCEL_FIELDS: if field == &apos;id&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), row, title_style) elif field == &apos;weixin_fans_id&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), weixin_fans_id, content_style) elif field == &apos;fans_id&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), fans_id, content_style) elif field == &apos;created_at&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), created_at, content_style) elif field == &apos;member_created_at&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), member_created_at, content_style) elif field == &apos;gender&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), gender, content_style) elif field == &apos;is_member&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), is_member, content_style) elif field == &apos;trade_count&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), trade_count, content_style) elif field == &apos;show_name&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), show_name, content_style) elif field == &apos;name&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), name, content_style) elif field == &apos;yz_uid&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), yz_uid, content_style) elif field == &apos;points&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), points, content_style) elif field == &apos;mobile&apos;: sheet.write(row, self.EXCEL_FIELDS.index(field), mobile, content_style) row += 1 f.save(&apos;%s-%s名单.xls&apos; % (self.START_DATETIME, self.END_DATETIME)) def _deal_client_to_db(self, data): &quot;&quot;&quot; :param data: client object to database :return: None &quot;&quot;&quot; if not data: return weixin_fans_id = data.get(&apos;weixin_fans_id&apos;) fans_id = data.get(&apos;fans_id&apos;) created_at = self._transfer_to_time(data.get(&apos;created_at&apos;)) \ if data.get(&apos;created_at&apos;) else &apos;&apos; member_created_at = self._transfer_to_time(data.get(&apos;member_created_at&apos;)) \ if data.get(&apos;created_at&apos;) else &apos;&apos; gender = data.get(&apos;gender&apos;) is_member = data.get(&apos;is_member&apos;) trade_count = data.get(&apos;trade_count&apos;) show_name = data.get(&apos;show_name&apos;) name = data.get(&apos;name&apos;) yz_uid = data.get(&apos;yz_uid&apos;) points = data.get(&apos;points&apos;) mobile = data.get(&apos;mobile&apos;) if isinstance(show_name, unicode): show_name = show_name.encode(&apos;utf-8&apos;) if isinstance(mobile, unicode): mobile = mobile.encode(&apos;utf-8&apos;) if isinstance(created_at, unicode): created_at = created_at.encode(&apos;utf-8&apos;) if isinstance(member_created_at, unicode): member_created_at = member_created_at.encode(&apos;utf-8&apos;) if isinstance(name, unicode): name = name.encode(&apos;utf-8&apos;) if isinstance(mobile, unicode): mobile = mobile.encode(&apos;utf-8&apos;) # insert_sql = &quot;&quot;&quot; # insert into client(weixin_fans_id, fans_id, created_at, gender, is_member, trade_count, show_name, name, yz_uid, points, mobile, member_created_at) # VALUES(%s, %s, &quot;%s&quot;, &quot;%s&quot;, %s, %s, &quot;%s&quot;, &quot;%s&quot;, %s, %s, &quot;%s&quot;, &quot;%s&quot;); # &quot;&quot;&quot; % (weixin_fans_id, fans_id, created_at, gender, is_member, trade_count, show_name, name, yz_uid, points, mobile, member_created_at) insert_sql = &apos;insert into client_new(created_at, is_member, name, show_name, mobile, member_created_at) VALUES(%s, %s, %s, %s, %s, %s);&apos; cursor = self.conn.cursor() cursor.execute(insert_sql, (created_at, is_member, name, show_name, mobile, member_created_at)) self.conn.commit() cursor.close() def deal_client_by_token(self, token, store): &quot;&quot;&quot; main method by token 设置一个起始时间，每次递增加1月进行数据获取，以此方式进行all data获取 :param token: :param store: db or excel :return: &quot;&quot;&quot; all_datas = list() end_time = self.START_DATETIME while True: start_time = end_time if start_time == self.END_DATETIME: break end_time = self.deal_time(start_time, 1, &apos;add&apos;, &apos;hours&apos;) # 去掉脏数据时间段 if start_time in self.EXCLUDE_DATETIME: print &apos;【%s】is exclude datetime&apos; % start_time continue payload = &#123; # &quot;is_member&quot;: 1, # 是否会员 &quot;created_at_start&quot;: self._transfer_to_time(start_time, 2), # 成为客户的时间 &quot;created_at_end&quot;: self._transfer_to_time(end_time, 2) # 成为客户的时间 &#125; headers = &#123; &apos;Content-Type&apos;: &quot;multipart/form-data&quot;, &#125; real_url = &apos;%s?access_token=%s&apos; % (self.YOUZAN_CLIENT_URL, token) data_resp = requests.post(url=real_url, # headers=headers, data=payload) if data_resp.status_code != 200: print &apos;【%s】client请求失败&apos; % start_time continue resp_json_datas = data_resp.json() if not resp_json_datas: print &apos;【%s】client无json数据&apos; % start_time continue code = resp_json_datas.get(&apos;code&apos;) if code != 200: print &apos;【%s】client code is error: %s&apos; % (start_time, code) continue total = resp_json_datas.get(&apos;data&apos;).get(&apos;total&apos;) if total &lt; 1: print &apos;【%s】client json数据total: %s&apos; % (start_time, total) continue # 特别说2 = 1 + 1，有一个page页面的1，还有一个range的1 page = int(total / 50) + 2 self.TOTAL = self.TOTAL + total print &apos;%s - %s total: %s, page: %s&apos; \ % (start_time, end_time, total, (page - 1)) for i in range(1, page, 1): print &apos;===========%s&apos; % i sub_payload = &#123; &quot;created_at_start&quot;: self._transfer_to_time(start_time, 2), # 成为客户的时间 &quot;created_at_end&quot;: self._transfer_to_time(end_time, 2), # 成为客户的时间 &quot;page_size&quot;: self.MAX_PAGE_SIZE # 每页数量，最多支持50个 &#125; sub_data_resp = requests.post(url=real_url, data=sub_payload) sub_resp_json_datas = sub_data_resp.json() datas = sub_resp_json_datas.get(&apos;data&apos;).get(&apos;record_list&apos;) for data in datas: if not data: continue self._deal_client_to_db(data) if store == &apos;db&apos; \ else all_datas.append(data) if store == &apos;excel&apos;: self._deal_client_to_excel(all_datas) def run(self, _type=1): store = &apos;db&apos; if _type == 1 else &apos;excel&apos; is_ok, message = self.get_token() if not is_ok: print &apos;YouZan token获取失败：【%s】&apos; % message os._exit() print &apos;token: %s&apos; % message self.deal_client_by_token(message, store) if store == &apos;db&apos;: youzan.conn.close() print &apos;===================end: %s&apos; % self.TOTALif __name__ == &apos;__main__&apos;: youzan = YOUZAN_Client() youzan.run(_type=2)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[行尸走肉]]></title>
    <url>%2Farticles%2F21862%2F</url>
    <content type="text"><![CDATA[《行尸走肉》 惊悚 科幻 冒险 剧情 感情 简介《行尸走肉》（The walking dead），是一部美国恐怖电视系列剧，改编自同名漫画，始于2010年10月31日在AMC有线电视网开播，是电视史上第一部正宗的丧尸电视剧。如果你喜欢丧尸剧，那么这个绝对是你的菜！！！ 推荐指数 ⭐️⭐️⭐️⭐️⭐️ 人物角色 男主（前八季）：瑞克·格莱姆斯男二：达里尔·迪克森(弩哥)女二：卡萝尔(卡妈)男主（8、9、10季）：Negan(尼根) 人物实在是太多了，这里只列举了我比较喜欢的几个人。 主线剧情 世界突然变成充满丧尸的世界，但是人必须需要活下去，由瑞克带领的团队与丧尸、总督、食人族、低语者等等一系列团队进行斗争。前几季丧尸比较牛逼的，后来全都是人与人之间的争斗。 观后感 如果我是瑞克，我该怎么做？真是人性的考验！！！]]></content>
      <categories>
        <category>影视说</category>
      </categories>
      <tags>
        <tag>电视剧</tag>
        <tag>美国大片</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[元旦节【中国节】]]></title>
    <url>%2Farticles%2F33336%2F</url>
    <content type="text"><![CDATA[中国节-元旦节 持续更新中。。。。。。 时间 地点 2020-01-01 保康]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>中国节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-判断PC是否连网]]></title>
    <url>%2Farticles%2F19515%2F</url>
    <content type="text"><![CDATA[Python socket 测试PC是否连网 Python脚本 curl wget life is short, me use Python. 2019年的最后一片技术博客了，写一个初始学Python的知识点，在这里先祝【大家元旦快乐】。 代码很简单，需要设置能访问的url即可。 12345678910111213import socketdef is_connected(url):try: host = socket.gethostbyname(url) s = socket.create_connection((host, 80), 2) return Trueexcept Exception as e: return FalseURL = &quot;www.baidu.com&quot;print is_connected(URL ) 此代码写于2016-09-12。。。。。。【自学Python期间】 其他方式 curl 1curl http://www.baidu.com wget 1wget http://www.baidu.com 生命不息，奋斗不止！]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
        <tag>Python基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github热门的Python项目推荐]]></title>
    <url>%2Farticles%2F12867%2F</url>
    <content type="text"><![CDATA[推荐几款Github上热门的Python项目 持续更新中。。。。。。 NAME URL 抢票神器（web版） https://github.com/pjialin/py12306/ 实时GPS接数处理程序 https://github.com/GIS90/realgpserver.git 自由上网 https://github.com/Alvin9999/new-pac.git 爬虫集合 https://github.com/facert/awesome-spider.git 年会抽奖 https://github.com/fouber/lottery.git 从事于Python语言开发。。。。。。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[etherpad在线协作编辑]]></title>
    <url>%2Farticles%2F7544%2F</url>
    <content type="text"><![CDATA[简介 官网：Etherpad is a highly customizable Open Source online editor providing collaborative editing in really real-time.个人翻译：Etherpad是一款定制、开源的在线编辑器，提供实时协作编辑。 etherpad 在线协作 文本编辑 多用户 版本 安装本人实践的机器是阿里云服务器，系统是：1234567891011121314151617181920212223[mingliang.gao@VM_0_16_centos ~]$ cat /etc/*release*CentOS Linux release 7.5.1804 (Core)Derived from Red Hat Enterprise Linux 7.5 (Source)NAME=&quot;CentOS Linux&quot;VERSION=&quot;7 (Core)&quot;ID=&quot;centos&quot;ID_LIKE=&quot;rhel fedora&quot;VERSION_ID=&quot;7&quot;PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;ANSI_COLOR=&quot;0;31&quot;CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;HOME_URL=&quot;https://www.centos.org/&quot;BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;CentOS Linux release 7.5.1804 (Core)CentOS Linux release 7.5.1804 (Core)cpe:/o:centos:centos:7 node环境12345# 安装yum install -y nodejs# checknode -v 依赖包1yum install curl vim gcc-c++ make MariaDB数据库安装与配置 安装 1yum install mariadb-server 执行过程略，在安装过程中会让出现root密码等设置，具体请参考文章最后的MariaDB安装与配置，进行下一步启动。 启动 12345# 开启mariadb数据库systemctl start mariadb.service# 设置开机自动启动systemctl enable mariadb.service 首次安装 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162[root@VM_0_16_centos conf.d]# mysql_secure_installationNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MariaDB to secure it, we&apos;ll need the currentpassword for the root user. If you&apos;ve just installed MariaDB, andyou haven&apos;t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none):ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)Enter current password for root (enter for none):ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)Enter current password for root (enter for none):OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.Set root password? [Y/n] yNew password:Re-enter new password:Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] n ... skipping.Normally, root should only be allowed to connect from &apos;localhost&apos;. Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] n ... skipping.By default, MariaDB comes with a database named &apos;test&apos; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] n ... skipping.Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y ... Success!Cleaning up...All done! If you&apos;ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB! 完成初始化设置，主要是root密码的设置最重要。 连接 1mysql -h 127.0.0.1 -P 3306 -u root -p 具体mysql命令怎么使用这里也不做解释，不知道的请自行查资料。 配置 12345MariaDB [(none)]&gt; CREATE DATABASE etherpad;MariaDB [(none)]&gt; create user &apos;etherpad&apos;@&apos;%&apos; identified by &apos;123456&apos;;MariaDB [(none)]&gt; grant all privileges on etherpad.* to &apos;etherpad&apos;@&apos;%&apos;;MariaDB [(none)]&gt; FLUSH PRIVILEGES;MariaDB [(none)]&gt; \q 在这里操作是创建etherpad数据库，以及etherpad用户并分配etherpad用户有访问etherpad数据库的权限，用户名：etherpad，密码：123456。关于数据库、用户、密码自己定义，在etherpad安装与配置中需要用户。 创建linux用户1adduser etherpad 用户启动使用etherpad程序，我之前没有建立用户，直接用root去启动，会提示：123[root@VM_0_16_centos opt]# bash /opt/etherpad/etherpad-lite/bin/run.shYou shouldn&apos;t start Etherpad as root!Please type &apos;Etherpad rocks my socks&apos; or supply the &apos;--root&apos; argument if you still want to start it as root 也可以在启动的命令后面加上–root进行启动，但是既然etherpad不让用root，那就新建一个就好了。 准备工作已经完毕。。。。。。 下载etherpad1234su rootmkdir -p /opt/www/etherpadcd /opt/www/etherpadgit clone https://github.com/ether/etherpad-lite 切换etherpad用户，如果没有git命令的用户进行安装，文章最后有相关参考。把etherpad放在自己想要放的目录。 文件授权 + 所属者root用户。12345chmod 755 -R etherpad-litechown -R etherpad:etherpad etherpad-lite# 查看用户名称与组id 用户 配置文件 创建配置文件 1cp ./etherpad-lite/settings.json.template ./etherpad-lite/settings.json 编辑配置 1vim ./etherpad-lite/settings.json Ip配置在配置中搜索0.0.0.0，在文件88行，IP0.0.0.0改成127.0.0.1只能本机访问，完了在用nginx做个反向代理即可，PORT端口改成自己设置的端口，去掉注释，配置更改如下： 12&quot;ip&quot;: &quot;127.0.0.1&quot;,&quot;port&quot;: 9002, 数据库配置在配置中搜索dbType，在文件144行，这里用的信息都是在数据库安装配置中设置的配置，写清楚即可，去掉注释，配置更改如下： 123456789&quot;dbType&quot; : &quot;mysql&quot;,&quot;dbSettings&quot; : &#123; &quot;user&quot;: &quot;etherpad&quot;, &quot;host&quot;: &quot;localhost&quot;, &quot;port&quot;: 3306, &quot;password&quot;: &quot;123456&quot;, &quot;database&quot;: &quot;etherpad&quot;, &quot;charset&quot;: &quot;utf8mb4&quot;&#125;, 代理配置trustProxy设置为true。 管理员在配置中搜索password，在文件365行，这里用的信息都是在数据库安装配置中设置的配置，去掉注释，配置更改如下： 1234567891011121314&quot;users&quot;: &#123; &quot;admin&quot;: &#123; // 1) &quot;password&quot; can be replaced with &quot;hash&quot; if you install ep_hash_auth // 2) please note that if password is null, the user will not be created &quot;password&quot;: &quot;admin&quot;, &quot;is_admin&quot;: true &#125;, &quot;user&quot;: &#123; // 1) &quot;password&quot; can be replaced with &quot;hash&quot; if you install ep_hash_auth // 2) please note that if password is null, the user will not be created &quot;password&quot;: &quot;user&quot;, &quot;is_admin&quot;: false &#125;&#125;, 保存配置 123:wq:X 用哪个都可以，vim保存并退出。 etherpad安装依赖root用户执行。1bash ./etherpad-lite/bin/installDeps.sh 安装一下etherpad所需要的依赖包。 npm更新 1curl -L https://npmjs.com/install.sh | sh nodejs更新：https://www.cnblogs.com/xiashan17/p/6907537.html安装n管理工具，进行nodejs版本安装、选择。安装指定版本node： 1n install node/13.3.0 安装完之后：1234installing : node-v13.3.0 mkdir : /usr/local/n/versions/node/13.3.0 fetch : https://nodejs.org/dist/v13.3.0/node-v13.3.0-linux-x64.tar.xzinstalled : v13.3.0 (with npm 6.13.1) 处理完以上问题，在重新安装依赖。 启动etherpad用户。1./etherpad-lite/bin/run.sh 用etherpad用户直接执行上面命令。1234567891011121314151617181920212223242526272829[root@localhost ~]#/opt/etherpad/etherpad-lite/bin/run.shEnsure that all dependencies are up to date... If this is the first time you have run Etherpad please be patient.audited 13370 packages in 5.363s8 packages are looking for funding run `npm fund` for detailsfound 5 vulnerabilities (3 low, 2 high) run `npm audit fix` to fix them, or `npm audit` for detailsClearing minified cache...Started Etherpad...[2019-12-28 15:27:21.215] [DEBUG] console - Running on Node v12.14.0 (minimum required Node version: 8.9.0)[2019-12-28 15:27:21.324] [INFO] console - All relative paths will be interpreted relative to the identified Etherpad base dir: /opt/etherpad/etherpad-lite[2019-12-28 15:27:21.324] [DEBUG] AbsolutePaths - Relative path &quot;settings.json&quot; can be rewritten to &quot;/opt/etherpad/etherpad-lite/settings.json&quot;[2019-12-28 15:27:21.325] [DEBUG] AbsolutePaths - Relative path &quot;credentials.json&quot; can be rewritten to &quot;/opt/etherpad/etherpad-lite/credentials.json&quot;[2019-12-28 15:27:21.331] [INFO] console - settings loaded from: /opt/etherpad/etherpad-lite/settings.json[2019-12-28 15:27:21.331] [INFO] console - No credentials file found in /opt/etherpad/etherpad-lite/credentials.json. Ignoring.[2019-12-28 15:27:21.332] [INFO] console - Using skin &quot;colibris&quot; in dir: /opt/etherpad/etherpad-lite/src/static/skins/colibris[2019-12-28 15:27:21.332] [INFO] console - Session key loaded from: /opt/etherpad/etherpad-lite/SESSIONKEY.txt[2019-12-28 15:27:21.381] [ERROR] console - (node:25518) [DEP0126] DeprecationWarning: timers.active() is deprecated. Please use timeout.refresh() instead.[2019-12-28 15:27:21.382] [ERROR] console - (node:25518) [DEP0096] DeprecationWarning: timers.unenroll() is deprecated. Please use clearTimeout instead.[2019-12-28 15:27:21.831] [INFO] APIHandler - Api key file read from: &quot;/opt/etherpad/etherpad-lite/APIKEY.txt&quot;[2019-12-28 15:27:22.139] [INFO] console - Installed plugins: ep_align@0.0.24, ep_image_upload@1.0.12[2019-12-28 15:27:22.142] [INFO] console - Report bugs at https://github.com/ether/etherpad-lite/issues[2019-12-28 15:27:22.143] [INFO] console - Your Etherpad version is 1.8.0 (5bcc5a3)[2019-12-28 15:27:22.228] [INFO] console - You can access your Etherpad instance at http://192.168.151.64:9001/[2019-12-28 15:27:22.228] [INFO] console - The plugin admin page is at http://192.168.151.64:9001/admin/plugins[2019-12-28 15:27:22.228] [WARN] console - Etherpad is running in Development mode. This mode is slower for users and less secure than production mode. You should set the NODE_ENV environment variable to production by using: export NODE_ENV=production 访问在浏览器上直接访问：http://IP:PORT，服务器IP + 配置的PORT端口。 列举一下可能遇到的问题 常见问题 端口设置 如果在浏览器访问，提示服务不可以用，那么检查一下服务器防火墙问题。 检查端口是否开通 1234567891011121314[root@localhost ~]#firewall-cmd --list-allpublic (active) target: default icmp-block-inversion: no interfaces: enp3s0 sources: services: dhcpv6-client mysql ssh ports: 3306/tcp 8090/tcp 80/tcp 10000/tcp 9001/tcp protocols: masquerade: no forward-ports: source-ports: icmp-blocks: rich rules: 开放端口 1firewall-cmd --zone=public --add-port=9001/tcp --permanent 重启服务 1systemctl restart firewalld npm版本 在安装etherpad依赖包或者其他包的时候，有的也许会提示node版本过低，更新下就好，这里推荐用n去更新。 文章最后有相关参考。 etherpad依赖脚本不可执行 如果遇到/opt/www/etherpad/etherpad-lite/bin/run.sh脚本不被执行，那么将脚本改变读、写、执行的权限。1chmod 777 /opt/www/etherpad/etherpad-lite/bin/run.sh 插件配置在这里，是主要配置etherpad的插件，有几个还是蛮好用，具体配置在下面有解释，访问Ip:Port/admin，账号密码就是在etherpad配置的那个。 align作用：文字左、中、右对齐插件。 查找 在搜索出查找align。 安装 搜索到之后进行install安装。 配置 打开Settings找到toolbar，去掉toolbar的注视，在414行添加以下内容：1[“alignLeft”, “alignCenter”, “alignJustify”, “alignRight”] 结果 image_upload作用：图片上传功能。 查找 在搜索出查找image。 安装 搜索到之后进行install安装。 配置 打开Settings找到toolbar，在415行添加以下内容：1234567891011121314151617181920212223242526 &quot;toolbar&quot;: &#123; &quot;left&quot;: [ [&quot;bold&quot;, &quot;italic&quot;, &quot;underline&quot;, &quot;strikethrough&quot;], [&quot;orderedlist&quot;, &quot;unorderedlist&quot;, &quot;indent&quot;, &quot;outdent&quot;], [&quot;undo&quot;, &quot;redo&quot;], [&quot;clearauthorship&quot;], [&quot;alignLeft&quot;, &quot;alignCenter&quot;, &quot;alignJustify&quot;, &quot;alignRight&quot;], [&quot;addImage&quot;] ], &quot;right&quot;: [ [&quot;importexport&quot;, &quot;timeslider&quot;, &quot;savedrevision&quot;], [&quot;settings&quot;, &quot;embed&quot;], [&quot;showusers&quot;] ], &quot;timeslider&quot;: [ [&quot;timeslider_export&quot;, &quot;timeslider_returnToPad&quot;] ] &#125;,&quot;ep_image_upload&quot;: &#123; &quot;fileTypes&quot;: [&quot;jpeg&quot;,&quot;jpg&quot;,&quot;bmp&quot;,&quot;gif&quot;,&quot;png&quot;], &quot;maxFileSize&quot;: 5000000&#125;, 结果 插件根据自己的需求制定。。。。。。 额外脚本我把启动与杀死进程做成了.sh脚本，具体如下： start 1nohup /opt/www/etherpad/etherpad-lite/bin/run.sh&gt;/dev/null 2&gt;&amp;1 &amp; end 1ps -ef | grep etherpad | grep -v grep | awk -F &quot; &quot; &apos;&#123;print $2&#125;&apos; | xargs kill nohub无此命令 12345678# 切换用户su root# 安装yum install coreutils# checkwhich nohub nginx域名配置nginx配置：1234567891011121314151617181920212223242526[root@VM_0_16_centos nginx]# cat /etc/nginx/conf.d/etherpad.confserver &#123; listen 9001; server_name _; access_log /var/log/nginx/etherpad9001.access.log main; location / &#123; proxy_pass http://127.0.0.1:9002/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-PORT $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; error_page 404 /error.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /error.html; location = /50x.html &#123; &#125;&#125; 因为本人的域名还在审核中，这里用ip进行访问。 说明一下：本人的服务器是腾讯云服务器，所以在配置nginx监听的IP是外网IP、端口是9001，在etherpad配置里面配置内网IP以及端口是9002。 测试地址http://121.4.56.169:9001/ 学习参考官网：https://etherpad.org/Github：https://github.com/ether/etherpad-liteMariaDB安装：https://www.jianshu.com/p/85ad52c88399Git安装：https://www.jianshu.com/p/f19d1473c3e1node与npm更新：https://www.jianshu.com/p/2ad99f605499]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>运维工具</tag>
        <tag>etherpad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[圣诞节【西方节】]]></title>
    <url>%2Farticles%2F30667%2F</url>
    <content type="text"><![CDATA[西方节-圣诞节 持续更新中。。。。。。 时间 地点 2019-12-25 满洲里]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>西方节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之番外篇-w、who、whoami]]></title>
    <url>%2Farticles%2F52265%2F</url>
    <content type="text"><![CDATA[Linux w who whoami 用户 番外教程系列 简介 简单总结一下w、who、whoami，用于显示当前登录Linux的用户信息，在本篇结束的时候又额外赠送了2个命令，关于学习多多益善。。。。。。。 在Linux系统中，多账户进行ssh登录是常有的事，但是有时候会去查看一下登录的用户都有谁以及相关的登录信息。 总结 命令 说明 w 显示当前登录的用户及信息 who 显示当前已经登录的用户名、终端名称、登录时间及登录IP whoami 显示当前用户的用户名 id 用于check系统是有此用户 last 显示近期用户或终端的登录情况 w显示当前登录的用户及信息，除了这些还会显示当前登录了几个用户、系统当前的load。 123456[root@bash ~]# w 20:22:25 up 15:55, 3 users, load average: 0.00, 0.01, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot tty1 Tue21 15:27m 0.09s 0.09s -bashroot pts/0 192.168.1.116 19:23 1.00s 0.12s 0.01s wroot tty2 07:43 19:29 0.02s 0.02s -bash who显示当前已经登录的用户名、终端名称、登录时间及登录IP。 1234[root@bash ~]# whoroot tty1 2019-12-24 21:23root pts/0 2019-12-24 19:23 (192.168.1.116)root tty2 2019-12-24 07:43 whoami显示当前用户的用户名。12[root@bash ~]# whoamiroot 额外赠送 id用于显示用户的ID，以及所属群组的ID，主要用于check系统是有此用户。12[root@bash ~]# id rootuid=0(root) gid=0(wheel) groups=0(wheel) last显示近期用户或终端的登录情况。123456[root@bash ~]# last -n 5root pts/0 :0.0 Wed Apr 25 10:12 still logged inroot pts/1 :0.0 Wed Apr 25 10:06 - 10:10 (00:03)root pts/0 :0.0 Wed Apr 25 10:06 - 10:10 (00:03)root pts/0 :0.0 Wed Apr 25 10:02 - 10:06 (00:04)root pts/0 :0.0 Wed Apr 25 09:51 - 09:51 (00:00)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux番外篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-环境搭建之node版本问题]]></title>
    <url>%2Farticles%2F10512%2F</url>
    <content type="text"><![CDATA[背景 昨天买了个腾讯云服务器 + 域名，于是把自己的blog迁移云服务上，就得搭建nodejs、npm、hexo等运行环境。但是环境都装好了，一运行hexo居然报错了，错的内容在正文。既然出现错误，解决就好了。 错误内容12345678910111213141516171819202122usr/lib/node_modules/hexo-cli/node_modules/chokidar/index.js:150async remove(item) &#123;^^^^^^SyntaxError: Unexpected identifierat createScript (vm.js:56:10)at Object.runInThisContext (vm.js:97:10)at Module._compile (module.js:549:28)at Object.Module._extensions..js (module.js:586:10)at Module.load (module.js:494:32)at tryModuleLoad (module.js:453:12)at Function.Module._load (module.js:445:3)at Module.require (module.js:504:17)at require (internal/module.js:20:19)at Object.&lt;anonymous&gt; (/usr/lib/node_modules/hexo-cli/node_modules/hexo-fs/lib/fs.js:6:18)at Module._compile (module.js:577:32)at Object.Module._extensions..js (module.js:586:10)at Module.load (module.js:494:32)at tryModuleLoad (module.js:453:12)at Function.Module._load (module.js:445:3)at Module.require (module.js:504:17) 上述的错误搜索了好半天才没有到找到一个解决办法，不过在失去希望的时候，发了在baidu论坛有个人跟我报了一样的错误，而且还解决了，不买官司了，原因是：node版本过低。 解决办法升级nodejs即可，具体操作如下： 12345678910npm install -g n# 升级到最新稳定版本：n stable# 升级到最新版本：n latest# 升级到指定版本：n 0.10.26 学习参考n：https://www.jianshu.com/p/a2ee8f61a8ca帖子：https://tieba.baidu.com/p/6311927039?red_tag=1232994946]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg的基础学习]]></title>
    <url>%2Farticles%2F37692%2F</url>
    <content type="text"><![CDATA[简介 大致的意思：FFmpeg是一款多媒体框架，能处理音频、视频等，不管什么格式的数据都可以进行处理，支持MacOS、Windows、Linux等各种系统。FFmpeg：我是处理媒介数据方面的专家，我很牛逼，快来用我吧！！！我：好的，👌！ ffmpeg 视频 音频 格式转换 压缩 背景因为公司做了一个宣传片，把宣传片视频上传到第三方网站上，发现非会员会有广告。这还得了，如果客户没有会员，岂不是要等，为了解决这个问题，从一个程序员的角度来想办法，直接做个页面，把视频放进去，通过域名访问就可以解决无广告的问题。 周末花了一上午的时候搞完了，通过域名直接访问看，可以播放视频，但是发现视频有点卡，查看了一下视频大小：6分钟的视频500M，有点大啊，于是想压缩一下，上网搜索在线 视频压缩，TMD，要不就收费、要不就限制100M，身为程序员的我咋可能花钱去处理。于是，继续搜索python 视频压缩，看到了自己没有见过的ffmpeg命令，查了下资料，评价还不错，花了1小时搞定了ffmpeg环境，压缩 + 转格式的方式处理，最后视频110M，压缩了将近4/5，为了方便日后使用以及推荐给大家使用，写下本篇。 背景介绍完毕了，开始搞。 下载安装需要下载2个文件：ffmpeg音视频处理工具，yasm是一款汇编器。yasm是安不安装都可以，既然ffmpeg里面都要求了就装上，省得日后麻烦。文件下载地址：yasm：http://yasm.tortall.net/Download.htmlffmpeg：http://ffmpeg.org/download.html 都是国外下载地址，如果翻不过去，本篇提供下载地址，百度云盘： name url password yasm https://pan.baidu.com/s/14CEpqZvDhgyIcwjsINw4Gg ymw5 ffmpeg https://pan.baidu.com/s/1n65Ss2S7rtp5bYIFxKHeHQ j3oj 安装上传 &amp;&amp; 解压把yasm &amp;&amp; ffmpeg文件下载到本地，需要上传到Linux服务器，在这里我采用的scp命令。 1scp ~/Downloads/ffmpeg/* root@192.168.151.64:~ 上传完之后，ssh连接服务器，找到上传的文件进行解压： 12345# ffmpegtar -jxvf ffmpeg-4.2.1.tar.bz2# yasmtar -zxvf yasm-1.3.0.tar.gz 看好了，在这里yasm用的参数是z，ffmpeg用的是j，因为压缩的格式不一样，所以参数是不一样的，不知道的请看下tar的用法。 yasm安装进入到yasm-1.3.0进行编译安装，因为是源码：1234cd yasm-1.3.0/./configuremakemake install 这个安装过程是没有任何问题的，等待安装完成即可。 ffmpeg安装进入ffmpeg-4.2.1文件夹进行编译安装。123./configure --enable-shared --prefix=/usr/loacl/ffmpegmakemake install 编译过程有点长，请耐心等待，也可以做些别的事情。安装成功后，cd /usr/loacl/ffmpeg进入安装目录，查看一下发现有bin、include,、ib、share这4个目录， bin：是ffmpeg主程序二进制目录 include是C/C++头文件目录 lib是编译好的库文件目录 share是文档目录 lib配置 ld.so.conf 编辑lib包的配置文件，加入/usr/local/ffmpeg/lib内容（/usr/local/ffmpeg是ffmpeg的安装目录，根据个人不同安装目录修改）。1vim /etc/ld.so.conf 更新环境变量1ldconfig /etc/profile 打开/etc/profile文件，在文件末尾加入以下内容:export PATH=”/usr/local/ffmpeg/bin:$PATH”1vim /etc/profile 然后保存并运行：1source /etc/profile 运行如果上步配置正确了，那么运行ffmpeg命令就会出现下图所示，因为ffmpeg不是系统命令，也不再系统PATH里面，所以执行要写全路径+ffmpeg。 123456789101112131415[root@localhost /usr/local/ffmpeg/bin]#./ffmpegffmpeg version 4.2.1 Copyright (c) 2000-2019 the FFmpeg developers built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-39) configuration: --enable-shared --prefix=/usr/local/ffmpeg libavutil 56. 31.100 / 56. 31.100 libavcodec 58. 54.100 / 58. 54.100 libavformat 58. 29.100 / 58. 29.100 libavdevice 58. 8.100 / 58. 8.100 libavfilter 7. 57.100 / 7. 57.100 libswscale 5. 5.100 / 5. 5.100 libswresample 3. 5.100 / 3. 5.100Hyper fast Audio and Video encoderusage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...Use -h to get full help or, even better, run &apos;man ffmpeg&apos; 问题1libavdevice.so.57: cannot open shared object file: No such file or directory 如果出现了以上问题，那么就检查一下在lib配置配置那步，是否做对了；如果解决不了，欢迎留言咨询。 使用总结一下本人暂时学到的一些基础使用方法，这个命令很强大，喜欢的可以去官网进行查看详细的使用方法。 信息获取 获取媒体信息1/usr/local/ffmpeg/bin/ffmpeg -i file_name 12345678910111213141516171819202122232425262728[root@localhost ~]#/usr/local/ffmpeg/bin/ffmpeg -i elt.mp4ffmpeg version 4.2.1 Copyright (c) 2000-2019 the FFmpeg developers built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-39) configuration: --enable-shared --prefix=/usr/local/ffmpeg libavutil 56. 31.100 / 56. 31.100 libavcodec 58. 54.100 / 58. 54.100 libavformat 58. 29.100 / 58. 29.100 libavdevice 58. 8.100 / 58. 8.100 libavfilter 7. 57.100 / 7. 57.100 libswscale 5. 5.100 / 5. 5.100 libswresample 3. 5.100 / 3. 5.100Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &apos;elt.mp4&apos;: Metadata: major_brand : mp42 minor_version : 0 compatible_brands: mp42mp41 creation_time : 2019-12-12T07:49:20.000000Z Duration: 00:06:22.93, start: 0.000000, bitrate: 10291 kb/s Stream #0:0(eng): Video: h264 (Main) (avc1 / 0x31637661), yuv420p, 1920x1080 [SAR 1:1 DAR 16:9], 9966 kb/s, 25 fps, 25 tbr, 25k tbn, 50 tbc (default) Metadata: creation_time : 2019-12-12T07:49:20.000000Z handler_name : ?Mainconcept Video Media Handler encoder : AVC Coding Stream #0:1(eng): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 317 kb/s (default) Metadata: creation_time : 2019-12-12T07:49:20.000000Z handler_name : #Mainconcept MP4 Sound Media HandlerAt least one output file must be specified 音频、视频都可以，读取文件的相关信息。 查看支持格式1/usr/local/ffmpeg/bin/ffmpeg -formats 123456789101112131415161718192021[root@localhost ~]#/usr/local/ffmpeg/bin/ffmpeg -formats | head -n 10ffmpeg version 4.2.1 Copyright (c) 2000-2019 the FFmpeg developers built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-39) configuration: --enable-shared --prefix=/usr/local/ffmpeg libavutil 56. 31.100 / 56. 31.100 libavcodec 58. 54.100 / 58. 54.100 libavformat 58. 29.100 / 58. 29.100 libavdevice 58. 8.100 / 58. 8.100 libavfilter 7. 57.100 / 7. 57.100 libswscale 5. 5.100 / 5. 5.100 libswresample 3. 5.100 / 3. 5.100File formats: D. = Demuxing supported .E = Muxing supported -- D 3dostr 3DO STR E 3g2 3GP2 (3GPP2 file format) E 3gp 3GP (3GPP file format) D 4xm 4X Technologies E a64 a64 - video for Commodore 64 D aa Audible AA format files 查看支持的音频、视频格式。 格式转换 基础使用 1234/usr/local/ffmpeg/bin/ffmpeg -i elt.mp4 elt_output.avi# 多格式输出/usr/local/ffmpeg/bin/ffmpeg -i elt.mp4 elt_output.avi elt_output.wmv 命令行中指定文件的输入和输出文件名就行了，这个方法同样适用于视频和音频文件，这个是常用的命令之一。 保留视频质量 1/usr/local/ffmpeg/bin/ffmpeg -i elt.mp4 -qscale 0 elt_output.avi 通过-qscale 0参数来保留视频格式转换的视频质量。 视频压缩 降低比特率 1ffmpeg -i elt.mp4 -b:v 1000k -bufsize 1000k elt.mp4 通过降低比特率(使用 -b:a 或 -ab)来进行视频压缩，一些常用的比特率有: 96k, 112k, 128k, 160k, 192k, 256k, 320k.值越大，文件所需要的体积就越大。 学习参考ffmpeg官网：http://ffmpeg.org/ffmpeg.html#Audio-OptionsLinux上的ffmpeg完全使用指南：https://eyehere.net/2019/the-complete-guide-for-using-ffmpeg-in-linux/#basic-usage 结束语ffmpeg的安装与基础使用先记录到这里吧，但是关于ffmpeg的探索不会停止，学习永无止境，日后有使用到其他命令会更新此博客。 不会的东西，干它就完了！！！]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>运维工具</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Confluence之隐藏人员菜单栏]]></title>
    <url>%2Farticles%2F13168%2F</url>
    <content type="text"><![CDATA[问题背景 在公司搭建了一个Wiki，用的是Confluence + MariaDB + Linux架构，搭建之后不管在任何用户的菜单栏都会有用户这个选项，导致不管任何用户都可以邀请、注册等操作，正常来说用户管理只有管理员才有的权限，解决前如下图：解决后如下图： 解决方案在网上查了很多，都没有实际的解决方案。于是，官网走起，在官网的Search下，搜索关键字：hide tools menu users，结果如下： 点进去查看之后，发现给了我一个解决的灵感，具体如下： 登录管理员账户 打开设置 -&gt; 一般配置 找到自定义HTML 在HEAD尾部加入一下代码 保存后进行刷新测试 具体代码12345&lt;script&gt;jQuery().ready(function() &#123; jQuery(&quot;#people-directory-link&quot;).hide();&#125;);&lt;/script&gt; 官方说明Confluence官方：https://confluence.atlassian.com/confkb/how-to-hide-the-space-tools-menu-for-certain-users-or-groups-in-confluence-816877024.html]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>WIKI</tag>
        <tag>运维工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之增强篇-lsof]]></title>
    <url>%2Farticles%2F35042%2F</url>
    <content type="text"><![CDATA[简介 Linux万能命令之lsof，只有你想不到的，没有踏做不到。 Linux lsof 万物皆文件 推荐指数1🌟🌟🌟🌟🌟 基本介绍lsof = list opened files，大致的意思就是列举系统中被打开的文件。玩linux的人都知道：“linux万物皆文件”，目录、sockets文件、字符设备、块设备、管道符等等。所以在linux系统之内，不管干什么都会跟文件挂上边，lsof是打开这些被使用文件列表的一个工具。不过，在平常，我用的最多就是查端口以及文件被哪个进程使用，命令非常强大。 文件类型在关于lsof能进行查看的文件类型，做了一下分类统计，结果如下： 普通文件（.txt、.log等等） 目录 网络文件系统的文件 字符或设备文件 (函数)共享库（lib文件目录下的，.so等） 管道、命名管道（.pip等） 符号链接（软链） 网络文件（socket相关文件，.sock） 应该还有其他的文件，本人刚入linux系统，不足的地方请各路神山补充，欢迎留言👏👏👏。 安装lsof命令是linux系统非自带的一个命令。 检查是否已安装 12345方式一：lsof方式二：which lsof 出现-bash: lsof: command not found ，说明命令还没被安装，如果命令已存在，忽略安装步骤。 安装 1234567891011121314151617181920212223242526272829303132333435363738394041424344[root@localhost ~]# yum install lsofLoaded plugins: fastestmirrorbase | 3.6 kB 00:00:00extras | 3.4 kB 00:00:00updates | 3.4 kB 00:00:00extras/7/x86_64/primary_db | 200 kB 00:00:00Loading mirror speeds from cached hostfile * base: mirrors.tuna.tsinghua.edu.cn * extras: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.tuna.tsinghua.edu.cnResolving Dependencies--&gt; Running transaction check---&gt; Package lsof.x86_64 0:4.87-6.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved=========================================================================================================== Package Arch Version Repository Size===========================================================================================================Installing: lsof x86_64 4.87-6.el7 base 331 kTransaction Summary===========================================================================================================Install 1 PackageTotal download size: 331 kInstalled size: 927 kIs this ok [y/d/N]: yDownloading packages:lsof-4.87-6.el7.x86_64.rpm | 331 kB 00:00:00Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : lsof-4.87-6.el7.x86_64 1/1 Verifying : lsof-4.87-6.el7.x86_64 1/1Installed: lsof.x86_64 0:4.87-6.el7Complete! 整个安装过程问题不大，大大小小的lsof安装已经也装过10几次了，重没发生过意外，有问题的话可以邮件、微信联系我，一起来进行解决。 输出内容这个先简单介绍一下lsof输出信息的内容，具体格式如图： COMMAND command，进程的名称 PID process id，进程标识符id TID thread id，线程标识符id USER user，进程所属用户 FD file description，文件描述符，应用程序可以通过文件描述符识别该文件，一般有以下取值： cwd：current work dirctory，应用程序启动的目录 txt：program text (code and data)，该类型的文件是程序代码，如应用程序二进制文件本身或共享库 lnn：library references (AIX) er：FD information error (see NAME column) jld：jail directory (FreeBSD) ltx：shared library text (code and data) mxx：hex memory-mapped type number xx m86：DOS Merge mapped file mem：memory-mapped file mmap：memory-mapped device pd：parent directory rtd：root directory tr：kernel trace file (OpenBSD) v86：VP/ix mapped file 0：表示标准输出 1：表示标准输入 2：表示标准错误 TYPE type，文件类型，常见的文件类型有以下几种： DIR：表示目录 CHR：表示字符类型 BLK：块设备类型 UNIX：UNIX域套接字 FIFO：先进先出(FIFO)队列 IPv4：网际协议(IP)套接字 DEVICE device，指定磁盘的名称 SIZE/OFF size，文件的大小 NODE node，索引节点，在这里啰嗦几句，磁盘存储机制，来个比喻吧：每个磁盘是一个大房子，大房子里面有多个小房子用来存储东西，但是呢每个小房子都有自己的房间号1、2、3、4、5、6……就这样一直排，我们把需要存储的数据放在小房子里面，一个不够就两个、两个不够就三个、以此类推，但是有个记录表需要记录刚存储的数据所对应的房间号，这样物流存储与房间号就对应起来了，所谓的房间号就是现在看的NODE节点，NODE节点就是文件在磁盘上的标识。 NAME name，打开文件的确切名称 参数详解lsof参数有太多太多，这里不一一列举，只讲解一下常用的参数，如果有想深入了解的，请man lsof。 -a 列出打开文件存在的进程 -c &lt;进程名&gt; 列出指定名称进程所使用到的文件 -d &lt;文件&gt; 列出打开指定文件描述的进程 +d &lt;目录&gt; 列出目录下被打开的文件 +D &lt;目录&gt; 递归列出目录下被打开的文件 -n &lt;目录&gt; 列出使用NFS的文件 -u &lt;用户名&gt; 列出指定用户打开的文件 -p &lt;进程id&gt; 列出指定进程号所打开的文件 -i &lt;条件&gt; 列出打开的套接字，过滤条件：tcp、udp、4、6、协议、:端口、 @ip 常用命令 查看端口 1lsof -i :80 列出80端口目前打开的文件列表。 查看连接 1234567891011121314# 所有网络连接信息lsof -i# TCP网络连接信息lsof -i tcp# UDP网络连接信息lsof -i udp# TCP连接方式、端口为8080的连接信息lsof -i tcp:8080# UDP连接方式、端口为8080的连接信息lsof -i udp:8080 指定进程名称 1lsof -c ngin 列出以ngin开头的进程打开的文件列表。 指定进程id 1lsof -p 3215 列出指定进程打开的文件列表。 指定用户 1lsof -u root 列出指定用户打开的文件列表。 查看指定目录被打开的文件（目录非遍历） 1lsof +d /usr/local/ 列出目录下被进程打开的文件列表。 查看指定目录被打开的文件（目录遍历） 1lsof +D /usr/local/ 遍历搜索的方式列出目录下被进程打开的文件列表。 结束语本篇先写到这里吧，以上是我常用的命令以及参数说明，各种参数可以一起使用，如果不能满足大家的需求请见谅，毕竟本人是linux小白一枚，在不断尝试中去学习、去进步、去成长、去积累吧，敬自己。 学习参考lsof简书：https://www.jianshu.com/p/be0c534c6a41每日一命令lsof：https://www.cnblogs.com/peida/archive/2013/02/26/2932972.html 感谢上面的2篇文章。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux增强篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫之公司网站首页Title、Keywords、Description]]></title>
    <url>%2Farticles%2F43681%2F</url>
    <content type="text"><![CDATA[工作上涉及公司网站SEO优化相关的工作，但是在Title、Keywords、Description这块有点不清楚。于是，参考了一些与自己公司业务上有相同的公司网站内容，在进行词语分析选取一些关键词，在结合本公司的业务内容关键词进行综合，完成了网站SEO优化的Keywords。 Python实战 爬虫教程系列 废话也不多说了，关于爬虫相关使用的教程在前面以及介绍了，而且还有栗子，这里主要贴上相关代码。除了爬取数据之外，本程序还把处理好的数据进行分析选取出现频率最多Keywords，以及把爬取的数据存储到excel中。 思路 抓取数据 -&gt; 解析 -&gt; 存储 -&gt; 分析 特色 在本次爬虫中，运用了gevent协程，玩python不清楚协程的同学请自行脑补。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: 用来抓取指定的物流公司官网的信息，包含title、keywords、description。usage: python comp_infos_grab.pybase_info: __version__ = &quot;v.10&quot; __author__ = &quot;PyGo&quot; __time__ = &quot;2019/12/3&quot; __mail__ = &quot;gaoming971366@163.com&quot;------------------------------------------------&quot;&quot;&quot;import requestsimport geventimport xlrdimport xlwtfrom gevent import monkey; monkey.patch_all()from bs4 import BeautifulSoupimport jiebaPUBLIC_URL_LIST = &#123; &quot;IML俄罗斯海外仓&quot;: &quot;http://www.imlb2c.com/&quot;, &quot;旺集科技&quot;: &quot;http://www.wangjigroup.com/&quot;, &quot;黑龙江俄速通国际物流有限公司&quot;: &quot;http://www.ruston.cc/&quot;, &quot;AliExpress全球速卖通&quot;: &quot;https://sell.aliexpress.com/zh/__pc/shipping/aliexpress_shipping.htm&quot;, &quot;中外运集装箱运输有限公司&quot;: &quot;http://www.sinolines.com/&quot;, &quot;乐泰国际物流有限公司&quot;: &quot;http://www.letaimzl.com/&quot;, &quot;NOEL诺艾尔集团&quot;: &quot;http://www.noelworld.com/&quot;, &quot;慧承国际物流&quot;: &quot;http://www.hcwuliu.com/&quot;, &quot;满洲里新颖国际货运代理有限公司&quot;: &quot;http://www.mzlxinying.com/&quot;, &quot;运盟国际物流&quot;: &quot;http://www.ym-trans.com/&quot;, &quot;如易科技&quot;: &quot;http://www.ruecom.cn/&quot;&#125;class companyGrap(object): _instance = None def __init__(self): super(companyGrap, self).__init__() def __new__(cls, *args, **kwargs): if companyGrap._instance is None: companyGrap._instance = object.__new__(cls, *args, **kwargs) return companyGrap._instance def _get_infos(self, url): results = dict() results[&apos;url&apos;] = url if not url: return results payload = &quot;&quot; headers = &#123; &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot; &#125; response = requests.get(url, data=payload, headers=headers) if response.status_code == 200: soup = BeautifulSoup(response.content, &apos;html.parser&apos;) head = soup.head titles = head.find_all(&apos;title&apos;) tl = titles[0].string if titles else &quot;&quot; results[&apos;title&apos;] = tl keywords = head.find_all(&apos;meta&apos;, attrs=&#123;&apos;name&apos;: &apos;keywords&apos;&#125;) kw = keywords[0].attrs.get(&apos;content&apos;) if keywords else &quot;&quot; results[&apos;keyword&apos;] = kw descriptions = head.find_all(&apos;meta&apos;, attrs=&#123;&apos;name&apos;: &apos;description&apos;&#125;) desc = descriptions[0].attrs.get(&apos;content&apos;) if descriptions else &quot;&quot; results[&apos;description&apos;] = desc return results def to_excel(self, datas, exlname): &quot;&quot;&quot; generate data of excel format to save :param datas: excel data :param exlname: excel name :return: None, excel data &quot;&quot;&quot; f = xlwt.Workbook(encoding=&apos;utf-8&apos;) sheet = f.add_sheet(&apos;sheet&apos;, cell_overwrite_ok=True) EXCEL_TITLES = [&quot;ID&quot;, &quot;NAME&quot;, &quot;URL&quot;, &apos;TITLE&apos;, &apos;KEYWORDS&apos;, &apos;DESCRIPTION&apos;, &quot;REMARK&quot;] BUSINESS = &quot;BUSINESS&quot; style_title = xlwt.XFStyle() font = xlwt.Font() font.name = &apos;Times New Roman&apos; font.bold = True font.color_index = 4 font.height = 220 style_title.font = font style_content = xlwt.XFStyle() font = xlwt.Font() font.name = &apos;Times New Roman&apos; font.bold = False font.color_index = 4 font.height = 220 style_content.font = font # 标题 for i in range(0, len(EXCEL_TITLES)): sheet.write(0, i, EXCEL_TITLES[i], style_title) # 合并 &amp;&amp; 重写 sheet.write_merge(0, 0, 3, 5, BUSINESS, style_title) sheet.write_merge(0, 1, 0, 0, &apos;ID&apos;, style_title) sheet.write_merge(0, 1, 1, 1, &apos;NAME&apos;, style_title) sheet.write_merge(0, 1, 2, 2, &apos;URL&apos;, style_title) sheet.write_merge(0, 1, 6, 6, &apos;REMARK&apos;, style_title) for i in range(3, 6): sheet.write(1, i, EXCEL_TITLES[i], style_content) row = 2 count = 1 for line in datas: sheet.write(row, 0, count, style_title) sheet.write(row, 1, line.get(&apos;name&apos;), style_content) sheet.write(row, 2, line.get(&apos;url&apos;), style_content) sheet.write(row, 3, line.get(&apos;title&apos;), style_content) sheet.write(row, 4, line.get(&apos;keyword&apos;), style_content) sheet.write(row, 5, line.get(&apos;description&apos;), style_content) row += 1 count += 1 f.save(exlname) def _deal_url(self, k, v): return self._get_infos(v) def to_generate_kw(self, datas): keywords_src = &quot;&quot; for data in datas: if not data: continue keywords_src += data.get(&apos;keyword&apos;) keywords = jieba.lcut(keywords_src, cut_all=False) counts = dict() for word in keywords: if not word: continue if isinstance(word, unicode): word = word.encode(&apos;utf-8&apos;) if word in (&apos;|&apos;, &apos;,&apos;, &apos; &apos;, &apos;-&apos;, &apos;，&apos;): continue counts[word] = counts.get(word, 0) + 1 ord_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True) for k in ord_counts: print &quot;%s: %s&quot; % (k[0], k[1]) def run(self, to_excel=False): &quot;&quot;&quot; process run :param to_excel: :return: &quot;&quot;&quot; jobs = list() names = list() excel_datas = list() for k, v in PUBLIC_URL_LIST.iteritems(): if not k or not v: continue names.append(k) jobs.append(gevent.spawn(self._deal_url, k, v)) gevent.joinall(jobs) for name, job in zip(names, jobs): value = job.value print &apos;==================%s==================&apos; % name print &apos;Title: %s&apos; % value.get(&apos;title&apos;) print &apos;Keyword: %s&apos; % value.get(&apos;keyword&apos;) print &apos;Description: %s&apos; % value.get(&apos;description&apos;) value[&apos;name&apos;] = name excel_datas.append(value) self.to_generate_kw(excel_datas) if to_excel: print &apos;---------excel ok&apos; self.to_excel(excel_datas, &apos;companys.xls&apos;)if __name__ == &apos;__main__&apos;: companyGrap().run(to_excel=False)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
        <tag>爬虫系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新MacOS导致微信截图问题]]></title>
    <url>%2Farticles%2F17077%2F</url>
    <content type="text"><![CDATA[问题背景 Mac更新了新版的OS之后，发现微信截图除了能获取到微信界面信息，其他的信息都获取不到了。微信设置了截图的快捷键，平时也用习惯了，不能快捷键去操作常用的操作，岂不蓝瘦、香菇。 问题出现的很简单，更新系统前可以使用，更新系统后不能使用了，说明还是系统的问题。直接针对于系统进行排查即可，而且MacOS基于unix开发的，所以跟权限差不多相关。 快捷键： shift + command + 4 解决方案 系统偏好设置 -&gt; 安全与隐私 隐私 -&gt; 找到屏幕录制 -&gt; 勾选微信 温馨提示解决问题要有思路，而且要善于思考。]]></content>
      <categories>
        <category>MacOS</category>
        <category>日常问题</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫之糗百笑话]]></title>
    <url>%2Farticles%2F32384%2F</url>
    <content type="text"><![CDATA[之前已经介绍过了爬虫的利器：Requests、BeautifulSoup。在陆续跟上几个实战来进行演示，本篇主要是爬糗百网站的文本笑话以及笑话图片，纯属于技术宅的磨牙的事情。 糗百服务器更新中。。。。。。文章暂无 Python实战 爬虫教程系列 简介实现糗百网站的文本笑话以及笑话图片数据获取，并存储到本地。 技术流程 结束语本人不是专业做爬虫数据方向的，业余爱好。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新、旧民主主义革命的异同【历史】]]></title>
    <url>%2Farticles%2F43171%2F</url>
    <content type="text"><![CDATA[论述新、旧民主主义革命的异同 不同点 类型 社会背景 革命对象 新民主主义革命 半殖民地半封建社会 反帝反封建 旧民主主义革命 相同点 类型 领导阶级 指导思想 革命前景 革命性质 新民主主义革命 无产阶级 马克思列宁主义 建立人民民主专政的国家，走社会主义路线 无产阶级革命 旧民主主义革命 资产阶级 三民主义（民权、民主、民生） 建立资产阶级共和国，走资本主义路线 资产阶级革命]]></content>
      <categories>
        <category>公务员</category>
      </categories>
      <tags>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中秋节【中国节】]]></title>
    <url>%2Farticles%2F65231%2F</url>
    <content type="text"><![CDATA[中国节-中秋节 持续更新中。。。。。。 时间 地点 2019-09-13 保康]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>中国节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH之免密码登录]]></title>
    <url>%2Farticles%2F1431%2F</url>
    <content type="text"><![CDATA[背景 前几天的文章中介绍了SSH的快捷配置，今天讲述一下SSH免密码登录服务器，这个操作在玩服务器中经常用到，建议收藏。 SSH 免密码 SSH配置 正文 生成密钥公钥 1ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_dsa 这个命令会产生一个公钥文件id_rsa.pub和密钥文件id_rsa， -t rsa：表示使用密钥的加密类型 -P ‘’：表示不需要密码登录 -f ~/.ssh/id_dsa：表示密钥存放的路径为用户/.ssh/id_dsa 公钥上传服务器 12ssh-copy-id 用户@服务器IP输入用户登录密码 执行这个命令，会把刚生成公钥文件内容复制到服务器~/.ssh/authorized_keys文件中。也可以用其他方式，只要把公钥复制到服务器authorized_keys文件中即可。 这样就实现SSH免密码登录服务器，加上上篇SSH配置中config，以后直接ssh XXXX即可登录服务器。 SSH长连接配置 第一步 编辑服务器的 sshd_config1vim /etc/ssh/sshd_config 第二步 找到如下配置并且修改参数12ClientAliveInterval 60 ## 这个属性表示超时时间(单位是秒)，修改为 60,需要可以加到600ClientAliveCountMax 10 ## 这个属性是超时链接次数，允许你超时的次数 10 这个配置表示超时时间为一分钟，超时连接次数为10次，也就是允许长连接十分钟不操作第三步 保存配置并生效1systemctl restart sshd 特别说明服务器ssh目录以及authorized_keys文件的权限： chmod 700 ~/.ssh/ chmod 600 authorized_keys]]></content>
      <categories>
        <category>服务器</category>
        <category>协议类</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>协议类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH之快捷配置]]></title>
    <url>%2Farticles%2F24280%2F</url>
    <content type="text"><![CDATA[背景 上篇文章介绍了有关SSH协议的基础知识，正常工作中都是通过下列命令进行ssh连接：1ssh 用户名@服务器IP工作中，需要ssh连接到服务器，然后每次需要输入服务的IP或者机器名，而且连接到一台服务器后，还可能跳转到另外一台服务器，每次还需要输入密码，个人感觉比较麻烦。通过配置ssh_config的方式简化连接命令，在ssh远程连接上更加高效。 SSH 服务器连接 SSH配置 结果对比 配置前 1ssh 用户名@服务器IP 每次都需要输入密码 配置后 1ssh 别名 每日只需输入一次密码 配置详解1 进入到~/.ssh目录，查看是否有config文件，如果没有这个文件，需要通过touch config手动进行建立。 2 配置文件内容12345678Host XXXXHostName IPUser mingliang.gaoControlMaster autoControlPath ~/.ssh/master-%r@%h:@%pControlPersist yesPasswordAuthentication noIdentityFile ~/.ssh/id_rsa Host：ssh进行连接的别名 HostName：服务器的IP或者机器名 User：用户名 Port：端口 ControlMaster：是否多个会话连接用一个session文件的模式，需要配合ControlPath、ControlPersist一起使用 ControlPath：保存的session会话文件（%r远程连接的用户，%h远程连接的ip，%s远程连接的端口） ControlPersist：连接是否保持长连接 PasswordAuthentication：是否需要密码认证 IdentityFile：私钥文件 如果需要了解更多的参数，请man ssh_config进行查看。 结果配置完之后，每次只需要ssh 别名就可以连接到指定配置的服务器，而且在会话session结束之前只需要第一次密码即可。]]></content>
      <categories>
        <category>服务器</category>
        <category>协议类</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>协议类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三大作风三大法宝三大灵魂【历史】]]></title>
    <url>%2Farticles%2F17252%2F</url>
    <content type="text"><![CDATA[三大作风三大法宝三大灵魂 三大作风中国共产党的三大作风 理论和实际相结合 密切联系群众 批评与自我批评 出自《论联合政府》 三大法宝中国革命的三大法宝 武装斗争 统一战线 党的建设 出自《&lt;共产党人&gt;发刊词》 三大灵魂毛泽东思想的三大灵魂 实事求是 群众路线 独立自主]]></content>
      <categories>
        <category>公务员</category>
      </categories>
      <tags>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH协议的基础知识]]></title>
    <url>%2Farticles%2F62041%2F</url>
    <content type="text"><![CDATA[背景 因为一些原因，把github.io重新在github搭建一下，但是hexo deploy去提交代码的时候，发生代码提交失败的情况。原来在GIS90.github.io Repository上没有进行Deploy keys的配置，导致push失败。配置好Deploy keys的配置，代码成功提交，但是为何配置完key就可以成功提交呢？原理是SSH协议。 SSH配置 SSH安装 协议 服务器 定义The SSH protocol uses encryption to secure the connection between a client and a server. All user authentication, commands, output, and file transfers are encrypted to protect against attacks in the network. For details of how the SSH protocol works, see the protocol page. To understand the SSH File Transfer Protocol, see the SFTP page. The SSH protocol (also referred to as Secure Shell) is a method for secure remote login from one computer to another. It provides several alternative options for strong authentication, and it protects the communications security and integrity with strong encryption. It is a secure alternative to the non-protected login protocols (such as telnet, rlogin) and insecure file transfer methods (such as FTP). 直接摘录了官网的原话，不多说了直接捞干的，大概意思就是说SSH协议是一种连接服务器的一种简单、安全、可靠的连接方法。 验证方式目前，后端开发、运维等工作中经常需要登录远程服务并操作，常用的连接方式都是ssh，方式如下：12ssh 用户名@IPssh 用户名@机器名 使用ssh登录的时候，验证方式主要有2种： 密码验证 使用用户名和密码进行登录，两者匹配才可以登录，但是密码认证有以下的缺点： 密码泄漏。一个帐户多个人进行使用，需要让所有使用人都知道密码，很容易密码泄露。 另外，多账户使用修改密码时必须通知所有人，否则就会造成其他人登录失败。 公钥验证 使用公钥、私钥的方式就行验证。保证了多个用户可以通过各自的密钥登录到服务器，互不干扰，而且认证也可以允许使用空密码，省去每次登录都需要输入密码的麻烦。 配置通过ssh-keygen命令进行生成公钥私钥，下面详细说明。 1、执行ssh-keygen -t rsa命令。通过ssh-keygen –help可知，-t是加密的参数，最常用。除了rsa，还有dsa、ecdsa、ed25519，其中rsa是安全的加密方式。 2、输入要生成的文件名，默认回车即可。 3、输入密码，默认回车即可。 4、输入确认密码，，默认回车即可。 5、出现下列图案代表成功。1234567891011+--[ RSA 2048]----+| .+=*.. || . += + || o oo+ || E . . o || ..S. || .o . || .o + || ...oo || +. |+-----------------+ 具体的ssh-keygen参数可以通过ssh-keygen –help进行查看，这里不作详解。 原理讲解 定义 这里主要针对于公钥私钥的验证方式进行讲解，通过执行ssh-kengen命令可以得到公钥、私钥，都是经过加密后的文件。 公钥：能被其他人知道的加密文件，id_rsa.pub。 私钥：只能自己知道的加密文件，id_rsa。 只要私钥不被泄漏，就不会出现任何指定用户登录的问题。 流程图 验证流程 1、Client通过ssh-keygen命令生成公钥和私钥。 2、Client将自己的公钥id_rsa.pub存放到Server服务器上的认证文件。 3、Client通过ssh命令将用户、IP发送请求连接指定的服务器。 4、Server收到到请求之后，先去authorized_keys中进行查找是否有指定的用户，如果有将进行下一步，无此用户拒绝验证连接。 5、验证文件中包含指定用户，Server将生成一个随机字符串通过*公钥进行加密，发送给Client。 6、Client接收到Server加密的字符串，利用私钥进行解密，解密后在将这个随机字符串再发送给Server。 7、Server接收到Client发送的解密字符串与生成的原始随机字符串进行比对，如果正确就让客户端登录，否则拒绝。 学习参考SSH官网：https://www.ssh.com/ssh/]]></content>
      <categories>
        <category>服务器</category>
        <category>协议类</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>协议类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qunar项目之总结篇]]></title>
    <url>%2Farticles%2F30296%2F</url>
    <content type="text"><![CDATA[Qunar负责的项目汇总。 感谢Qunar让我成长 ！！！ 项目总结 Qunar Python实战 Web 背景统计一下负责项目的说明。 统计 ID 项目名称 中文名称 重要程度 技术架构 1 backyard 骆驼帮 ★★★ 前后端分离项目【Python + React】 2 isapi 员工信息API ★★★ rest api，Python编写 3 new_hrtools AD账号管理系统 ★★ 任务脚本较多，Python编写 4 officedb 办公大厦管理系统 ★ 后台【Flask】+ 模板 5 opsapp Qtalk Apis ★★ rest api 6 outage 故障系统 ★★★ 后台【Flask】+ 前端【angularjs】 7 psapproval qtalk审批申请 ★★ rest api，Python编写 8 wwwhr 员工信息采集系统 ★★ 后台【Flask】+ 模板 9 newoa_api newoa审批Api ★★ rest api，Python编写 10 opsbi Ops故障可视化bi系统 ★ 后台【Flask】+ 前端【angularjs】 11 smsdb 短信狗 ★★ 软件 + 硬件 12 opstools-cron 定时任务 ★★ Node 项目说明 Isapi 简述 Isapi是一个提供qunar员工信息数据的api项目，主要针对的用户群体是内部员工。数据来源于ehr系统（peoplesoft，简称：ps），ps使用的是Oracle数据库，基于ps提供的view试图，把员工数据同步到一个新的数据库，Isapi选择使用了postgresql，把员工信息数据封装json，通过http api接口的方式开放给用户，不仅解决了其他系统使用员工信息数据的问题，还有让ps数据隔离，提高了安全性、可用性。 backyard 简述 用于Qunar员工内部使用的一个web内网系统，主要用于员工信息查询、考勤、公司相关的制度、条例等信息，是一个员工访问量相对较大的一个web系统。 new_hrtools 简述 项目主要用于员工ad账号相关的处理，主要有API接口和定时任务2大部分组成，其中定时任务是重点，与ldap、数据库均有交互，是一样日常运维工作较多的一个项目。 officedb 简述 Officedb系统是Qunar行政管理员工办公大厦的一个内部系统，主要针对于Qunar行政、QunarIT对办公大厦进行费用、员工信息等管理，实现Qunar办公大厦的自动化。 opsapp 简述 opsapp跟Isapi实现的功能大致一样，这个项目是专门用来提供给qtalk移动端在外网情况下进行使用的一个api接口，这个接口实现了访问内网需要的api接口，实现了在非内网情况使用qtalk功能。 outage 简述 主要用于用户进行报故障所用，主要有故障通报、故障review、故障产品线、对外API4大部分。 psapproval 简述 主要用于ehr系统部分流程审批、申请在qtalk移动端进行操作。ehr系统主要用于管理员工、员工使用的一个人事系统，只能通过pc端进行操作，为了能在qtalk移动端也同样进行操作，psapproval接入ehr的员工使用流程。 wwwhr 简述 用于采集入职Qunar员工基本个人信息的一个外部系统，信息主要用于ehr系统使用，是一个正常入职Qunar员工必须走的一步。 newoa_api 简述 newoa_api是专门针对于PC端Newoa表单在移动端详情展示，主要用于数据格式化。 opsbi 简述 Opsbi是针对于Ops组造成故障的数据做的一个可视化web系统，数据源来源于Outage故障系统，是一个前端【angularjs + echart】+ 后台【python】一体的项目。 smsdb 简述 smsd是一个针对于机票事业部短信收发做的一个项目，实现了机票部门短信接收、发送、代收等功能。 opstools-cron 简述 Opstools-cron项目主要针对于其他项目有定时任务写的一个请求request crontab，由pm2进行管理。 发布 提交代码12345671 git add .2 git commit -m &quot;XXXX&quot;3 git tag q-xxxxxxxx-xx4 git push origin master --tags 自动化发布 1 打开自动化发布url。 2 左侧查看通过tag触发构建的项目，等待构建完成。如果构建过程中出现问题，请联系相关负责人进行处理。 3 点击Qunar Build，选择QA【beta环境】，先进行beta环境发布，参数详解如下： server_list_group：A tag_name：q-xxxxxxxx-xx server_list_group代表发布机器组，发哪个组写哪个组名即可，全部写ALL。 tag_name为构建的tag名称。 4 QA发布完成环境之后。 5 在选择OPS【线上环境】进行发布，建议发布一台检查一台的方式去进行发现线上环境。 项目启动 常规12345(sudo) python tools/install_venv.py(sudo) tools/with_venv.sh python setup.py develop # develop 软链(sudo) tools/with_venv.sh main --config-file 配置文件 -v 调试123456789(sudo) virtualenv .venv(sudo) source .venv/bin/activate(sudo) sudo pip install -r requirements.txt -i 源地址 --trusted-host 源地址域名(sudo) tools/with_venv.sh python setup.py install # install 复制(sudo) tools/with_venv.sh main --config-file 配置文件 -v supervisorctl管理登录服务器上切换到sudo用户，执行supervisorctl： 常用命令说明： status 查看项目运行状态 restart outage-www 重启outage-www 项目 start outage-www 启动outage-www 项目 stop outage-www 停止outage-www项目 start all 启动所有项目 stop all停止所有项目 tail -f outage-www 动态的查看outage-www项目日志]]></content>
      <categories>
        <category>Qunar项目</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[北京西单抓娃娃心得篇]]></title>
    <url>%2Farticles%2F8059%2F</url>
    <content type="text"><![CDATA[本篇文章讲述作者本人总结的抓娃娃技巧不光只会敲代码的工程师 相信生活中大部分人都看过抓娃娃机，甚至不少人也尝试过，但结果一般都是差强人意。本人在北京上班，经常去西单的一个游戏风云娱乐去抓娃娃，也总结了一些经验，写出来与大家进行Share。 地点北京西单新一代商城7层无直梯，需要一层层电梯上去 时间周一 ～ 周日10:00 ～ 22:00 简介这家娱乐地，我并不是为了给这家打广告，而且单纯的觉得这家真的好玩，里面抓娃娃机有不同种的，娃娃更是大小不一样，五花八门，还有跳舞机、篮球机等等，最重要的还有拳皇97、98，相信很多人都有着美好的回忆，而且还经常能遇到cosplay。 价格通过扫码进行网购，反正就是买的多赠送的也多。 技巧我的抓娃娃技巧都是基于这家练出来的，总结一下： 先观察爪子的松紧程度，看别人再决定是否进行抓取，紧的通常抓出来的概率大一些。 娃娃的摆放位置，最好选那些靠近出口的，周围又没有阻挡的娃娃，近边的娃娃通常会比远边的娃娃更容易出来。 等娃娃机秒数结束，让爪子自然下落，爪子抓到娃娃以后按住，按住会比按一下抓得更紧一些，出来的概率大。 抓娃娃的爪子有的时候可以靠摇晃的惯性把娃娃甩出来，有时间需要平稳的爪子取抓取，这种属于难一些的操作，看情况而定，如果不知道怎么选择，建议选择平稳的爪子去抓取娃娃。 根据娃娃的形状进行抓取，尽量让爪子抓到娃娃的重心、重心、重心，看好了。【头大抓身】 还可以根据娃娃的材质柔软程度进行抓取，软的相对于硬材质的娃娃好抓，不止轻，抓到了还变形，出来的概率大。 还有一种情况，就是尽量选择满的娃娃机，有可能让娃娃抓起在滚落下来，也不失为一种方法。 特别说明下面说的这几条都是非常重要的，也是针对于西单这家，掌握了你将会抓的更多： 娃娃机挡板有2个方向，多抓挡板右侧的，不要抓上侧的，右侧出来的概率远远大于上侧的。如果特别喜欢哪个，可以让服务人员帮忙摆一下，摆完之后抓取的概率也大大提高。 演示Sorry, your browser does not support the video tag.]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>抓娃娃</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浪漫二人行之天津二日游]]></title>
    <url>%2Farticles%2F28340%2F</url>
    <content type="text"><![CDATA[天津之眼PyGo²旅行记 美食 天津打卡 背景 来了北京6年了，一直都没去天津嗨皮过，快离开北京了，觉得去天津转转。本来心里打算有2个嗨皮的地方：北京欢乐谷或者天津之旅，二者进行比较，已经去过上海的迪士尼乐园了，选择天津之旅，了却心里的一件憾事。北京到天津的便利也不用多说，30分钟的城际快轨，超快。曾经的天津市是各国的租界，经历并见证了历史的变迁，重要的是天津还有很多小吃，这很吸引人啊。 交通方式交通方式选择了城际快轨，仅30min就可以直达。至于天津市内游玩的话，我选择步行 + 滴滴混合式。 日程安排Day1Day2 日期 2019-08-02 景点 解放桥 + 世纪钟 → 意大利风情街(2小时) → 古文化街(2小时) → 天津之眼(1小时) → 津湾广场(2小时-建议夜景) + 海河 建议 天津之眼建议提前去排队，比较火。 微信天津之眼摩天轮上购票，可以购提前3天的票。 日期 2019-08-03 景点 五大道(2小时) → 天主教天津教区西开主教座堂天主堂(0.5小时) → 瓷房子(0.5小时) → 劝业场商场(和平路店)(2小时) → 南市食品街(2小时) 必游景点 五大道 历史文化名街，天津明信片的背景图。 著名景点： 疙瘩楼 天津市民园体育场 庆王府 五大道博物馆 天津之眼 世界上唯一建在桥上的摩天轮 ，可看到方圆40公里以内的景致。 意大利风情街 近代意大利在国外保留最为完整的历史街区。 著名景点： 马可波罗广场 梁启超旧居 新意街步行街 曹禺故居 意大利兵营旧址 古文化街 中国味，天津味，文化味，古味。 著名景点： 泥人张 天津天后宫 桂发祥十八街麻花 美食推荐天津是一个美食、小吃的聚集地，在游玩过程中享受。主要推荐： 意大利风情街 古文化街 酒店住宿 日期 名称 价格 位置 2019-08-02 天津津塔河畔公馆 243 天津和平区天津和平区张自忠路162号津塔公寓2单元 个人建议 天津之眼摩天轮的票在网上进行购买，成人70一张小孩35，搜索公众号：“天津之眼摩天轮”，在公众号上进行网购预约，可以提前购买3天的，建议选择晚上8点之后的观看时间，夜景很美。建议酒店选择在天津站、津湾广场、意大利风情街附近，离海河很近，而且夜景很美，推荐。天津吃得很多，暂时没有什么推荐必吃的，所以选择了边玩边吃，走一路吃一路。]]></content>
      <categories>
        <category>旅行记</category>
      </categories>
      <tags>
        <tag>旅行记</tag>
        <tag>美食</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之番外篇-多命令执行]]></title>
    <url>%2Farticles%2F64874%2F</url>
    <content type="text"><![CDATA[简介 解决多命令command1，command1，command1…。 学习以下多命令一起执行：&amp;、&amp;&amp;、；、||。 推荐指数🌟🌟🌟🌟🌟 使用方法 ; 语法：command1 ; command2 [; command3] …不管前面命令执行成功没有，后面的命令按顺序继续执行。 &amp; 语法：command1 &amp; command2 [&amp; command3] …多命令同时执行，互不影响。1ls &amp; ll &amp; ls &amp;&amp; 语法：command1 &amp;&amp; command2 [&amp;&amp; command3] …命令之间使用 &amp;&amp; 连接，实现逻辑与的功能，只有左边的命令执行成功，后面命令才继续执行。1touch 1.txt &amp;&amp; rm ~/Desktop/1.txt &amp;&amp; echo &quot;rm success&quot; 先touch一个1.txt文件，接下来在rm删除，最后输出success。 || 语法：command1 || command2 [|| command3] …命令之间使用 || 连接，实现逻辑或的功能，只有左边的命令执行失败，后面命令才继续执行。1las || echo &quot;无命令&quot;]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux番外篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大学之证书那点事]]></title>
    <url>%2Farticles%2F22143%2F</url>
    <content type="text"><![CDATA[回顾一下大学4年得到的证书 CET CET-4准考证 时间图片2011-12 CET-4准考证 时间图片2011-12 CET-6准考证 时间图片2012-12 NCRE NCRE-3数据库 时间图片2011-09 研究生 准考证 时间图片2013-01 成绩 时间图片2013-01 GIS GIS工程师 时间图片2012-11 作品 时间图片2010-12 表彰 校优实习生 时间图片2013-05 奖学金 时间图片2013-06 其他 普通话 时间图片 2012-06]]></content>
      <categories>
        <category>大学</category>
      </categories>
      <tags>
        <tag>证书</tag>
        <tag>回忆录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[父亲节【国际节】]]></title>
    <url>%2Farticles%2F46739%2F</url>
    <content type="text"><![CDATA[国际节-父亲节 持续更新中。。。。。。 时间 地点 2019-06-16 北京]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>国际节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[选词填空【图】]]></title>
    <url>%2Farticles%2F9458%2F</url>
    <content type="text"><![CDATA[看图笑话 感叹！现在的小学生都这么任性吗？]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>看图笑话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[鼠标自定义样式]]></title>
    <url>%2Farticles%2F3035%2F</url>
    <content type="text"><![CDATA[背景 自定义鼠标样式，将blog的优化进行到底，让每天更加美化。 正文 压缩包点击下载样式文件，把.cur样式文件copy到blog/public目录下。 打开自定义样式文件：blog/themes/next/source/css/_custom/custom.styl，加入以下代码： 1234body &#123; background:url(/images/background.jpg); cursor: url(&apos;/images/shubiao_guangmingxi.cur&apos;), auto !important;&#125; 我只定义了正常状态的鼠标样式，其他状态的样式根据自己的喜欢定义即可。 学习详细教程：https://juejin.im/post/5b4876b66fb9a04f9e230066 说明鼠标样式文件我是从网上下载的，下载过程十分曲折，显示关注公众号，在网页百度网盘下载，在安装百度网盘。。。。。。麻烦的要死。百度的东西，你懂的，下载完我就卸载了。]]></content>
      <categories>
        <category>前端</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
        <tag>前端其他分类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[端午节【中国节】]]></title>
    <url>%2Farticles%2F53227%2F</url>
    <content type="text"><![CDATA[中国节-端午节 持续更新中。。。。。。 时间 地点 2019-06-07 北京 2020-06-25 河北]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>中国节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo如何引用自定义js代码]]></title>
    <url>%2Farticles%2F41680%2F</url>
    <content type="text"><![CDATA[背景 上个月研究Hexo如何引用原生的html+css，而且也写了一篇文章发表。但是如果想把自己的博客做的更加突出、像模像样，没有js代码去实现功能是不行的，正好想做一个主题切换功能，借着这个功能介绍一下Hexo是如何引用js代码的。 正文先讲述怎么引用js代码的，完了在通过实战验证。 引用方式Hexo+Next通过渲染模板（.swig）以及md文件生成对应的html页面，那么问题就来了，既然是模板，肯定会有一个base文件，这里就不做详述了，直接说：blog/themes/next/layout/_layout.swig。打开这个文件，会发现里面整个页面渲染的框架以及对第三方文件的引用，看下引用js文件代码：1234567891011121314151617181920212223&#123;% include &apos;_scripts/next-boot.swig&apos; %&#125;&#123;% include &apos;_scripts/scroll-cookie.swig&apos; %&#125;&#123;% include &apos;_scripts/exturl.swig&apos; %&#125;&#123;% include &apos;_third-party/quicklink.swig&apos; %&#125;&#123;% include &apos;_third-party/comments/index.swig&apos; %&#125;&#123;% include &apos;_third-party/search/index.swig&apos; %&#125;&#123;% include &apos;_third-party/analytics/lean-analytics.swig&apos; %&#125;&#123;% include &apos;_third-party/analytics/firestore.swig&apos; %&#125;&#123;% include &apos;_third-party/math/index.swig&apos; %&#125;&#123;% include &apos;_third-party/pdf.swig&apos; %&#125;&#123;% include &apos;_third-party/mermaid.swig&apos; %&#125;&#123;% include &apos;_third-party/baidu-push.swig&apos; %&#125;&#123;% include &apos;_third-party/schedule.swig&apos; %&#125;&#123;% include &apos;_third-party/needsharebutton.swig&apos; %&#125;&#123;% include &apos;_third-party/rating.swig&apos; %&#125;&#123;% include &apos;_third-party/pangu.swig&apos; %&#125;&#123;% include &apos;_third-party/bookmark.swig&apos; %&#125;&#123;% include &apos;_third-party/copy-code.swig&apos; %&#125;&#123;% include &apos;_third-party/chatra.swig&apos; %&#125;&#123;% include &apos;_third-party/tidio.swig&apos; %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/click_magic.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/theme_change.js&quot;&gt;&lt;/script&gt; 还是通过传统的方式引用js代码，相对应的script直接引用的是js文件，而include引用的是swig文件，来点代码看下swig文件里面写的是啥，例子我取的是blog/themes/next/layout/post.swig：1234567891011121314151617181920212223&#123;% extends &apos;_layout.swig&apos; %&#125;&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;&#123;% block title %&#125;&#123;&#123; page.title &#125;&#125; | &#123;&#123; title &#125;&#125;&#123;% endblock %&#125;&#123;% block page_class %&#125;page-post-detail&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;&#123; post_template.render(page) &#125;&#125; &lt;/div&gt;&#123;% endblock %&#125;&#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(true) &#125;&#125;&#123;% endblock %&#125;&#123;% block script_extra %&#125; &#123;% include &apos;_scripts/pages/post-details.swig&apos; %&#125;&#123;% endblock %&#125; 里面存放的是html（标签+css）+一些next主题带的语法。说了这么多，到底咋搞。。。。只需要2步： 在blog/themes/next/source/js/src目录下建立一个js文件，名称自取。在blog/themes/next/layout/_layout.swig文件中通过script引用自定义的js文件。 实战通过一个切换主题的功能来实现上述。 首先，在自定义的header文件：blog/themes/next/layout/_custom/header.swig，加入一个button，代码如下： 1234567&lt;button id=&quot;theme_change&quot; class=&quot;theme_change&quot; type=&quot;button&quot; onclick=&quot;theme_change()&quot;&gt; 暗黑系&lt;/button&gt; 接下来定义button按钮的样式，打开自定义样式文件：blog/themes/next/source/css/_custom/custom.styl，加入一下代码： 123456789101112// 功能按钮样式.theme_change &#123; width: 160px; height: 37px; border-radius: 50px 50px 50px 50px; color: white; font-size: 16px; background-color: #333333; margin-left: 40px; margin-bottom: 20px; border: 3px solid red;&#125; 在刚才说的自定义js代码目录下新建一个theme_change.js文件，加入一下代码： 12345678910111213// 主题切换功能function theme_change() &#123; // 切换字内容 var button = document.getElementById(&apos;theme_change&apos;); var pattern = new RegExp(&apos;暗黑系&apos;, &apos;i&apos;); if (pattern.test(button.innerHTML))&#123; button.innerHTML = &quot;光明系&quot;; &#125; else&#123; button.innerHTML = &quot;暗黑系&quot;; &#125; // 切换主题 document.body.classList.toggle(&apos;dark-theme&apos;);&#125;; 编写暗黑主题的样式，还是自定义样式文件，加入一下代码： 1234// 自制主题切换功能样式body.dark-theme &#123; background: #282c34&#125; 最后一步，自定义js文件的引用。打开blog/themes/next/layout/_layout.swig文件，在底部结束body标签上面引用，代码： 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/theme_change.js&quot;&gt;&lt;/script&gt; hexo g &amp;&amp; hexo s 不出意外，会有一个简单的主题切换功能，样式我也是简单改变了一下背景色，有兴趣的同学可以编写2套Next主题自定义样式。 问题切换主题的功能有个问题，只能改变当前page的主题，切换新的page之后，恢复到初始化主题，没有后台管理的原因记录不了当前的主题状态，待解决。 结束既然做，不说要一定做到最好，起码不能糊弄，与其糊弄还不如不做！！！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿童节【中国节】]]></title>
    <url>%2Farticles%2F24640%2F</url>
    <content type="text"><![CDATA[中国节-儿童节 持续更新中。。。。。。 时间 地点 2019-06-01 北京]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>中国节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博文加入原生html+css]]></title>
    <url>%2Farticles%2F5369%2F</url>
    <content type="text"><![CDATA[背景 用markdown语法去写博文，hexo g会把md转为html，html可被浏览器识别渲染，就形成了大家看到的web。说实话，自学的我，虽然从事IT开发业2年多的经验了，但是要学习还有很多，之前写了一些关于在markdown中加入一些内置tags等方法使博文变得更加美观，可读。但是如果可以把原生html直接嵌入md文件中，这样写md文件就行云流水，而且样式还可以自定义，岂不美哉。但是，事情往往哪会那么容易，走一步一个坑，花了几天时间才搞定嵌入，如果实现了的请勿看，本人小白，勿怪。 正文话不多说，直接看例子。 本人开发了一个相册sidebar功能，但是直接用markdown或者img标签去写，样式单一，就算使用gp标签，图片的样式也是很难看。于是把原生的html嵌入到md文件中，代码如下：1234567891011121314151617181920212223242526272829303132#### 2018-08-05 第一次吃牛排第一次吃牛排&#123;% tabs 2018-07-27 乌镇之旅 %&#125;&lt;!-- tab 点点滴滴 --&gt;&lt;div class=&quot;phote-page&quot;&gt; &lt;div class=&quot;phote-list&quot;&gt; &lt;div class=&quot;phote-column&quot;&gt; &lt;img src=&quot;images/fristniupai/1.jpg&quot;&gt; &lt;img src=&quot;images/fristniupai/5.jpg&quot;&gt; &lt;img src=&quot;images/fristniupai/9.jpg&quot;&gt; &lt;/div&gt; &lt;div class=&quot;phote-column&quot;&gt; &lt;img src=&quot;images/fristniupai/8.jpg&quot;&gt; &lt;img src=&quot;images/fristniupai/2.jpg&quot;&gt; &lt;img src=&quot;images/fristniupai/6.jpg&quot;&gt; &lt;/div&gt; &lt;div class=&quot;phote-column&quot;&gt; &lt;img src=&quot;images/fristniupai/3.jpg&quot;&gt; &lt;img src=&quot;images/fristniupai/7.jpg&quot;&gt; &lt;img src=&quot;images/fristniupai/11.jpg&quot;&gt; &lt;/div&gt; &lt;div class=&quot;phote-column&quot;&gt; &lt;img src=&quot;images/fristniupai/4.jpg&quot;&gt; &lt;img src=&quot;images/fristniupai/10.jpg&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 写完md文件之后，查看页面，发现还是难看，因为没有加入样式，一般都嵌入html的地方都是指定的开发部分，所有给div标签命名一个id最合适，方便写css样式，把个性化的css的样式写入自动样式文件：blog/theme/next/source/css/_custom/custom.styl，增加对应的代码：123456789101112131415161718192021222324// 相册自定义样式.phote-list &#123; display: flex; flex-direction: row; flex-wrap: nowrap; align-items: flex-start;&#125;.phote-list img &#123; border-radius: 35px; // width: 320px; // height: 230px; padding: 6px; background-color: #909497; margin: 0px 0px 0px 0px; box-shadow: 15px 15px 15px rgba(50, 50, 50, 0.99); transition: all 1s ease-in;&#125;.phote-list img:hover &#123; box-shadow: 35px 35px 35px rgba(50, 50, 50, 0.8); transform: rotate(0deg) scale(1.6); background-color: black; padding: 15px; z-index: top;&#125; 在css样式中，我对图片加了一个鼠标滑过放大的动画，既然可以自定义样式，加什么特效都随你了。 最后，重启服务hexo g &amp;&amp; Hexo s，刷新页面就会看到效果。 问题 引入原生的html标签，发现hexo g之后，在生成的.html页面，在div标签会自动加入br标签，导致有些特效出现问题 解决方案：在加入的原生的html部分用raw-endraw内置tags包起来就可以，示例代码：12345678910111213141516171819202122&lt;div class=&quot;timeline&quot;&gt; &lt;div class=&quot;timeline-item&quot; date-is=&apos;1997/07 ~ 2013/07&apos;&gt; &lt;div&gt;上学阶段&lt;/div&gt; &lt;p&gt; 书中自有黄金屋，书中自有颜如玉 &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;timeline-item&quot; date-is=&apos;2014/03 ~ 2016/06&apos;&gt; &lt;div&gt;盲目阶段&lt;/div&gt; &lt;p&gt; 一艘没有航行目标的船 &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;timeline-item&quot; date-is=&apos;2016/07 ~ 至今&apos;&gt; &lt;div&gt;追求阶段&lt;/div&gt; &lt;p&gt; 生活的理想就是理想的生活 &lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 坑一开始趟坑的时候，天真的我居然以为可以把原生的html直接粘贴复制到md文件中就可以了。。。。。。结果，哈哈我真是太天真了。不过后来尝试把样式放到自定义文件中，把样式与标签分离，没想到成功了。不管怎么样，记录下来，希望能帮到他人。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百词斩打卡]]></title>
    <url>%2Farticles%2F58192%2F</url>
    <content type="text"><![CDATA[百词斩 打卡 2019-05 第三周第四周 2019-06 第一周第二周第三周第四周 2019-07 第一周第二周第三周第四周第五周 2019-08 第一周第二周第三周第四周 2021-03 第三周第四周第五周 2021-04 第一周第二周第三周 持续更新中。。。。。。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next搜索优化（三）baidu搜索]]></title>
    <url>%2Farticles%2F21353%2F</url>
    <content type="text"><![CDATA[Hexo SEO优化系列 baidu 背景 博客运行有一年多了，之前写了关于google搜索与网站SEO优化相关的内容，希望自己的博客在baidu搜索上也可以排名，但是还不想花钱，只好通过技术来解决这个难题了。优化了baidu SEO还可以装13，通过搜索就可以搜索到你博客的内容，带来了流量，在准备弄个广告位进行赚点外快，何乐而不为。 正文本文讲解实现对baidu搜索引擎对网站的搜索优化，Hexo+Next搜索优化教程第三篇，之前已经写了关于google搜索以及blog本身优化的文章，欢迎查阅。 安装hexo-generator-sitemap 在blog根目录，执行一下命令： 1npm install hexo-generator-baidu-sitemap --save 在blog/public目录下会自动生产一个baidusitemap.xml文件，里面的内容不用多说了，都是blog的url信息。 添加蜘蛛协议 打开blog/source目录下的robots.txt文件，最后一行，也就是Sitemap下添加以下内容： 1Sitemap: https://pygo2.cn/baidusitemap.xml Allow、Disallow之前已经解释过了，不过看英语也知道啥意思了：Allow字段的值即为允许搜索引擎爬区的内容；Disallow就是不允许搜索引擎爬区的内容。 示例： 123456789101112131415161718User-agent: *Allow: /Allow: /archives/Allow: /articles/Allow: /categories/Allow: /tags/Allow: /messagepad/Allow: /resources/Allow: /about/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://pygp2.cn/sitemap.xmlSitemap: http://pygp2.cn/baidusitemap.xml baidu站长设置 前提：需要一个baidu账号，没有的请自行注册。 打开baidu站长（https://ziyuan.baidu.com/linksubmit/index） 验证baidu账号信息 填写站点相关信息并验证 网站验证有三种方式： 文件验证 html验证 CNAME验证在这里采用html验证的方式，将以下代码放到blog/source/root.html文件的head标签内，然后再执行hexo clean &amp;&amp; hexo g -d命令，重新生成blog。 1&lt;meta name=&quot;baidu-site-verification&quot; content=&quot;3T5rDqaWUL&quot; /&gt; 因为本人网站是自定义的一个root.html域名首页，如果不是把以上代码添加到blog/themes/layout/_partials/head.swig内即可。 链接提交 进入到链接提交功能。 选择链接提交的方式 链接方式两种： 手动提送 自动提交 – 主动推送 – 自动推送 – sitemap 自动化提交 sitemap设置提交 在链接提交功能页。 主动推送 在说明上有curl、post、php等几种方式，本人使用curl + python + crontab(linux)的方式在服务器上做个定时自动推送。 python脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: 自动化推送blog的url到百度usage: python auto_baidu_push.pybase_info: __version__ = &quot;v.10&quot; __author__ = &quot;mingliang.gao&quot; __time__ = &quot;2019/07/18&quot; __mail__ = &quot;mingliang.gao@163.com&quot;思路： 获取blog全部的url，生成url.txt文本，使用baidu站点的curl命令进行数据自动化推送，删除url.txt文件。------------------------------------------------&quot;&quot;&quot;import osimport shutil# 本机HTML_REL_DIR = &apos;/Users/gaomingliang/github/myblog/pygo/public/articles&apos;# 服务器# HTML_REL_DIR = &apos;/opt/www/blog/articles&apos;PUSH_baidu_COMMAND = &apos;curl -H &quot;Content-Type:text/plain&quot; --data-binary @urls.txt &quot;http://data.zz.baidu.com/urls?site=www.pygo2.cn&amp;token=VqQF08BReWjBB018&quot;&apos;DOMAIN_TEPM = &apos;http://www.pygo2.cn/articles&apos;URL_NAME = &apos;urls.txt&apos;def get_cur_dir(): return os.path.abspath(os.path.dirname(__file__))class BlogRequests(object): def __init__(self): self.article_source = HTML_REL_DIR self.cur_dir = get_cur_dir() def collect_codes(self): &quot;&quot;&quot; get all article codes :return: list type &quot;&quot;&quot; return os.listdir(self.article_source) def generator_url_text(self): all_codes = self.collect_codes() if not all_codes: print &apos;============== not codes&apos; return False url_file = os.path.join(self.cur_dir, URL_NAME) if not os.path.exists(url_file): fd = open(url_file, mode=&quot;w&quot;) fd.close() with open(url_file, &apos;w&apos;) as f: for code in all_codes: url = DOMAIN_TEPM + &apos;/%s/&apos; % code f.write(url) # 换行符 f.write(&apos;\n&apos;) return url_file def run(self): url_file = self.generator_url_text() if url_file: os.system(PUSH_baidu_COMMAND) print &apos;-------------end-------------&apos;if __name__ == &apos;__main__&apos;: br = BlogRequests() br.run() linux服务器上的crontab： 11 23 * * * python2 /home/mingliang.gao/crontab/auto_baidu_push.py 结束不积跬步,无以至千里;不积小流,无以成江海。]]></content>
      <categories>
        <category>Hexo</category>
        <category>seo优化</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo插件</tag>
        <tag>seo优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python爬虫利器之BS4(下篇)]]></title>
    <url>%2Farticles%2F34936%2F</url>
    <content type="text"><![CDATA[Python包 BeautifulSoup 爬虫教程系列 背景 关于爬虫的教程数据获取在上篇requestts文章中已经讲解过了，本篇讲解爬虫的数据清洗利器BeautifulSoup，继续为爬虫而服务。 简介Pypi官方的简介：123Beautiful Soup is a library that makes it easy to scrape information from web pages.It sits atop an HTML or XML parser, providing Pythonic idioms for iterating, searching,and modifying the parse tree. 简明扼要，BeautifulSoup是用来解析HTML的工具。 安装1pip install beautifulsoup4 很多单，不多说。 解析器 安装 12pip install lxmlpip install html5lib 比对 解析器 使用方法 优势 劣势 Python标准库 BeautifulSoup(markup, "html.parser") Python的内置标准库 执行速度适中 文档容错能力强 Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差 lxml HTML 解析器 BeautifulSoup(markup, "lxml") 速度快 文档容错能力强 需要安装C语言库 lxml XML 解析器 BeautifulSoup(markup, ["lxml-xml"]) BeautifulSoup(markup, "xml") 速度快 唯一支持XML的解析器 需要安装C语言库 html5lib BeautifulSoup(markup, "html5lib") 最好的容错性 以浏览器的方式解析文档 生成HTML5格式的文档 速度慢 不依赖外部扩展 官方是推荐使用lxml作为解析器，效率更高以及容错能力也比较高，在Python2.7.3之前的版本和Python3中3.2.2之前的版本，必须安装lxml或html5lib, 因为那些Python版本的标准库中内置的HTML解析方法不够稳定. 个人也推荐使用lxml，确实比其他的解析起来快一些，如果不想安装解析器的话那么就推荐使用html5lib，因为2.7版本之后不用安装。 提示如果一段HTML或XML文档格式不正确的话,那么在不同的解析器中返回的结果可能是不一样的,查看 解析器之间的区别 了解更多细节 基础语法12345678910111213141516171819202122from bs4 import BeautifulSouphtml_doc = &quot;&quot;&quot;&lt;html&gt; &lt;head&gt; &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt; &lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;, &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;; and they lived at the bottom of a well.&lt;/p&gt; &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;soup = BeautifulSoup(html_doc, &quot;lxml&quot;)print soup.prettify() 这里的html的demo直接引用与官网，基础语法主要做了2件事情，第一把html加载进来，第二设定一下解析器。关于加载html文档这里直接是引用的string，可以用上篇中requests包，获取返回的html数据运用response的text或者content都可以；或者直接用open打开下载好的html也可以。 soup的对象说明BeautifulSoup将HTML文档转换成一个复杂的树形结构，每个节点都是Python对象，所有对象可以归纳为4种: Tag、NavigableString、BeautifulSoup、Comment。 Tag Tag对象：对应着XML或HTML原生文档中的tag，说白了就是标签，如果连标签都不明白，我真的没法解释了。 12345print soup.p# &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;print soup.title# &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; 每个Tag有两个重要的属性name和attrs。 Name 通过.name获取tag标签: 123p = soup.pprint p.name# p Attributes 一个tag可能会有多个属性，.tag的属性的获取方法与dict字典相同： 123456789p = soup.p# 获取print p.attrs# &#123;&apos;class&apos;: [&apos;title&apos;]&#125;# 设定setp[&apos;class&apos;] = &apos;new_title&apos;p[&apos;id&apos;] = 1print p.attrs# &#123;&apos;class&apos;: &apos;new_title&apos;, &apos;id&apos;: 1&#125; 多值属性 在HTML5中会常见的多值的属性，例如class=’1 2 3’，在Beautiful Soup中多值属性的返回类型是list: 1234567css_soup = BeautifulSoup(&apos;&lt;p class=&quot;body strikeout&quot;&gt;&lt;/p&gt;&apos;)css_soup.p[&apos;class&apos;]# [&quot;body&quot;, &quot;strikeout&quot;]css_soup = BeautifulSoup(&apos;&lt;p class=&quot;body&quot;&gt;&lt;/p&gt;&apos;)css_soup.p[&apos;class&apos;]# [&quot;body&quot;] NavigableString NavigableString对象：获取标签内部的内容，这个就比较简单了，通过.string进行获取，直接看demo： 12print p.string# The Dormouse&apos;s story BeautifulSoup BeautifulSoup对象：表示一个文档的全部内容，它支持遍历、搜索，没有name和attribute属性。 说白了，这个其实就把html作为一个soup对象了，在基础方法中的设定。 Comment Comment对象：这个对象是用来解决html文档中的注释用的，它是一个特殊类型的NavigableString对象。 在这里，直接引用了官方的demo： 1234567markup = &quot;&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;&quot;soup = BeautifulSoup(markup)comment = soup.b.stringprint comment# Hey, buddy. Want to buy a used parser?print type(comment)# &lt;class &apos;bs4.element.Comment&apos;&gt; 遍历关于遍历不进行详细讲解了，主要没咋用过，做爬虫就是数据获取、清洗，至于遍历数据，还不如直接进行搜索，感兴趣的可以在学习参考中去官方进行学习。在这里列举一下我用过并且觉得常用的方法： 子节点 通过.contents 和 .children，可以将tag的子节点以列表的方式输出。 123456789101112head_tag = soup.headprint head_tag# &lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;print head_tag.contents# [&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;]print len(head_tag.contents)# 1for child in title_tag.children: print child # &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt; 父节点 通过.parent属性来获取元素的父节点，只获取当前元素的父节点而且只寻找一次。 12345title_tag = soup.titleprint title_tag# &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;print title_tag.parent# &lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt; 通过.parents属性可以递归得到元素的所有父辈节点，一级一级的向父节点去寻找，最终寻找到根节点。 123456789link = soup.aprint line# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;for parent in link.parents: if parent is None: print parent else: print parent.name# p body html [document] None 搜索这个是重点，因为数据索取主要通过搜索来进行获取，BeautifulSoup官方文档主要介绍了find()和find_all()搜索方法，但是根据传入的参数不一样，方法又会变成多种，这里列举一些常用的搜索方法。先简单说一下find()和find_all()方法的区别：1.就是find()返回搜索查询到的第一条数据，find_all()会返回所有查询到的数据；2.find_all()返回的数据类型是class ‘bs4.element.ResultSet，find()返回的数据类型class ‘bs4.element.Tag，可知find_all()返回的是一个set集合类型。日常搜索数据中还是用find_all()比较多，下面的方法介绍我也使用find_all()进行举例。 源码方法：find_all( name , attrs , recursive , string , **kwargs ) 标签名 根据tag也就是标签名字进行搜索。 12345a = soup.find_all(&apos;a&apos;)print a# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;] 也可以根据多个标签名进行查看，具体看demo： 123456ab = soup.find_all([&quot;a&quot;, &quot;b&quot;])print ab# [&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;] attr属性 可以根据标签的内在属性进行查询，参数可以写多个，下面例子给出了多种写法。 1234link1_1 = soup.find_all(attrs=&#123;&apos;id&apos;: &apos;link1&apos;, &apos;key&apos;: &apos;value&apos;&#125;)link1_2 = soup.find_all(id=&apos;link1&apos;)print link1_1, link1_2# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;] 如果在查询数据中，属性固定可以多用此方法。 class 通过class_参数搜索有指定CSS类名的tag，class在Python中是保留字，所以使用class_，使用看demo: 12345sister_css = soup.find_all(class_=&quot;sister&quot;)print sister_css# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;] string 通过string参数可以搜搜文档中的字符串内容,与name参数的可选值一样，string参数接受字符串、正则表达式、列表、True。 12345678print soup.find_all(string=&quot;Elsie&quot;)# [u&apos;Elsie&apos;]print soup.find_all(string=[&quot;Tillie&quot;, &quot;Elsie&quot;, &quot;Lacie&quot;])# [u&apos;Elsie&apos;, u&apos;Lacie&apos;, u&apos;Tillie&apos;]print soup.find_all(string=re.compile(&quot;Dormouse&quot;))# [u&quot;The Dormouse&apos;s story&quot;, u&quot;The Dormouse&apos;s story&quot;] limit 这个参数的使用，说白了与SQL的limit用法一样，限制返回数据的条数，防止文档树很大导致搜索响应过慢。 123print soup.find_all(&quot;a&quot;, limit=2)# [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,# &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;] recursive 设置是否进行遍历子节点，调用tag的find_all()方法时，BeautifulSoup会检索当前tag的所有子孙节点，如果只想搜索tag的直接子节点，可以使用参数recursive=False。 12345print soup.html.find_all(&quot;title&quot;)# [&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;]print soup.html.find_all(&quot;title&quot;, recursive=False)# [] get_text() 方法 获取到tag中包含的所有文本内容。 1234print soup.find_all(&apos;a&apos;, string=&apos;Elsie&apos;)[0].get_text()# &apos;Elsie&apos;print soup.find_all(&apos;a&apos;, string=&apos;Elsie&apos;)[0].string# &apos;Elsie&apos; 组合式 所有的参数可以一起使用，增加过滤条件加快搜索效率，前面涉及的1～6参数都可以进行组合，写了几个简单的小demo： 12345sister_css = soup.find_all(&apos;a&apos;, class_=&quot;sister&quot;)sister_css = soup.find_all(&apos;a&apos;, class_=&quot;sister&quot;, limit=2)link1 = soup.find_all(&apos;a&apos;, attrs=&#123;&apos;id&apos;: &apos;link1&apos;&#125;)link1 = soup.find_all(&apos;a&apos;, attrs=&#123;&apos;id&apos;: &apos;link1&apos;&#125;, recursive=False)strings = soup.find_all(&apos;a&apos;, string=[&quot;Tillie&quot;, &quot;Elsie&quot;, &quot;Lacie&quot;]) 总结本篇主要讲述了BeautifulSoup的基本使用方法，感兴趣的、深入研究的请自行查看官方方法，具体的地址也在下面整理出来了。 学习参考BeautifulSoup(4.4.0)中文文档：http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/Pypi介绍：https://pypi.org/project/beautifulsoup4/BeautifulSoup(4.4.0)官方文档：https://www.crummy.com/software/BeautifulSoup/bs4/doc/]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python包</tag>
        <tag>爬虫系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[母亲节【国际节】]]></title>
    <url>%2Farticles%2F29188%2F</url>
    <content type="text"><![CDATA[国际节-母亲节 持续更新中。。。。。。 时间 地点 2019-05-12 北京]]></content>
      <categories>
        <category>节日</category>
      </categories>
      <tags>
        <tag>节日</tag>
        <tag>国际节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[北京奋斗终章:巴厘岛之旅]]></title>
    <url>%2Farticles%2F23626%2F</url>
    <content type="text"><![CDATA[密码提示：生日 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>旅行记</category>
      </categories>
      <tags>
        <tag>旅行记</tag>
        <tag>美食</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-url优化篇]]></title>
    <url>%2Farticles%2F44359%2F</url>
    <content type="text"><![CDATA[背景 曾几何时，有莫有觉得自己的博文url过于繁琐，而且博文名称包含中文，发送链接变成unicode编码，很不友好。那好，hexo-abbrlink插件解决url带来的难题。 版本信息 id name version remark 1 Hexo v3.8.0 系统版本 2 Next v7.0.1 主题版本 url格式正常的url格式默认是：:year/:month/:day/:title/，resource地址过长，如果想改变，需要在Hexo的配置去更改。打开blog/_config.yml文件，搜索permalink，更改配置如下：123# permalink: :year/:month/:day/:title/ # default版# permalink: :category/:id/ # id版# permalink: :category/:title/ # name版 category是分类，id对应的是博文默认生成的id，如果不想使用插件的同学，建议使用id版，配置好之后hexo g &amp;&amp; hexo s重启server即可。具体的url配置请查看官方说明。 到这里，已经完成了url的配置，如果不想继续优化url的同学，完成上述配置就可以了，下面将继续介绍使用插件优化url。 安装hexo-abbrlink博客项目的根目录直接执行：1npm install hexo-abbrlink --save Hexo配置还是刚才的配置文件，把permalink改成以下配置：1permalink: articles/:abbrlink/ Next配置打开Next主题配置文件：/blog/theme/next/_config.yml，新增配置如下：1234# post urlabbrlink: alg: crc32 #support crc16(default) and crc32 rep: hex #support dec(default) and hex 参数alg – Algorithm (currently support crc16 and crc32, which crc16 is default)rep – Represent (the generated link could be presented in hex or dec value)例子crc16 &amp; hexhttps://post.zz173.com/posts/66c8.htmlcrc16 &amp; dechttps://post.zz173.com/posts/65535.htmlcrc32 &amp; hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 &amp; dechttps://post.zz173.com/posts/1690090958.html hexo clean &amp;&amp; hexo g这一步是必须操作，hexo clean清除public站点文件，hexo g重新生成站点文件。生成之后，打开一个.md博文文件，你会发现，在顶部的定义部分新增了一个abbrlink属性，后面是文件的url资源路径。1abbrlink: 44359 在老的文件hexo g会自动新增这个属性，在建立新的文件也会自动新增这个属性，属性值根据上面的alg &amp;&amp; rep配置的算法规则生成。 hexo s重启服务。重启之后回到home主页，点开一个博文查看url，不出意外url已发生改变，没有改变的同学查看下2个配置文件处，是否配置对了，别搞混了，不要都配置到一个文件中。 学习Hexo permalinks：https://hexo.io/zh-cn/docs/permalinkshexo-abbrlink：https://github.com/rozbo/hexo-abbrlink]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[夏洛克·福尔摩斯]]></title>
    <url>%2Farticles%2F25456%2F</url>
    <content type="text"><![CDATA[《夏洛克·福尔摩斯》 剧情 悬疑 惊悚 简介烧脑神剧，可谓是电视剧版本的名侦探柯南，哈哈，看过《名侦探·柯南》的人，应该都是知道柯南这个名字是福尔摩斯的作者，而且柯南最喜欢的人也是福尔摩斯。 推荐指数 ⭐️⭐️⭐️⭐️⭐️ 人物角色 主角：夏洛克·福尔摩斯（Sherlock·Holmes） 主线剧情 现在已经出到共分4季，每一季又分为3集，每集大约时长1h30min，我是在优酷上看的，并不是给优酷打广告，而且优酷独播。 总结来说，福尔摩斯与好基友约翰·H·华生带你一点点揭开谜团。 观后感 烧脑逻辑思维的理性 建议 不要跳进观看，会影响观看效果，一点点观看，你会觉得非常有意思。]]></content>
      <categories>
        <category>影视说</category>
      </categories>
      <tags>
        <tag>电视剧</tag>
        <tag>烧脑剧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next分类页样式美化]]></title>
    <url>%2Farticles%2F15926%2F</url>
    <content type="text"><![CDATA[问题简述 自动生成的分类页实在是ugly，既然身为程序猿，前端不行那就自己搞，起码自己看起来舒服一些。 美化方法跟自定义样式差不多，不做详细介绍了，不知道的小伙伴可以查看之前的文章。这里主要给大家分享一下我的样式，有问题的小伙伴可以留言我，一起交流，一起学习，一起进步！！！。 css代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// 分类&amp;&amp;标签 页面样式.post-block.page &#123; margin-top: 40px;&#125;// 分类页面page.category-all-page &#123; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: #797D7F; padding: 20px 30px 60px 30px; border-radius: 25px 25px 25px 25px;&#125;.category-all-title &#123; font-family: Impact; font-size: 24px; color: aqua;&#125;.category-list &#123; overflow: auto;&#125;.category-list li &#123; height: 30px; float: left; border-right: 3px solid #222; padding: 0 20px;&#125;.category-all ul li &#123; list-style: none!important;&#125;.category-list li:last-child &#123; border-right: none;&#125;.category-list li a &#123; font-size: 16px; text-decoration: none; color: chartreuse; font-family: Helvetica, Verdana, sans-serif; // text-transform: uppercase; -webkit-transition: all 0.5s ease; -moz-transition: all 0.5s ease; -o-transition: all 0.5s ease; -ms-transition: all 0.5s ease; transition: all 0.5s ease;&#125;.category-list li a:hover &#123; color: black;&#125;.category-list li.active a &#123; font-weight: bold; color: black;&#125;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tags与categories重构的教训]]></title>
    <url>%2Farticles%2F43145%2F</url>
    <content type="text"><![CDATA[问题简述博客已经托管在github有一段时间了，有天同事想看看，url发送给同事，但是随便点开了一个文章，居然404，逗我。。。。。。why？ 启动本机上的server，找到那篇404的文章，直接把协议+ip+port替换到我本机，找到那篇资源文章，我本机可以啊，问题出在哪？仔细查看了一下2个资源地址：12本机：http://127.0.0.1:8888/Hexo/Hexo%E6%90%9C%E7%B4%A2hexo-generator-searchdb/github：https://gis90.github.io/hexo/Hexo%E6%90%9C%E7%B4%A2hexo-generator-searchdb/ 居然是Hexo与hexo资源路径的问题，立马查看本机blog/public目录的Hexo文件夹是大写，找到github托管的repositories，居然真的不一样，我记得我hexo g -d过了啊，立马又执行了1次，发现github上还是小写的hexo文件目录。 直接hexo deploy，在blog根目录会自动生成一个.deploy_git隐藏文件，这个文件目就是github托管上传用的，查看里面内容，再次确认是大写。没办法，只能删除github上现在托管的网站，又重新新建了一个deploy了一下，这下因为资源路径的导致的404问题解决了。 想起前几天我刚把每篇文章的tag、categories的内容都改成首字母大写的英文了，这是资源路径发生改变的根本，在我本地生成正确的资源路径，deploy到github是错误的，为何？还在查资料寻求原因中。 既然说到了tag &amp;&amp; categories，那么就多说点，有些博文不止一个tags、categories，记录一下它们的用法。 tag 定义：tag标签用法：12345&gt; &gt; tags:&gt; &gt; - 123&gt; &gt; - 456&gt; &gt; tags: [123, 456]&gt; &gt; 多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。 categories 定义：文章分类 用法一：12&gt; &gt; categories: 123&gt; &gt; 这是默认的写法，给文章添加一个分类。 用法二：12&gt; &gt; categories: [123, 456]&gt; &gt; 文章位于自分类下。 用法三：1234&gt; &gt; categories:&gt; &gt; - 123&gt; &gt; - 456&gt; &gt; 这会将文章分类到123/456子分类目录下。 用法四：12345&gt; &gt; categories:&gt; &gt; - [123]&gt; &gt; - [456]&gt; &gt; - [123, 789]&gt; &gt; 多标签写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。 参考：tags：https://github.com/hexojs/hexo/issues/320categories：https://github.com/MOxFIVE/hexo-theme-yelee/issues/4]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LDAP查看用户是否锁定lockoutTime]]></title>
    <url>%2Farticles%2F35151%2F</url>
    <content type="text"><![CDATA[问题描述：LDAP查看AD账号是否锁定 LDAP（Lightweight Directory Access Protocol）是轻量目录访问协议，一般都简称为LDAP。 工作上对此颇有涉及，某天在解决bug时，发现账号是否锁定与错误密码次数对不上，查看别人的代码，哈哈哈，果然有个坑，查看用户账号是否锁定是通过查询域下所有机子的错误密码次数，计算账户是否锁定，我们设置的是5次，超过这个限制账号就会被锁定。 针对账号是否锁定，居然是否次数算出来的，而不是属性获取。。。如果真的是这样，个人觉得LDAP那就太傻了。上网查了一下，果然有用户属性直接判断账号是否被锁定，那就是lockoutTime属性。没错，它也是解锁的属性。看官方解释： 最重要就是划红线的那2句话，大致意思lockoutTime的值是一个整形数值，并且等于0的时候，账号不被锁定。推理出来就是不为0，账号就会被认为锁定。 lockoutTime官方：https://ldapwiki.com/wiki/Lockouttime]]></content>
      <categories>
        <category>Python</category>
        <category>LDAP</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搜索hexo-generator-searchdb]]></title>
    <url>%2Farticles%2F21643%2F</url>
    <content type="text"><![CDATA[背景 博客运行了很久，也写了不少文章，有的时候需要回去翻自己写过的文章找点东西，比较麻烦，而且也看了别人的博客好多都有一个🔍搜索功能，针对于我使用的Hexo+Next版本也增加一个搜索功能。但是，在实现的过程中遇到了一些坑，想必也会有人跟我一样，于是写下来与大家分享。 版本信息 id name version remark 1 Hexo v3.8.0 系统版本 2 Next v7.0.1 主题版本 安装hexo-generator-searchdb博客项目的根目录直接执行：1npm install hexo-generator-searchdb --save 配置打开Next主题配置文件：/blog/theme/next/_config.yml，搜索local_search，更改代码如下：12345local_search: enable: true trigger: auto top_n_per_article: 1 unescape: false hexo g &amp;&amp; hexo s完成hexo-generator-searchdb的插件安装与配置之后，重启服务。重启之后查看blog首页sidebar多出一个🔍搜索功能，点进去查看，如果能实现搜索功能，那么恭喜你，你的功能已经没问题。 遇到问题点击搜索，我发现我的搜索modal一直在转圈圈，根本停不下来。 解决问题网上找了许久解决办法，一般都是结束安装、配置，hexosearch这篇文章提供了一个解决思路与方法，我在这里大致讲述一下： 直接访问博客地址search.xml：http://127.0.0.1:8888/search.xml 发现错误提示 打开控制台查看原因 查看提示错误提示以及console查看具体位置，具体错误的会有小红点（•••••），找到具体对应的md文章，清除特殊字符。 全部特殊字符处理完之后，重新：hexo g &amp;&amp; hexo s。 不出意外，你的🔍搜索已经可以用了，有问题可以在sidebar留言板留言共同交流分享。 学习Next local search：https://github.com/iissnan/hexo-theme-next/pull/694hexo-generator-searchdb官方：https://github.com/theme-next/hexo-generator-searchdbhexosearch：https://www.sqlsec.com/2017/12/hexosearch.html 感谢感谢Hexo、Next、以及解决我问题的博主：国光，推荐一下国光博主的博客：https://www.sqlsec.com/]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python爬虫利器之requests(上篇)]]></title>
    <url>%2Farticles%2F34296%2F</url>
    <content type="text"><![CDATA[Python包 requests 爬虫教程系列 背景 身为一位程序员，没事的时候爬爬糗百笑话、淘宝女郎、小片片。。。。。。有点邪恶了。反正关于爬虫，相信很多人都不陌生，本人没事的时候也写写爬虫的小项目，写过天气报警、糗百笑话、美女图片。。。。。。，后续会在博客中挑选个例子写出来。关于数据采集，用Python去写爬虫程序，主要涉及2个主要的Package：Requests &amp;&amp; BeautifulSoup。包名功能说明RequestsHTTP获取源数据BeautifulSoup解析 &amp;&amp; 获取目标数据关于这2个爬虫利器分为上下篇进行讲解，本篇先介绍Requests，主要功能是进行数据的获取。 简介官方原话：1234The requests library is the de facto standard for making HTTP requests in Python.It abstracts the complexities of making requests behind a beautiful,simple API so that you can focus on interacting with services andconsuming data in your application. 简要内容：Requests是一个很实用的Python HTTP客户端库，主要用于API请求。 安装1pip install requests 如果不指定版本，会自动安装最新的版本，有不熟悉pip的请自行进行恶补。 源码说明12345678910111213141516171819202122232425262728293031def request(method, url, **kwargs): &quot;&quot;&quot;Constructs and sends a :class:`Request &lt;Request&gt;`. :param method: method for the new :class:`Request` object. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`. :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`. :param json: (optional) json data to send in the body of the :class:`Request`. :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`. :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`. :param files: (optional) Dictionary of ``&apos;name&apos;: file-like-objects`` (or ``&#123;&apos;name&apos;: (&apos;filename&apos;, fileobj)&#125;``) for multipart encoding upload. :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How long to wait for the server to send data before giving up, as a float, or a (`connect timeout, read timeout &lt;user/advanced.html#timeouts&gt;`_) tuple. :type timeout: float or tuple :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy. :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided. :param stream: (optional) if ``False``, the response content will be immediately downloaded. :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, (&apos;cert&apos;, &apos;key&apos;) pair. :return: :class:`Response &lt;Response&gt;` object :rtype: requests.Response Usage:: &gt;&gt;&gt; import requests &gt;&gt;&gt; req = requests.request(&apos;GET&apos;, &apos;http://httpbin.org/get&apos;) &lt;Response [200]&gt; &quot;&quot;&quot; 以上代码是Requests包中运用方法的核心，写代码多看看源码，提高代码的质量，很重要。上面的方法是关于HTTP请求的核心方法，挑重点说，方法的参数很多。其中method代表HTTP请求的方式，GET、POST等等；url代表请求的地址；kwargs代表不限参数，但是在注释中罗列了一些重要的参数，查看以你发现，其中这些参数都是关于HTTP协议用到的数据。参数的具体请自动查看源码，下面也会针对于常用的参数进行demo举例。 使用教程HTTP协议请求方式主要有：GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE和CONNECT方法。虽然方法很多，但是工作中常用的只有GET与POST。本人主要对Requests进行介绍，关于HTTP协议的相关知识这个不做过多讲解。 无参 12345678910import requestsurl = &quot;https://gis90.github.io/&quot;# GETresponse = requests.get(url)# POSTresponse = requests.post(url) 最简单的HTTP请求。 有参 123456789101112import jsonimport requestsurl = &quot;https://gis90.github.io/&quot;payload = &#123;&quot;key&quot;: &quot;value&quot;&#125;# GETresponse = requests.get(url=url, params=payload)# POSTresponse = requests.post(url=url, data=payload) GET方法的params参数实际就是url中的参数，使用GET方法可以把参数直接封装在url中，也可以把参数封装起来传递到request方法中。 POST方式的参数就是form表单提交的参数。 json数据 123456789101112import jsonimport requests# headers中添加上content-type这个参数，指定为json格式headers = &#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;# post的时候，将data字典形式的参数用json包转换成json格式。payload = &#123;&quot;key&quot;: &quot;value&quot;&#125;payload = json.dumps(payload)url = &quot;https://gis90.github.io/&quot;# POSTresponse = requests.post(url=url, headers=headers, data=payload) POST可传递json数据，需要在headers里指定数据的类型。 文件 123456import requestsfiles = &#123;&apos;file&apos;: open(&apos;report.xls&apos;, &apos;rb&apos;)&#125;url = &quot;https://gis90.github.io/&quot;r = requests.post(url, files=files) 把文件读取到内存中，在以流的形式传递出去。 请求头 1234567891011121314151617import jsonimport requestsurl = &quot;https://gis90.github.io/&quot;payload = &#123;&quot;key&quot;: &quot;value&quot;&#125;headers = &#123;&quot;user-agent&quot;: &quot;my-app/0.0.1&quot;&#125;# GETresponse = requests.get(url=url, params=payload, headers=headers)# POSTresponse = requests.post(url=url, data=json.dumps(payload) headers=headers) 所有的header值必须是string、bytestring或者unicode。 Cookie 1234567891011121314import requestsurl = &quot;https://gis90.github.io/&quot;# 第一种cookies_1 = dict(key_1=&apos;value_1&apos;)response = requests.get(url, cookies=cookies_1)# 第二种cookies_2 = requests.cookies.RequestsCookieJar()cookies_2 = jar.set(&apos;key_2&apos;, &apos;value_2&apos;, domain=url, path=&apos;/cookies&apos;)r = requests.get(url, cookies=cookies_2)# 查看cookies信息以及类型print response.cookies, type(response.cookies) demo中给出了2种set cookies的方式，用第一种的较多，其中输出的cookies是一个requests.cookies.RequestsCookieJar对象。 timeout 12345import requestsurl = &quot;https://gis90.github.io/&quot;response = requests.get(url, timeout=5) 请求时间，可选参数。以设定参数timeout秒数时间之后停止等待响应，超过这个实际会停止对服务端的请求，如果是一般的restful api接口也就是几百毫秒的响应时间，如果是大数据量可以设置长一点，默认是无限制。 建议最好，设定一个值，这样请求timeout之后，也会报异常，对异常进行捕捉可以对方法进行监控报警，知道程序是否出现异常状况，时间根据对方的接口而定，建议60 ～ 120，单位：秒。 allow_redirects 12345import requestsurl = &quot;https://gis90.github.io/&quot;response = requests.get(url, allow_redirects=False) 参数之一，允许请求重定向，默认值是True，所以这个参数只有有不允许重定向需求的时候采用得到。 HTTP重定向：服务器无法处理本次发送过来的request请求，服务器会返回一个新的url让客户端可以进行跳转，客户端会自动访问该url地址，但是在客户端是无法分辨是否重定向了， 重定向的状态码是3XX，关于状态码下面有粗略的介绍。 RESPONSE 123456789101112131415161718192021222324import requestsdata = &#123;&apos;key&apos;: &apos;value&apos;&#125;response = requests.get(url=&apos;https://gis90.github.io/&apos;, data=data)# 请求地址print response.url# 响应状态码print response.status_code# 响应头print response.headers# 文本编码print response.encoding# 字符串格式响应内容print response.text# 二进制格式响应内容print response.content# json格式响应内容print response.json()# 原始套接字响应内容print response.raw# cookie信息print response.cookies 总结一下需要说明得点。 状态码 类型 描述 1** 信息，服务器收到请求，需要请求者继续执行操作 2** 成功，操作被成功接收并处理 3** 重定向，需要进一步的操作以完成请求 4** 客户端错误，请求包含语法错误或无法完成请求 5** 服务器错误，服务器在处理请求的过程中发生了错误 响应头 返回来的headers是一个requests.structures.CaseInsensitiveDict对象，但是直接可以用dict字典的方式进行数据获取。 text与content text与content都是返回网页的内容，唯一的区别：content是字节码，而text的内容编码是字符串。 cookies cookies在上面有详细说明。 学习参考Requests官方：https://realpython.com/python-requests/快速上手（中文版）：https://cn.python-requests.org/zh_CN/latest/user/quickstart.html快速上手（高阶版）：https://cn.python-requests.org//zh_CN/latest/ 特别技巧 Postman工具，相信做开发没有几个人不知道，它的最大用处就是用来实现各种HTTP请求。今天在这里教大家一个技巧，如果使用requests包去模拟HTTP请求失败的话，就用Postman工具去请求，毕竟是可视化的工具，参数、cookies、headers等等比较好设置，只要在Postman上成功实现了请求，使用下图的功能，就可以查看关于请求的相关代码，很方便。Postman下载地址：https://www.getpostman.com/]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python包</tag>
        <tag>爬虫系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019-06北京美食计划]]></title>
    <url>%2Farticles%2F13876%2F</url>
    <content type="text"><![CDATA[带上媳妇向北京美食进军PyGo²旅行记 美食 北京打卡 2014年到北京，不知不觉已经度过5个夏天了，6、7月是我在北京奋斗的最后2个月，带上我媳妇向北京美食进军-&gt; 必吃 日期 城市 主题 名称 位置 推荐指数 备注 2019-06-15~16 北京 自助餐 第六季 海淀区-紫竹桥 🌟🌟🌟🌟🌟 美团推荐，帝都第一性价比最高的自助餐厅 2019-06-22~23 天津 海鲜 三个渔夫 天津市-小白楼 🌟🌟🌟🌟 海鲜美味 2019-06-29~30 北京 特色：烤鸭 全聚德 朝阳区-朝阳北路 🌟🌟🌟🌟🌟 北京传统特色 参考 主题 名称 位置 推荐指数 备注 中关村食宝街 小吃 北京-海淀区-中关村-新中关购物大厦 🌟🌟🌟🌟 食宝街各种特色小吃与各种主题餐厅 牛羊肉 牛街 北京-广安门内大街 🌟🌟🌟🌟 清真牛羊肉美食、小吃绝对正宗，特别推荐一下麻豆腐 小龙虾 麻辣诱惑 北京-西单-君太百货 🌟🌟🌟🌟 小龙虾做的确实棒 日料 大渔铁板烧 北京-海淀区-中关村 🌟🌟🌟 美团推荐人气第一(自助245)、6店通用 日料 德川家日本料理（中关村店） 北京-海淀区-中关村 🌟🌟🌟 美团推荐人气第二(自助196)、11店通用 个人观点 网上很多人推荐护国寺、南锣鼓巷、王府井等，本人去吃过味道没那么好吃，纯属到北京旅游慕名而去，不推荐，但是护国寺、南锣鼓巷小吃价格方面还是很适合大众的。但是想见识一下北京老的胡同、四合院可以去南锣鼓巷看下，确实很不错。]]></content>
      <categories>
        <category>旅行记</category>
      </categories>
      <tags>
        <tag>旅行记</tag>
        <tag>美食</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的英雄学院]]></title>
    <url>%2Farticles%2F16168%2F</url>
    <content type="text"><![CDATA[《我的英雄学院》 动漫 励志 成长 热血 简介喜欢《火影忍者》、《海贼王》等热血动漫的你，这个也是你的菜。 推荐指数 ⭐️⭐️⭐️⭐️⭐️ 人物角色 主角：绿谷出久 主线剧情 动画版共分3季。 第一季主角是一位没有”个性”的人【个性：说白了就是超能力】，机缘巧合相遇英雄欧尔麦特【最强王者】，获得One For All 的力量，命运从此发生改变。少年通过自己的努力，获取英雄高校雄英高校英雄科资格。 第二季主角成功进入了雄英高中入学，与英雄科1年A班的同学们一起在互相学习并进步。在这种情况下，主角在“体育祭”活动中崭露头角。 第三季观看中 观后感 热血的青春]]></content>
      <categories>
        <category>影视说</category>
      </categories>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next添加TagCloud]]></title>
    <url>%2Farticles%2F43239%2F</url>
    <content type="text"><![CDATA[背景 偶然机会在一篇博客上发现TagCloud（启明博客忘记了），效果觉得不错，如上图，而且点击tag直接跳转到对应tag的文章列表，决定在自己的博客中也加上TagClooud。 版本 id name version remark 1 Hexo v3.8.0 系统版本 2 NextT.Pisces v7.0.1 主题版本 正文实现TagCloud主要用到了hexo-tag-cloud插件，下面详细介绍一下实现过程。 安装hexo-tag-cloud在blog根目录，执行以下命令：1npm install hexo-tag-cloud --save 执行完之后，在根目录的package.json文件中会自动加入安装的插件以及对应版本。 sidebar.swig文件修改 找到blog/theme/next/layout/_custom/sidebar.swig文件，添加下列代码到文件中。123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;widget-wrap&quot;&gt; &lt;h4 class=&quot;widget-title&quot; style=&quot;font-size:20px;text-align:center;color:#0080FF;margin:20px 0 0px;&quot;&gt;Tag Cloud&lt;/h4&gt; &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot; style=&quot;font-size:20px;&quot;&gt; &lt;canvas width=&quot;220&quot; height=&quot;200&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 也可以自定义Tag Cloud标题，加入自定义的样式。 重启server 执行完1、2步之后，需要重启服务，刷新主页，在sidebar处就会看见TagCloud。12hexo ghexo s Next配置文件 在Next主题的_config.yml中，搜索tagcloud，发现一下代码：1234567891011# TagCloud settings for tags page.tagcloud: # If true, font size, font color and amount of tags can be customized enable: true # All values below are same as default, change them by yourself min: 12 # min font size in px max: 36 # max font size in px start: &quot;#ccc&quot; # start color (hex, rgba, hsla or color keywords) end: &quot;#111&quot; # end color (hex, rgba, hsla or color keywords) amount: 80 # amount of tags, chage it if you have more than 200 tags 看配置信息是TagCloud的相关配置信息，但是配置了之后，我发现TagCloud没有做出相应的变化。然而你打开自己的tags标签页，就会发现配置的在这里生效了。 样式生成tag cloud之后，样式比较难看，但是在custome.styl文件加入自定义的样式，不生效。。。。。。郁闷，于是查看源码。tagcloud.js：blog/node_modules/hexo-tag-cloud/lib/tagcloud.jstagcanvas.js：blog/node_modules/hexo-tag-cloud/lib/tagcanvas.js查看tagcloud.js文件，里面有需要的样式参数，修改参数重启服务即可。我的自定义样式如下：1234567891011121314151617181920212223242526272829window.onload = function() &#123; try &#123; TagCanvas.textFont = &apos;Brush Script MT&apos;; TagCanvas.textColour = &apos;black&apos;; TagCanvas.textHeight = 16; TagCanvas.outlineMethod = &apos;block&apos;; TagCanvas.outlineColour = &apos;cornflowerblue&apos;; TagCanvas.maxSpeed = 0.03; TagCanvas.minBrightness = 0.2; TagCanvas.depth = 0.92; TagCanvas.pulsateTo = 0.6; TagCanvas.initial = [0.1,-0.1]; TagCanvas.decel = 0.98; TagCanvas.reverse = true; TagCanvas.hideTags = false; TagCanvas.shadow = &apos;#ccf&apos;; TagCanvas.shadowBlur = 3; TagCanvas.weight = false; TagCanvas.imageScale = null; TagCanvas.fadeIn = 1000; TagCanvas.clickToFront = 600; TagCanvas.Start(&apos;resCanvas&apos;); TagCanvas.tc[&apos;resCanvas&apos;].Wheel(false) &#125; catch(e) &#123; // console.log(e); document.getElementById(&apos;myCanvasContainer&apos;).style.display = &apos;none&apos;; &#125;&#125;; console.log我给注释掉了，这样控制台就看不到了。 记住，要重启服务。 学习hexo-tag-cloud官方：https://github.com/MikeCoder/hexo-tag-cloud]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next搜索优化（二）博客优化]]></title>
    <url>%2Farticles%2F62177%2F</url>
    <content type="text"><![CDATA[Hexo SEO优化系列 博客优化 背景 前几天写了一篇关于博客在google搜索引擎上的优化，发现通过gis90 + 标题，还是可以搜出来的，但是直接通过标题去🔍搜索，还是搜不到什么东西，还得继续优化啊。 上网继续查资料，整理到一起。 正文本文总结了主要从文章的关键字、url、配置等方面进行优化，提高搜索度。 关键字 打开每一篇博客，增加keywords、desc，增加文章的搜索匹配，代码如下：12345678910111213---title: Hexo+Next搜索优化（二）博客优化comments: falsecategories: - [seo优化] - [Hexo]tags: [Hexo, seo优化]top: falsedate: 2019-04-27 19:44:22updated: 2019-04-27 19:44:22desc: Hexo+Next搜索优化（二）博客优化keywords: hexo, seo, google, 搜索--- 附加可以打开blog/scaffolds/post.md文件，修改代码如下，一劳永逸。123456789101112—title: Hexo+Next搜索优化（二）博客优化desc:date: 1552823062000updated: 1552823062000comments: falsecategories: - []tags: []keywords:top: false—不要用description，会报错，可能是版本问题，我用的是Hexo（v3.8.0）+ Next（v7.0.1）。 URL 打开Hexo的配置文件：blog/_config.yml，搜索permalink，更改代码如下：12# permalink: :year/:month/:day/:title/permalink: :category/:title/ 解释不更新配置之前，文章的默认链接一个四级url，形式是:year/:month/:day/:title/，而且title会导致url过长，用:category/:title/代替原配置，url的资源只有2级，对于搜索引擎会更加有好一些。 Hexo配置 打开Hexo的配置文件：blog/_config.yml，搜索subtitle，补全站点的基本信息配置。1234title: #标题subtitle: #子标题description: #描述url: #url Next配置 打开Next的配置文件：blog/themes/next/_config.yml，搜索SEO Settings，更改配置如下：1234canonical: trueseo: trueindex_with_subtitle: falsebaidu_push: true 具体的对应什么含义，自行查看配置文件解释。 特别说明：index_with_subtitle在站点index所有页，是否显示Hexo站点设置的副标题，我觉得没什么作用，还影响样式，这个在我的配置中设置了false 首页标题优化Title 打开Next的指定文件：blog/themes/next/layout/index.swig，更改如下：1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; 改成1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; config.keywords &#125;&#125; - &#123;&#123; config.description &#125;&#125; &#123;% endblock %&#125; 解释首页将文章的关键字、以及描述，增大搜索字的匹配率，这个只针对于首页，记住是首页、首页、首页。 每篇博文title、keywords、desc 打开Next的指定文件：blog/themes/next/layout/_partials/head/head.swig，添加一下如下：123456789101112131415&lt;!-- title、keywords、desc关键字 --&gt;&#123;% if page.title %&#125; &lt;title&gt;&#123;&#123; page.title &#125;&#125;&lt;/title&gt; &lt;meta name=&quot;title&quot; content=&quot;&#123;&#123; page.title &#125;&#125;&quot; /&gt;&#123;% endif %&#125;&#123;% if page.keywords %&#125; &lt;meta name=&quot;keywords&quot; content=&quot;&#123;&#123; page.keywords &#125;&#125;&quot; /&gt;&#123;% elif page.tags and page.tags.length %&#125; &lt;meta name=&quot;keywords&quot; content=&quot;&#123;% for tag in page.tags %&#125;&#123;&#123; tag.name &#125;&#125;,&#123;% endfor %&#125;&quot; /&gt;&#123;% elif theme.keywords %&#125; &lt;meta name=&quot;keywords&quot; content=&quot;&#123;&#123; theme.keywords &#125;&#125;&quot; /&gt;&#123;% endif %&#125;&#123;% if page.desc %&#125; &lt;meta name=&quot;description&quot; content=&quot;&#123;&#123; page.desc &#125;&#125;&quot; /&gt;&#123;% endif %&#125; 解释将增加每篇博文设置的title、keywords、desc，SEO优化重点之一，增大搜索字的匹配率。 添加robot.txt 在blog/public目录新建一个文件robot.txt，进行配置一下内容：123456789101112131415161718User-agent: *Allow: /Allow: /articles/Allow: /archives/Allow: /categories/Allow: /tags/Allow: /messagepad/Allow: /resources/Allow: /about/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://gis90.github.io/sitemap.xmlSitemap: https://gis90.github.io/baidusitemap.xml 写上你常用的遍历url、以及sitemap地址。 图片压缩 在博客中关于使用的图片，几乎都进行压缩处理，我使用的是在线压缩：https://www.yasuotu.com/。 文件压缩 使用gulp进行文件压缩，本人是搞后端的，参考别人seo优化的时候，也是看了一下glup的用法，记住：glup用来处理静态资源的一个工具。 下面介绍一下具体的实现方法： 安装glue 1234npm install gulp@3.9.1 -gnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --savenpm install gulp-concatnpm install gulp-imagemin 在blog文件夹下创建gulpfile.js，加入一下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);var imagemin = require(&apos;gulp-imagemin&apos;);// 压缩htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/article/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss(&#123; compatibility: &apos;ie8&apos; &#125;)) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src([&apos;./public/js/**/.js&apos;,&apos;!./public/js/**/*min.js&apos;]) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩图片gulp.task(&apos;minify-images&apos;, function() &#123; return gulp.src(&apos;./public/images/*.*&apos;) .pipe(imagemin( [imagemin.gifsicle(&#123;&apos;optimizationLevel&apos;: 3&#125;), imagemin.jpegtran(&#123;&apos;progressive&apos;: true&#125;), imagemin.optipng(&#123;&apos;optimizationLevel&apos;: 7&#125;), imagemin.svgo()], &#123;&apos;verbose&apos;: true&#125;)) .pipe(gulp.dest(&apos;./public/images&apos;))&#125;);// 默认任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;]); 运行命令 1glue 在控制台会看见压缩的过程，整个压缩过程在图片压缩处理起来有点慢，耐心等待。 学习在优化过程中，参考了一些人的博客以及官方文档，感谢各位大神。 参考一：https://github.com/theme-next/hexo-theme-next/issues/866参考二：https://hjptriplebee.github.io/hexo%E7%9A%84SEO%E6%96%B9%E6%B3%95.html/参考三：https://www.greateman.top/Next%E4%B8%BB%E9%A2%98SEO%E4%BC%98%E5%8C%96.html参考四：http://www.ehcoo.com/seo.htmlglup：https://www.jianshu.com/p/87a773a81dbd 疑问针对于Next主题的配置文件选项：index_with_subtitle，配置文件的解释： If true, will add site-subtitle to index page, added in main hexo config。如果文章没有subtitle，那么这个配置是不是就无用了。 拓展看了几个人的博客发现在改Title方面参数不一致，也搞不懂应该参考哪个，于是自己把参数每个试了一次，参数如下：12345678&#123;&#123; title &#125;&#125;&#123;&#123; keywords &#125;&#125;&#123;&#123; desc &#125;&#125;&#123;&#123; description &#125;&#125;&#123;&#123; theme.keywords &#125;&#125; # 可用&#123;&#123; config.title &#125;&#125; # 可用&#123;&#123; theme.description &#125;&#125; # 可用 很简单，其实就是把这些参数写在一个博文md文件里面，在生成的html页面有哪些是有值的，这是我的测试方法，结果可想而知，如有不对，欢迎留言进行交流。]]></content>
      <categories>
        <category>Hexo</category>
        <category>seo优化</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>seo优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next搜索优化（一）google搜索]]></title>
    <url>%2Farticles%2F42646%2F</url>
    <content type="text"><![CDATA[Hexo SEO优化系列 google 背景 博客发布有一段时间了，而且也通过github提供的便利发布到公网上，但是除了直接域名访问，本人没有花钱买域名，只用了一个github免费提供的一个，在google居然搜索不到，只能优化一下网站在google的SEO。 正文本文讲解实现对google对网站的搜索优化，Hexo+Next搜索优化教程第一篇。 安装hexo-generator-sitemap在blog根目录，执行一下命令： 1npm install hexo-generator-sitemap --save 生成sitemap.xml文件 第一：找到blog配置文件：blog/_config.yml，搜索url，把地址改成自己的网站地址。 1url: https://gis90.github.io 第二：把下列代码追加到打开的配置文件末尾。 12sitemap: path: sitemap.xml 第三：hexo g重新生成文件，在blog/public目录下会生成一个sitemap.xml文件。 添加蜘蛛协议在blog/source目录下新建一个robots.txt文件，内容如下：12345678910111213141516User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/Allow: /messagepad/Allow: /resources/Allow: /about/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://gis90.github.io/sitemap.xml 解释一下：Allow字段的值即为允许搜索引擎爬区的内容，可以对应到主题配置文件中的目录配置，如果菜单栏还有其他选项都可以按照格式自行添加；Disallow就是不允许搜索引擎爬区的内容，可以把网站相关的一些js、等资源写入。 更新github.io把新生成的sitemap.xml&amp;&amp;robots.txt上传到github。 1hexo g -d google站点管理 旧版：打开Search Console：旧版首页，添加属性。 添加资源Search Console出新的版本了，在使用过程中，一直提示转到新版，那就用新版进行讲解，点击页面上的使用新版Search Console。新版不知道怎么添加地址的请查看下列图片，在左上角搜索资源-&gt;添加资源。 选择资源 站点验证进入站点验证，我在这里验证了2种方式：HTML文件&amp;&amp;HTML标记，怎么验证官方都有说明，按照说明做即可，我这里进行简述一下。 方式一打开文件：blog/themes/hexo-theme-next/layout/_partials/head/head.swig，添加代码到文件第二行，方便进行加载： 12&lt;meta charset=&quot;UTF-8&quot;/&gt;&lt;meta name=&quot;google-site-verification&quot; content=&quot;nOQH_Lr6zdiXCxCLRslnRmrnULAd7XsMJc-3MQo0iMI&quot; /&gt; 方式二下载googole验证文件：google6377d5ca65812ad1.html，把文件放到blog/public目录下。完成上述操作之后，执行hexo g -d，把验证部门上传到github，密钥与密钥文件都是本人网站的，替换google提供的密钥即可。 robots测试（旧版）在新版Search Console中没有发现robots.txt测试工具功能，只能切换到老版，在新版的左下角有个转到旧版功能，点击抓取-&gt;robots.txt测试工具。在下面可以输入自己网站的一些网址地址，看是否可以测试通过。 新版中没了此功能，也许就是不需要此步验证，新版Search Console也在研究中，有问题的可以留言给我一起交流。 提交站点地图 测试sitemap.xml地址访问：https://gis90.github.io/sitemap.xml测试sitemap.xml可被访问到。 Search Console提交点击左侧站点地图，在空白处输入sitemap.xml，点击提交，如果有错误去fix就好，不过一般情况下是不会出错的，我的有error是因为我的有一个博文不知道为何在updated: 22019-03-24 20:44:08，时间上出现了问题，导致有问题。 等待结果点击概述/效果等功能，提示正在处理数据，请过几天再来查看，现在能做的只是等待结果出来在进行下一步的优化了。 更新结果 这里展示了近3个月的结果： 访问量 覆盖率 地区 相关链接search console：https://www.google.com/webmasters/tools/home?hl=zh-CN网站所有权验证：https://support.google.com/webmasters/answer/9008080]]></content>
      <categories>
        <category>Hexo</category>
        <category>seo优化</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo插件</tag>
        <tag>seo优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo拓展-插件篇]]></title>
    <url>%2Farticles%2F36954%2F</url>
    <content type="text"><![CDATA[持续更新中～～～ 简介 网站安装了许多插件，hexo-symbols-count-time、hexo-tag-cloud、hexo-helper-live2d等等，不止给站点增加了很多强大的功能以及给博文美化方面添加了不少样式、便利，我也一一记录下了常用的插件并写成文章发表。但是去Hexo官方，看了一下插件，居然有290多个，也不能想Next主题内置的tags功能一样，每个都去尝试一下，起码把自己尝试的记录下来，与大家一起进行分享。 正文 hexo-tag-echarts 作用 集成echart到博客中，用于数据展示，非常好用。 示例 代码 123456789101112131415161718192021222324252627282930313233343536373839&#123;% echarts 400 &apos;85%&apos; %&#125;&#123; color: [&apos;#F39C12&apos;], tooltip : &#123; trigger: &apos;axis&apos;, axisPointer : &#123; // 坐标轴指示器，坐标轴触发有效 type : &apos;shadow&apos; // 默认为直线，可选为：&apos;line&apos; | &apos;shadow&apos; &#125; &#125;, grid: &#123; left: &apos;3%&apos;, right: &apos;4%&apos;, bottom: &apos;3%&apos;, containLabel: true &#125;, xAxis : [ &#123; type : &apos;category&apos;, data : [&apos;Python&apos;,&apos;Linux&apos;,&apos;Hexo&apos;,&apos;LDAP&apos;,&apos;娱乐&apos;,&apos;影视说&apos;,&apos;旅行记&apos;,&apos;其他&apos;], axisTick: &#123; alignWithLabel: true &#125; &#125; ], yAxis : [ &#123; type : &apos;value&apos; &#125; ], series : [ &#123; name:&apos;直接访问&apos;, type:&apos;bar&apos;, barWidth: &apos;60%&apos;, data: [9, 2, 17, 2, 3, 2, 2, 5] &#125; ]&#125;;&#123;% endecharts %&#125; 补充hexo-tag-echarts安装hexo-tag-echarts说明hexo-tag-echarts资料1npm install hexo-tag-echarts3 –save1 || 展示的数据需要自己进行计算。2 || echarts-endecharts 需要2个参数：容器高度、相对宽度。3 || 这个插件的js有点问题，需要加些代码到文件：node_modules/hexo-tag-echarts/echarts-template.html，具体请查看官方手册。hexo-tag-echarts3：https://github.com/kchen0x/hexo-tag-echarts3echart：https://echarts.baidu.com/examples/ hexo-admin 作用 hexo站点的后台管理。 示例 部署 安装插件 1npm install --save hexo-admin 启动服务 1hexo s 生成密码打开http://127.0.0.1:8888/admin/，找到setting菜单栏，找到Setup authentification here，点击-&gt;输入用户名、密码、密钥，在最下面有生成的配置信息。 配置打开blog/_config.yml文件，把上面生成的信息新增到配置文件最后。 12345# admin后台user、passwordadmin: username: pygo password_hash: $2a$10$h6ZFY9yMv.wIhd0aPQ/O4eB3k/zFiBj3aH0Zou8T9QK/H8e/Y/hUO secret: wuyananismywife 补充hexo-admin说明hexo-admin资料1 || 切记是Hexo站点配置文件。https://github.com/jaredly/hexo-admin hexo-blog-encrypt 作用 文章加密。 示例 部署 安装插件 1npm install --save hexo-blog-encrypt Hexo配置打开Hexo站点配置文件：blog/_config.yml，新增配置： 123# 文章加密功能encrypt: enable: true 文章配置打开一篇需要进行加密的.md文件，在顶部描述加入以下代码： 123password: 0803abstract: &lt;div class=&quot;article_encrypt_abstract&quot;&gt;暂不公开，请勿打扰 ～&lt;font size=&quot;5&quot; color=&quot;red&quot;&gt;【状态：加密】&lt;/font&gt;&lt;/div&gt;message: 密码提示：生日 password：博客密码 abstract：home主页显示的文字提示 message：查看博客，密码输入框上面的描述性文字 启动服务 1hexo s 补充hexo-blog-encrypt说明hexo-blog-encrypt资料1 || 切记是Hexo站点配置文件。https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md自定义样式关于加密的abstract &amp;&amp; message样式比较难看，本人自定义了的样式，参考如下：12345678910111213// 加密abstract样式.article_encrypt_abstract &#123; text-align: center; color: #FFBE3D; font-size: 28px; -webkit-text-stroke: 1.2px #000000;&#125;// 加密message样式.hbe-input-container label &#123; color: deeppink!important; font-size: 32px!important; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;&#125;自定义样式文件：blog/themes/next/source/css/_custom/custom.styl]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[权力的游戏]]></title>
    <url>%2Farticles%2F18454%2F</url>
    <content type="text"><![CDATA[《权力的游戏》 剧情 奇幻 史诗 战争 简介《权力的游戏》（Game of Thrones），是美国HBO电视网制作推出的一部中世纪史诗奇幻题材的电视剧。已上映共7季，第8季终章预计在今年2019年4月推出，很期待。 推荐指数 ⭐️⭐️⭐️⭐️⭐️ 人物角色 男主：琼恩·雪诺女主：丹尼莉丝·坦格利安（龙妈）男二-小恶魔：提利昂·兰尼斯特女二-小恶魔姐姐：瑟曦·兰尼斯特·拜拉席恩女二-小恶魔哥哥：詹姆·兰尼斯特女二-男主姐姐：珊莎·史塔克女二-男主妹妹：艾莉亚·史塔克男二-男主弟弟：布尼·史塔克 主线剧情 本篇核心内容如大片名称一样，主要讲述七大国权力之间的争斗，按我的理解，剧中主要有2大主线。 男主对抗异鬼男主出生在史塔克家族（北境之王），是一位私生子（未婚先出生的孩子）。年年轻轻就到北境边界长城守护七大国的安全，免受野人与异鬼的侵袭。同时，史塔克家族遭遇衰败。这条主线主要讲述男主、男主姐姐、男主弟弟、男主妹妹各自的成长，最终走到一起对抗异鬼（可以理解成boss）以及复兴家族崛起的线路。 女主统治七国女主是前任国王的子嗣，踏上复兴坦格利安家族的重任。现任国家由小恶魔兰尼斯特家族所统治，民不聊生。机缘巧合，女主获得3条龙（那个年代龙已经绝技），被称为龙妈。龙妈、小恶魔以及手下猛将与小恶魔哥哥、小恶魔姐姐对抗的故事。 最终的男主、女主以及小恶魔姐姐暂时放下眼前的争斗，联手对抗异鬼。第8季还没出，但是依据故事情节推断，就是人类展示异鬼，以及男主、女主联合与战胜小恶魔姐姐取得胜利。 观后感 政治的黑暗以及人真正的本性！！！]]></content>
      <categories>
        <category>影视说</category>
      </categories>
      <tags>
        <tag>电视剧</tag>
        <tag>美国大片</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章置顶]]></title>
    <url>%2Farticles%2F18391%2F</url>
    <content type="text"><![CDATA[背景 博文添加文章置顶功能 写了很多博客，总有几篇是自己想要指定的文章，上线找了很多发现都是老方法（安装hexo-generator-index），但是发现不管用，一般都是版本太老的原因。于是开始搜索新的插件，找到了hexo-generator-index-pin-top这个插件。 正文只要3步就可以让博文置顶，不多说，直接搞： 第一步：安装插件 在blog的根目录，执行如下命令，如果安装hexo-generator-index，请先进行卸载。12npm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save 第二步：博文top置顶 找到需要置顶的文章，在文件顶部加上top: true即可，来个栗子：1234567891011---title: Hexo文章置顶comments: falsedate: 2019-04-13 14:49:25updated: 2019-04-13 14:49:25desc: Hexo文章添加置顶功能categories: [hexo]tags: [hexo]top: true--- 第三步：图标 实现1、2步之后，重新启动server之后，发现文章已经置顶了，但是没有图标是不是很尴尬。别怕，找到下面的文件，搜索标签，并把代码加进去。文件：/blog/themes/next/layout/_macro/post.swig12345&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumbs-up&quot;&gt;&lt;/i&gt; &lt;font color=&quot;red&quot;&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125; 图标不好看的也可以自己进行更改，替换fa-thumb-tack即可，还可以把图标的颜色进行更改。hexo s重新启动server查看效果吧。图标选取地址：自选图标 结束到这里就完成博文置顶的效果，尝试之后，是不是so easy。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next博客写作手札]]></title>
    <url>%2Farticles%2F28748%2F</url>
    <content type="text"><![CDATA[简介记录一些Hexo、Next常用文件的一些信息 自定义样式文件作用位置记录博客自定义的样式，以class方式进行css样式编写。blog/themes/next/source/css/_custom/custom.styl 自定义html代码作用位置建议引入自动html的相关代码，标签、css、script都可以在这里编写。blog/themes/next/layout/_custom/custom.swig虽然这个文件可以引入自定义的html代码，但是建议把标签、css、js代码分开来写。html：写在对应的模块swig文件。css：写在上面的自定义样式文件。js：blog/themes/next/source/js/src目录下创建新js文件，在blog/themes/next/layout/_layout.swig文件中进行引用。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo添加鼠标点击效果]]></title>
    <url>%2Farticles%2F37795%2F</url>
    <content type="text"><![CDATA[博文中鼠标点击出现❤️&amp;&amp;文字特效，持续更新中～～～ 特效比较简单，只需要写好js特效文件加载就OK了。 红心 /themes/next/source/js/src目录下新建文件click_love.js，代码如下：1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 文字 /themes/next/source/js/src目录下新建文件click_magic.js，代码如下：1234567891011121314151617181920212223242526272829/* 鼠标特效 */var a_idx = 0;jQuery(document).ready(function($) &#123; $(&quot;body&quot;).click(function(e) &#123; var a = new Array(&quot;Python&quot;, &quot;Java&quot;, &quot;Go&quot;, &quot;C&quot;, &quot;C++&quot;, &quot;C#&quot;, &quot;JavaScript&quot; , &quot;Php&quot;, &quot;Sql&quot;, &quot;R&quot;); var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css(&#123; &quot;z-index&quot;: 9999, &quot;top&quot;: y - 20, &quot;left&quot;: x, &quot;position&quot;: &quot;absolute&quot;, &quot;font-weight&quot;: &quot;bold&quot;, &quot;color&quot;: &quot;#ff6651&quot; &#125;); $(&quot;body&quot;).append($i); $i.animate(&#123; &quot;top&quot;: y - 180, &quot;opacity&quot;: 0 &#125;, 1500, function() &#123; $i.remove(); &#125;); &#125;);&#125;); 建立好js文件之后，打开文件/themes/next/layout/_layout.swig，搜索，加入代码：12&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/click_love.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/click_magic.js&quot;&gt;&lt;/script&gt; 完成上述操作hexo g &amp;&amp; hexo s就可以看到效果啦，如果只要一种特效，保留一个js文件即可。 鼠标点击特效持续更新中。。。。。。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化-内置tags篇]]></title>
    <url>%2Farticles%2F25933%2F</url>
    <content type="text"><![CDATA[Hexo美化 Gemini Next主题优化 目标：美化博文 背景 发布博客有段时间了，而且陆陆续续写了一些文章，但页面样式都比较简单，只是单一的MarkDown语法，难道是Hexo + Next + MarkDown只能写出简单样式的文章？有点不相信，于是去Next官方。看了一些使用文档，查看了内建标签，原来Next可以让简单样式的文章可以变得那么好看，总结了一下分享出来。 前言Next主题使用的内置tag，官方都已经写好js，直接使用对应的语法糖加入到文章中，就可以实现多样式、多功能的效果。下面分别说明了一下本人博客Hexo+Next的版本，如果有加入对应tag没有效果的，可以留言给我，一起交流一起学习。 Next主题内置tag样式都是本人经过实践得出，原创之作，欢迎大家进行转载。 版本介绍 id name version remark 1 Hexo v3.8.0 系统版本 2 NextT.Pisces v7.0.1 主题版本 内置tag文件位置：blog/themes/next/scripts/tags。 Tags内置tags的js文件一共有12个，在这里我只讲解本人实践的tag。 tabs 功能 提供了一个tabs页样式标签，可以进行切换。 代码 1234567891011&#123;% tabs t_code_1 %&#125;&lt;!-- tab 标题一 --&gt;tab1&lt;!-- endtab --&gt;&lt;!-- tab 标题二 --&gt;tab2&lt;!-- endtab --&gt;&lt;!-- tab 标题三 --&gt;tab3&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 配置 打开Next配置文件：blog/theme/next/_config.yml，搜索tabs，更改代码如下： 1234567# tabs相关配置tabs: enable: true transition: tabs: false labels: true border_radius: 5 # tab圆角设置 示例 标题一标题二标题三tab1tab2tab3 语法糖 tabs-endtabs 是tab tag语法糖。 tab-endtab 是tabs里一个完整的tab，多个tab只需要更换标题、内容即可。 cq &amp;&amp; centerquote 功能 文本居中、引用样式。 代码 1234&#123;% cq %&#125;一个爱老婆的Python程序猿。。。。。。**PyGo²**&#123;% endcq %&#125; 示例 一个爱老婆的Python程序猿。。。。。。PyGo² 语法糖 cq-endcq 是cq tag语法糖。 cq与centerquote等价。 note 功能 内置note标签。 代码 1234567891011121314151617181920212223&#123;% note default %&#125;default 提示块标签&#123;% endnote %&#125;&#123;% note primary %&#125;primary 提示块标签&#123;% endnote %&#125;&#123;% note success %&#125;success 提示块标签&#123;% endnote %&#125;&#123;% note info %&#125;info 提示块标签&#123;% endnote %&#125;&#123;% note warning %&#125;warning 提示块标签&#123;% endnote %&#125;&#123;% note danger %&#125;danger 提示块标签&#123;% endnote %&#125; 配置 打开Next配置文件：blog/theme/next/_config.yml，搜索Note tag，更改代码如下： 123456# note tag 相关配置note: style: flat icons: true # 是否启用图标 border_radius: 3 #圆角设置 light_bg_offset: 0 设置0为里面内容为note样式包含 示例 default提示块标签 primary提示块标签 语法糖 note-endnote 是cq tag语法糖。 样式：default、primary、success、info、warning、danger，示例中我只展示了2种。 label 功能 内置label标签。 代码 123456&#123;% label default@default %&#125;&#123;% label primary@primary %&#125;&#123;% label success@success %&#125;&#123;% label info@info %&#125;&#123;% label warning@warning %&#125;&#123;% label danger@danger %&#125; 示例 default primary success info warning danger 语法糖 label 是label tag语法糖，不需要加endlabel标识结束。 @符号前面是label样式。 @符号后面是label内容。 说明label需要2个参数，有兴趣的可以查看：blog/themes/next/scripts/tags/label.js123args = args.join(&apos; &apos;).split(&apos;@&apos;);var classes = args[0] || &apos;default&apos;;var text = args[1] || &apos;&apos;; button &amp;&amp; btn 功能 内置button标签。 代码 1&#123;% btn https://www.baidu.com, 百度首页, download fa-lg fa-fw %&#125; 示例 百度首页 语法糖 btn 是btn tag语法糖，不需要加endbtn标识结束。 这个标签需要4个参数: url地址、button文本内容、button icon、button title。 第四个参数我试了，没什么效果，有了解的小伙伴欢迎留言。 这个按钮的样式跟Next主题样式一致，因为按钮样式本人优化过，所以在示例中的button与Next默认样式不一致。 说明button需要4个参数，有兴趣的可以查看：blog/themes/next/scripts/tags/button.js 12345args = args.join(&apos; &apos;).split(&apos;,&apos;);var url = args[0];var text = args[1] || &apos;&apos;;var icon = args[2] || &apos;&apos;;var title = args[3] || &apos;&apos;; btn与button等价。 exturl &amp;&amp; extlink(过时，不建议使用) 功能 外链街功能。 代码 1&#123;% exturl https://www.baidu.com 百度首页 %&#125; 示例 语法糖 exturl 是exturl tag语法糖，不需要加endexturl标识结束。 看js文件，这个标签需要5个参数: url地址、url文本内容、urltitle、url item、0、结束位置，其中url文本内容是个列表。 说明button需要4个参数，有兴趣的可以查看：blog/themes/next/scripts/tags/exturl.js 1234567var exturl = &apos;exturl&apos;;var url = &apos;&apos;;var text = [];var title = &apos;&apos;;var item = &apos;&apos;;var i = 0;var len = args.length; exturl与extlink等价。 特殊说明 在md文档中写完此标签，怎么重启，刷新，发现外链都不管用，研究了好一会儿，我在这里就不买官司了，直接看解决方法： 打开Next主题的配置文件，搜索exturl 更改代码如下 1exturl: true 重新启动服务 &amp;&amp; 刷新。 fi &amp;&amp; fullimage 功能 全像显示图片。 代码 12&#123;% fi /images/article_wdyxxy.jpg %&#125;&lt;img src=&quot;next_youhua_avatar.gif&quot; style=&quot;border:1.5px solid blue&quot;/&gt; 示例 语法糖 fi 是fullimage tag语法糖，无对应的end结束。 fi与fullimagee等价。 我试了几个发现这个fi tag与正常*imag标签没什么区别，上面示例代码中给出了，效果图是一样的。 gp &amp;&amp; grouppicture 功能 多格局显示图片。 这里不做简述，请查看博文：hexo博文展示并排等多样式图片 include_raw 功能 引用html文件，是把部分html代码单独写在一个html文件里面，通过tag标签把文件引入的语法，需要可以看最下面的官方说明。 pdf 功能 通过pdf tag标签把pdf文件引入页面中。 代码 1&#123;% pdf /images/PythonStudy.pdf %&#125; 配置 安装theme-next-pdf 12cd blog/themes/nextgit clone https://github.com/theme-next/theme-next-pdf source/lib/pdf 打开Next配置文件：blog/theme/next/_config.yml，搜索pdf，更改代码如下： 1234567# pdf相关配置# See: https://github.com/theme-next/theme-next-pdfpdf: enable: true height: 500px # 设置默认高度 pdfobject: cdn: //cdn.jsdelivr.net/npm/pdfobject@2/pdfobject.min.js 新建目录，如果想要把文件单独存放一个目录，那么需要在blog/public目录下新建目录；如果不想新建，可以把文件放在blog/public/images目录下，这个目录是单独用来存放站点图片之用的目录。 在pdf tag，参数的路径写上上面新建的。 示例 语法糖 pdf 是pdftag语法糖，无对应的end结束。 建议： 建议少用此标签，因为页面如果加载大文件会很慢。 mermaid 功能 用了好几个翻译都解释“美人鱼”，但是实现的效果类似于word、excel、ppt里面的架构图，通过mermaid tag标签把架构图引入页面中。 代码 1234567&#123;% mermaid graph TD %&#125;A[Christmas] --&gt;|Get money| B(Go shopping)B --&gt; C&#123;Let me thinksssss&lt;br/&gt;ssssssssssssssssssssss&#125;C --&gt;|One| D[Laptop]C --&gt;|Two| E[iPhone]C --&gt;|Three| F[Car]&#123;% endmermaid %&#125; 配置 打开Next配置文件：blog/theme/next/_config.yml，搜索mermaid，更改代码如下：123456# Mermaid tagmermaid: enable: true # Available themes: default | dark | forest | neutral theme: forest # 主题 cdn: //cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js 关于架构图的样式取决于theme参数，每个样式我都试了一下，还是forest最漂亮。 示例 graph TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me thinksssssssssssssssssssssssssss} C -->|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[Car] 语法糖 mermaid-endmermaid 是mermaid tag语法糖。 例子我就采用官方的例子了，没自己去写，官方有好几种写法、样式，需要的请查阅官方资料。 video 功能 html对视频的引用。 代码 12&#123;% video url %&#125;&#123;% video /publicfiles/xiao6.mp4 %&#125; 配置 我在blog/public目录下新建了publicfiles一个目录用来存放上面pdf&amp;&amp;video用到的文件。 示例 Sorry, your browser does not support the video tag. 语法糖 video 是video tag语法糖，无endvideo结束。 如果是引用视频，找到视频资源，直接写上url地址即可。 已解决问题 开启服务运用的是debug模式，方便进行调试，在启用的时候，发现服务报了好多WARNING，总结下来方便大家解决问题。 exturl and extlink tag will not longer be supported. 翻译出来就是将不再支持exturl和’extlink`的标记，在我的blog很少用到，用到的会用button tag进行代替。 Tabs block must have unique name! 找到tabs-endtabs内置标签，在tabs后面加上tab一个名字，而且要unique。 未解决问题 在文章编写过程中遇到了一些问题，先记录下来，以后解决在来修改。 在tab里面放```代码块```，不生效。 button与exturl共存在同一页面，并启动exturl配置，发现button样式没了，可能是我自己瞎改button造成的原因，问题解决中。 学习Next中文官方：http://theme-next.iissnan.com/tag-plugins.htmlNext Tag官方：https://hexo.io/docs/tag-plugins.htmlbotton：https://theme-next.org/docs/tag-plugins/button/note：https://theme-next.org/docs/tag-plugins/note/tabs：https://theme-next.org/docs/tag-plugins/tabs/cq：https://theme-next.org/docs/tag-plugins/label：https://theme-next.org/docs/tag-plugins/label/exturl：https://theme-next.org/docs/tag-plugins/exturl/fullimage：https://theme-next.org/docs/tag-plugins/full-imagegroup-pictures：https://theme-next.org/docs/tag-plugins/group-picturespdf tag：https://theme-next.org/docs/tag-plugins/pdftheme-next-pdf：https://github.com/theme-next/theme-next-pdfmermaid：https://theme-next.org/docs/tag-plugins/mermaid/video：https://theme-next.org/docs/tag-plugins/video 结束语到这里，Next内置的tag都实践完毕，根据需要使用上述tags，给博文带来了不一样的视觉效果以及便利，欢迎大家转载，一起交流使用。 最好的开始就是从现在开始！！！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Live2d喵星人模型s]]></title>
    <url>%2Farticles%2F26442%2F</url>
    <content type="text"><![CDATA[每天进步一点点！！！ 上篇文章已经介绍怎么实现喵星人入住博客，实现完了之后根本不知道使用哪个模型，索性我都尝试了一下，把每个模型以及对应的截图总结一下，给自己、给大家节约时间。 chitose epsilon2_1 gf haru_01 haru_02 haruto hibiki hijiki izumi koharu miku ni-j nico nietzsche nipsilon nito shizuku tororo ltsumiki unitychan wanko z16]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next博客添加喵星人]]></title>
    <url>%2Farticles%2F4445%2F</url>
    <content type="text"><![CDATA[如图，四步让给你博客入住喵星人。 安装hexo-helper-live2d 1npm install hexo-helper-live2d --save 下载model模型 在博客根目录创建一文件夹，命名live2d_models。 打开Live2D模型，把项目下载到本地。 把packages下的所有文件都copy到新建目录live2d_models下，每一个目录都对应一个模型。 配置博客config 打开博客的_config.yml文件，不是Next主题的配置文件，看好了。。。之后，把下面代码追加到配置文件中。123456789101112131415161718192021# 动漫live2dlive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: ./live2d_models/live2d-widget-model-z16 display: position: right width: 450 height: 750 hOffset: 10 vOffset: -20 mobile: show: true react: opacity: 0.8 配置文件中live2d-&gt;model-&gt;use：./live2d_models/live2d-widget-model-z16，其中live2d-widget-model-z16是模型名称，只要更换新建目录live2d_models下的模型名称就可以改变。 重启server12hexo g -dhexo s 重启服务&amp;&amp;刷新页面，会发现一只喵星人出现在你的博客上。 配置文件详解： basemodeldisplaymobilereactenable: truescriptFrom: localpluginRootPath: live2dw/pluginJsPath: lib/pluginModelPath: assets/tagMode: falsedebug: false enable 是否启用插件scriptFrom 未知pluginRootPath 插件在站点上根目录的相对路径pluginJsPath 脚本文件相对与插件根目录路径pluginModelPath 模型文件相对与插件根目录路径tagMode Boolean 标签模式, 是否仅替换live2d tag标签而非插入到所有页面中debug 调试模式, 控制是否在控制台输出日志说明：hexo g之后，会在blog/public目录下自动生成一个新文件夹live2dw，里面存放发布后站点模型。model: use: ./live2d_models/live2d-widget-model-z16 启用显示的模型名称，live2d_models目录下每一个目录都是一个模型。display: position: right width: 450 height: 750 hOffset: 10 vOffset: -20 position 模型的位置，有left&amp;&amp;rightwidth 模型的宽度height 模型的高度hOffset 模型的水平偏移vOffset 模型的垂直偏移mobile: show: true 是否在移动端进行显示react: opacity: 0.8 透明度设置：0～1 透明～不透明 学习参考： live2d官网：https://github.com/EYHN/hexo-helper-live2dlive2d模型：https://github.com/xiazeyu/live2d-widget-models/tree/master/packages]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博文展示并排等多样式图片]]></title>
    <url>%2Farticles%2F8728%2F</url>
    <content type="text"><![CDATA[用markdown语法去写博文的时候，发现图片怎么调试怎么不能并排，博客采用Hexo+Next搭建，上网各种查资料，终于解决，在此记录上分享给大家。 使用gp标签引用要展示的图片地址，这个并列展示效果可以在，theme/next/scripts/tags/group-pictures.js文件中进行选取，话说多说，直接上代码：12345&#123;% gp 3-3 %&#125;&lt;img src=&quot;t1.jpeg&quot; width=&quot;450&quot; alt=&quot;图片说明&quot;/&gt;&lt;img src=&quot;t2.jpeg&quot; width=&quot;450&quot; alt=&quot;图片说明&quot;/&gt;&lt;img src=&quot;t3.jpeg&quot; width=&quot;800&quot; alt=&quot;图片说明&quot;/&gt;&#123;% endgp %&#125; 博客正文显示需要修改一下文件代码，themes\next\source\css_common\components\tags\group-pictures.styl样式文件中更改代码如下：123456.page-post-detail .post-body .group-picture-column &#123; // float: none; margin-top: 10px; // width: auto !important; img &#123; margin: 0 auto; &#125;&#125; 设置好了之后，hexo g一下，刷新一下就会看到效果。在gp标签可以使用img标签、![]()也可以这样显示图片，使用img标签的好处就在于自定义样式。 问题解决原文：https://github.com/iissnan/hexo-theme-next/issues/395]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo菜单栏添加留言板-Valine]]></title>
    <url>%2Farticles%2F7953%2F</url>
    <content type="text"><![CDATA[简述 blog菜单栏添加留言板功能，欢迎大家留言交流。。。 My blog文章添加留言功能，除此之外还在菜单栏添加一个专门用来留言的message pad，用来share文章中简称mp。查看next主题config.yml文件以及google了一下，发现居然配置5中默认的评论系统。。。next这么变态吗？提供1～2就好了，5个是怎么回事啊，还得花时间去整理compare，以下仅代表个人观点。 评论系统 id type desc remark 1 valine https://valine.js.org 🌟🌟🌟 4 disqus https://www.jianshu.com/p/c4f65ebe23ad 5 changyan https://www.jianshu.com/p/5246d020da25 2 gitment https://github.com/imsun/gitment 🌟 3 gitalk https://gitalk.github.io 🌟 效果图 valine disqus changyan gitment gitalk 总结：单从效果图上来看，我倾向于gitment、gitalk、changyan，简单整洁。 功能性这里不想说明了，直接给出结论。。。干货 总结：除了valine，其他4个评论均需要强制登录一个指定的账号才可以进行评论发布，令人太不爽了。 Valine主要基于账号的问题，我选择Valine，起码大家都可以参与，没有限制。 注册LeanCloud注册LeanCloud，将数据托管给第三方，直接登录账号使用，很方便。注册地址：注册Leancloud(官方) 注册 创建应用 设置应用 应用key next配置打开next的配置：theme/next/_config.yml，搜索：# Valine12345678910111213valine: enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version. appid: XXXX # your leancloud application appid appkey: XXXX # your leancloud application appkey notify: false # mail notifier, See: https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 欢迎吐槽 ！ # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail # link custom comment header pageSize: 10 # pagination size language: # language, available values: en, zh-cn visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&apos; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html comment_count: true # if false, comment count will only be displayed in post page, not in home page enable：是否开启Valine评论 appid：leancloud应用上App ID appkey：leancloud应用上App Key notify &amp;&amp; verify：是否开启邮件提醒，leancloud &amp;&amp; github valine使用有详细介绍，具体查看文档(https://valine.js.org/notify.html) placeholder：评论区默认文字 avatar：头像设置(https://valine.js.org/avatar.html) guest_info：评论区用户选填的基本信息 pageSize：一页评论的数据 language：语言设置，默认zh-cn visitor：还不知道，欢迎大家留言告诉我，哈ヾﾉ≧∀≦)o哈 comment_count：是否展示评论总数 评论生效注册 &amp;&amp; 配置搞完了之后，并不是立马看到效果，需要： hexo g hexo server -p 8888 从心打开blog，奇迹出现了。。。哈哈哈，一起都是自己的功劳，并不是什么奇迹，只要努力，成功离你就会不远。 禁用评论但是，我其实就是想在菜单栏添加个留言板功能，不想再blog文章中添加这个功能，简单。打开文章，在最上面的设置中加入 comments: true 从新g-&gt;server，奇迹再次发生。。。如果想都关闭评论，这个需要在已经发布的文章中分别设置，暂时没有找到简单的方法。不能在以后每篇文章中每次都设置，好麻烦，只想需要要设置一次。当然有方法，blog/scaffolds/post.md文件设置：123456789---title: &#123;&#123; title &#125;&#125;desc:date: &#123;&#123; date &#125;&#125;updated: &#123;&#123; date &#125;&#125;categories:tags:comments: false--- 留言板终于进入主题了，菜单栏添加单独一栏留言板功能。 添加page hexo new page messagepad 留言板 对page messagepad的index.md进行编辑加入自定义的东西。12345---title: 欢迎大家留言---![messagepad.png](messagepad.png)&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;28&quot; data-avatar-size=&quot;42&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt; 继续见证奇迹吧。 Suggestion真正的成功并非一朝一夕，水滴石穿，努力吧，少年们！！！ 到此收工，一个完美的菜单栏留言板功能share献给大家。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化-增强篇（Gemini）]]></title>
    <url>%2Farticles%2F41065%2F</url>
    <content type="text"><![CDATA[Hexo美化 Gemini Next主题优化 问题简述 Next主题优化之增强篇，前几天写了一篇通过配置相关的优化，继续介绍一下代码相关更改的优化。 目录结构 _config.yml：blog全局配置文件 node_modules：npm安装的第三方包 public：执行hexo generate命令，输出的静态网页内容目录 package.json：hexo-site安装的第三方插件 scaffolds：layout模板文件目录 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理 themes：主题文件目录 优化Catalog 修改后重启服务：hexo g &amp;&amp; hexo server -p 8888 –debug Fork me on github 位置：blog/themes/next/layout/_layout.swig 打开上述文件，搜索关键字headband，在这个div标签下添加文字/图标链接的代码，并把href改为自己的github地址。 1&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 文字：https://github.blog/2008-12-19-github-ribbons/ 图标：http://tholman.com/github-corners/ 新版实现方式 在新版只需要配置一下就OK，打开next的配置文件，搜索github_banner，配置一下： 1234github_banner: enable: true permalink: https://github.com/GIS90 title: Follow me on GitHub 文章内链接文本样式 位置：blog\themes\next\source\css_custom\custom.styl 打开上述文件，样式根据自己的喜爱定义就好，添加如下代码： 12345678910.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 添加顶部加载条 添加顶部加载条，步骤如下： 下载js文件，不清楚的也可以直接看github官方介绍：https://github.com/theme-next/theme-next-pace 12cd themes/nextgit clone https://github.com/theme-next/theme-next-pace source/lib/pace 打开配置文件，搜索pace，更改如下位置：blog/theme/next/_config.yml 1234567# Dependencies: https://github.com/theme-next/theme-next-pacepace: true# Themes list:# pace-theme-big-counter | pace-theme-bounce | pace-theme-barber-shop | pace-theme-center-atom# pace-theme-center-circle | pace-theme-center-radar | pace-theme-center-simple | pace-theme-corner-indicator# pace-theme-fill-left | pace-theme-flash | pace-theme-loading-bar | pace-theme-mac-osx | pace-theme-minimalpace_theme: pace-theme-mac-osx 大家可以根据自己喜欢的样式配置。 tags页样式修改 位置：blog/theme/next/_config.yml 打开配置文件，搜索tagcloud，更改配置如下： 12345678910tagcloud: # If true, font size, font color and amount of tags can be customized enable: true # All values below are same as default, change them by yourself min: 12 # min font size in px max: 36 # max font size in px start: &quot;#FF9900&quot; # start color (hex, rgba, hsla or color keywords) end: &quot;#FF00FF&quot; # end color (hex, rgba, hsla or color keywords) amount: 80 # amount of tags, chage it if you have more than 200 tags 鼠标样式修改 鼠标样式文件把下载好的鼠标样式文件（.cur）放到blog\public目录下。 自定义样式位置：blog\themes\next\source\css_custom\custom.styl。打开上述文件，添加如下代码： 12345678910// 光明西-背景body &#123; background:url(/images/background.jpg); cursor: url(&apos;/images/shubiao_guangmingxi.cur&apos;), auto !important;&#125;// 自制主题切换功能样式-暗黑系body.dark-theme &#123; background: #282c34; cursor: url(&apos;/images/shubiao_anheixi.cur&apos;), auto !important;&#125; 鼠标样式根据自己的喜好做相关调整。 刷新。 学习hexo官方配置手册：https://hexo-guide.readthedocs.io/zh_CN/latest/index.htmlhexo图标选取地址：https://fontawesome.com/icons 结束本篇内容主要解决Hexo、Next更改代码相关的优化，如果想通过配置优化，请查看Next主题优化-基础篇。内容持续更新中，如有bugs，欢迎大家评论指出。待续。。。。。。（未完结） 学会分享，一起进步]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化-基础篇（Gemini）]]></title>
    <url>%2Farticles%2F58065%2F</url>
    <content type="text"><![CDATA[Gemini Hexo美化 Next主题优化 问题简述 My blog 采用Hexo + Next搭建，搭建完之后，看页面居然还是英文，好ugly，身为一名程序猿怎么可以忍呢。在持续一个月的捣鼓中，总结出Next一些通过配置优化的点。 版本信息 id name version remark 1 Hexo v3.8.0 系统版本 2 NextT.Pisces v7.0.1 主题版本 3 ATOM 1.34.0 编译器 4 Theme Gemini 优化Catalog 切记config文件冒号“：”后面一定要有一个空格 修改后重启服务：hexo g &amp;&amp; hexo server -p 8888 –debug Blog站点配置位置：blog/_config.ymlhexo自带的config.yml，不是next主题的，看好了 12345678# 基本信息配置 Sitetitle: PyGo²subtitle: 一个爱老婆的python程序猿。。。。。。description: 直男，双鱼星座，现居北京，去哪儿网python开发工程师。keywords: pythonauthor: mingliang.gaolanguage: zh-CN # 🌟页面的语言设置timezone: Asia/Shanghai #时区 Next风格设置位置：blog/theme/next/_config.yml打开配置文件，搜索Schemes，更改配置如下： 12345# Schemes 主题风格# scheme: Muse# scheme: Mistscheme: Pisces# scheme: Gemini 菜单栏位置：blog/theme/next/_config.yml打开文件，格式：Key: Path || Icon，不想要的#禁止掉 123456789101112131415menu: home: / || home archives: /archives/ || history tags: /tags/ || tags categories: /categories/ || list movie: /categories/影视说 || film messagepad: /messagepad/ || sticky-note about: /about/ || user # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeatmenu_settings: icons: true # 是否显示图标 badges: true # 是否显示分类、标签、时间轴所包含内容个数 about页面终端（mac推荐使用zsh + item2）回到blog的根目录，运行：hexo new page about，在blog/source下会自动建立about文件夹，编辑里面的index.md，配置如下： 1234567---layout: abouttitle: Self Introductiondate: 2018-01-01comments: falsetype: about--- 现在可以使用atom去写关于自己的描述了（markdown语法，不知道的请自行恶补） tags/catalog页面 Tags 根目录运行：hexo new page tags，配置如下：123456---title: 标签date: 2019-03-17 13:58:44type: &quot;tags&quot;comments: false--- Catalog 根目录运行：hexo new page tags，配置如下：123456---title: 分类date: 2019-03-17 13:58:10type: &quot;categories&quot;comments: false--- tags和categorise页面不用设置样式，自动生成，之所以与about页面分开，我觉得虽然建立的方式一样，但是内容根本不一个东西，每篇文章设置对应的即可，栗子如下：12345678910---title: 程序猿七夕-心心相印comments: falsedate: 2018-8-13 14:19:57updated: 2018-8-13 17:19:57desc: 程序猿七夕-心心相印categories: - [python]tags: [python]--- 设置创建文章同名文件夹位置：blog/_config.yml打开配置文件，搜索post_asset_folder，更改配置如下：12default_layout: post # 默认创建文件分类post_asset_folder: true 开启之后，在创建文章hexo new XXXX，同时也会出现一个同名的文件夹用来存放相关的图片。 个人头像设置设置侧边栏头像，准备好头像图片，可以是png、jpg、gif等，本人用的动态gif图片。然后，将图片放在/blog/themes/next/source/images/文件夹下。位置：blog/theme/next/_config.yml，搜索avatar，更改配置如下：1234url: /images/timg.gif # 图片存放位置rounded: true #设置图片是否为圆形，当图片为正方形时为圆，否则为正方形opacity: 1 #图片的透明度rotated: true #设置鼠标移到图片上是否转动 社交栏设置 在Next主题配置文件中，搜索social，设置相对应的社交信息，格式：网站名: 网址 || 图标（英文“:”）。图标选取地址：自选图标 菜单栏的个人社交信息设置 12345678910111213social: GitHub: https://github.com/GIS90 || github WeiBo: https://weibo.com/u/1989571513 || weibo E-Mail: gaoming971366@163.com || envelope OsChina: https://my.oschina.net/u/2259452 || fire # Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 社交信息图标设置 1234social_icons: enable: true # 是否展示图标 icons_only: true # 是否只展示图标 transition: true # 一/多行格式 修改模版位置：blog/scaffolds/post.md打开上述文件，修改代码如下：123456789---title: &#123;&#123; title &#125;&#125;desc:date: &#123;&#123; date &#125;&#125;updated: &#123;&#123; date &#125;&#125;categories:tags:comments: false--- title：文章标题 desc：文章的简述 date：文章创建时间 updated：文章修改时间 categories：文章分类 tags：文章标签 comments：是否启用评论功能，默认关闭 代码添加复制功能位置：blog/theme/next/_config.yml打开配置文件，搜索Button，更改配置如下：123456codeblock: border_radius: 0 # 复制功能button边框 copy_button: enable: true # 是否启用复制功能呢 show_result: true # 是否显示复制结果 style: # 设置flat，样式超难看 默认按钮显示复制，若是想改为英文copy，打开blog/themes/next/languages/zh-CN.yml文件中，将下面部分改了即可：123copy_button: 复制copy_success: 复制成功copy_failure: 复制失败 文章设置打赏位置：blog/theme/next/_config.yml打开配置文件，搜索reward_settings，更改配置如下：123456789reward_settings: enable: true # 是否启用打赏功能 animation: true # 支付名称支付有动画效果 comment: 觉得有帮助，欢迎打赏 # 贡献说明reward: wechatpay: /images/wechatpay.png # 微信 alipay: /images/alipay.png # 支付宝 # bitcoin: /images/bitcoin.png # 比特币 footer设置位置：blog/theme/next/_config.yml打开配置文件，搜索footer，更改配置如下：123456789101112131415footer: # 底部user图标 icon: name: user-circle # icon名称 animated: true # 是否启用动画效果 color: &quot;#FF0000&quot; # 图标颜色 copyright: # 底部hexo版本信息显示设置 powered: enable: false # 是否显示hexo版本信息 version: true theme: # 底部hexo版本信息显示设置 enable: false # 是否显示next版本信息 version: true 图标选取地址：https://fontawesome.com/v4.7.0/icons/ 访问人数和总访问量位置：blog/theme/next/_config.yml打开配置文件，搜索busuanzi_count，更改配置如下： 12345678busuanzi_count: enable: true # 是否启用统计功能 total_visitors: false # 网站总的访问人数，底部展示 total_visitors_icon: user # 网站总的访问人数icon total_views: false # 网站总的访问次数，底部展示 total_views_icon: eye # 网站总的访问次数icon post_views: true # 阅读次数，文章标题下展示 post_views_icon: eye # 阅读次数icon 动态背景Canvas位置：blog/theme/next/_config.ymlcanvas-nest：https://github.com/theme-next/theme-next-canvas-nestthree_waves：https://github.com/theme-next/theme-next-three具体步骤github上有详解打开配置文件，搜索Canvas-nest，更改配置如下： 1234567891011121314151617# Canvas-nest 背景效果canvas_nest: enable: true onmobile: false # display on mobile or not color: &quot;0,0,255&quot; # RGB values, use &apos;,&apos; to separate opacity: 0.5 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 199 # the number of lines# JavaScript 3D library.# Dependencies: https://github.com/theme-next/theme-next-three# three_waves 背景效果three_waves: false# canvas_linescanvas_lines: false# canvas_spherecanvas_sphere: false 特别指出three_waves配置只能选取一个，而且开启canvas-nest，three_waves之后，页面渲染的时间变长了，而且发现内存，cpu的使用率也加大了，所以我只开启了canvas-nest，根据自己的需求进行配置。 文章第三方分享 分享插件：baidushare 文章添加新浪、微信、贴吧等国内第三方分享，关于位置有button | slide2种选择。位置：blog/theme/next/_config.yml打开配置文件，搜索baidushare，更改配置如下：12baidushare: type: button 分享插件：likely 文章添加twitter、facebook、linkedin等国际第三方分享，有需要的同学可以开启此功能。位置：blog/theme/next/_config.yml打开配置文件，搜索likely，更改配置如下：12345678910111213likely: enable: false look: normal # available values: normal, light, small, big networks: twitter: Tweet facebook: Share linkedin: Link gplus: Plus vkontakte: Share odnoklassniki: Class telegram: Send whatsapp: Send pinterest: Pin 分享插件：NeedMoreShare2 配置文件新增了综合国内、国际分享，也是可以设置底部、侧边2种位置。位置：blog/theme/next/_config.yml打开配置文件，搜索NeedMoreShare2，更改配置如下：12345678910111213141516needmoreshare2: enable: false postbottom: enable: false options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: enable: false options: iconStyle: box boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook 友情链接位置：blog/theme/next/_config.yml站点浏览添加友情链接，格式：名称: url(英文“:”)。打开配置文件，搜索Blog rolls，更改配置如下：123456789links_icon: link # 图标links_title: 友情链接 # 标题# links_layout: block # 链接样式 块样式links_layout: inline # 行样式links: # 内容 google搜索: https://www.google.com baidu搜索: https://www.baidu.com pdf在线转换: https://smallpdf.com/cn json格式化: https://www.json.cn/ 首页设置文章预览首页文章设置预览前言显示，有2种方式，都share一下。 配置 位置：blog/theme/next/_config.yml打开配置文件，搜索auto_excerpt，更改配置如下：123auto_excerpt: enable: true length: 200 设置完之后，首页预览每个markdown格式，不建议使用。 more 在文章需要进行预览的地方，加入如下代码：1&lt;!-- more --&gt; 建议使用，格式、图片等不受影响。 文章首页图片展示首页文章设置预览用more去进行处理，当在预览中加入图片时，图片链接会去blog&gt;public&gt;images目录下去寻找对应的图片，打开文章又回去文章对应的目录&gt;images目录下去找。所以，当文章预览中有图片显示的文章，在文章的目录下手动建立一个images文件夹，把图片分别存放在当前images文件夹以及blog&gt;public&gt;images文件夹下。这样就OK了。 不过有个问题，首页如果分页显示，那么首页预览图片寻找的路径会发生改变。所以我在前面设置文章预览个数index_generator的时候设置为0，这是我的解决方法，如果大家有好的解决方案，欢迎大家留言交流。 博文添加图片查看器首先，下载fancybox插件，有2个版本，我选择了最新版3。12cd themes/nextgit clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox 位置：blog/theme/next/_config.yml打开配置文件，搜索fancybox，更改配置如下：1fancybox: true fancybox官网：https://github.com/theme-next/theme-next-fancybox3 页面浏览进度设置页面的浏览百分比，打开配置文件，搜索scrollpercent，更改配置如下：位置：blog/theme/next/_config.yml 123456back2top: enable: true # Back to top in sidebar. sidebar: false # sitebar是否在工具栏 # Scroll percent label in b2t button. scrollpercent: true # 浏览进度情况 文章额外信息展示在文章标题下面显示文章相关的额外信息，打开配置文件，搜索post_meta，更改配置如下：位置：blog/theme/next/_config.yml 123456789# Post meta display settings# 文章创作时间、分类post_meta: item_text: true created_at: true updated_at: enable: true another_day: true categories: true 修改访问URL路径blog默认情况下访问URL路径为：domain/2017/08/18/title，打开配置文件，搜索permalink，更改配置如下：位置：blog/_config.yml1permalink: :category/:title/ 配置完，重启一下server，回到主页在进行文件查看，发现地址发生改变 设置博客favicon图标修改博客favicon图标，打开配置文件，搜索apple_touch_icon，更改配置如下：位置：blog/theme/next/_config.yml 12345favicon: small: /images/favicon16.ico medium: /images/favicon32.ico apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg 修改文章底部的#号标签打开/themes/next/layout/_macro/post.swig，搜索rel=”tag”&gt;#，将#换成下列代码: 1&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 注意 配置完Hexo config需要重启server，next config重新刷新即可。 学习hexo官方配置手册：https://hexo-guide.readthedocs.io/zh_CN/latest/index.htmlhexo图标选取地址：https://fontawesome.com/icons 结束本篇内容主要解决Hexo、Next相关config配置文件的优化，内容持续更新中，如有bugs，欢迎大家评论指出。待续。。。。。。（未完结） 学会分享，一起进步]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的for_break_else的坑]]></title>
    <url>%2Farticles%2F14093%2F</url>
    <content type="text"><![CDATA[Python语法糖 for...else 简介 python语法糖中for/while循环中else+break的使用，别让break坑你 正文​​​​​在python语法糖中，大家应该经常使用for/while…else，官方是这么解释循环中else的使用的：重要知识点是划线部分，大致意思for/while正常结束走else，break跳转循环是不走else的。下面就用例子强行解释一波👇（最简单的例子，别介意）：​先看个正常的：break非正常结束for：​可见，break可以引起for/while循环非正常结束​，经常使用for_else的小盆友，如果使用了break，一定要注意，本人就在使用中被坑了一把，调试了好久才知道。。。 备注官方地址：http://book.pythontips.com/en/latest/for_-_else.html​​​​​]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo展示文章统计-hexo-symbols-count-time]]></title>
    <url>%2Farticles%2F16195%2F</url>
    <content type="text"><![CDATA[问题简述 next主题的blog添加文章统计功能【hexo-symbols-count-time】 My blog采用next主题，想在发布的文章中加上通统计相关的展示，google许多文章，都是关于配置hexo-wordcount、LeanCloud等，发现配置之后，仍然没有效果。身为一名程序猿，怎么可能有解决不的bug，下面是我的解决方案，官方配置。 版本信息 id name version 1 Hexo v3.8.0 2 NextT.Pisces v7.0.1 解决方案去查next主题的_config.yml文件，一点点看。终于在347行发现了# Post wordcount display settings这一行说明，继续阅读发现hexo-symbols-count-time这个插件，立马google，官方解释：大致的意思是统计文章的符号数量以及阅读时间，比hexo-reading-time更美观，比hexo-worcount统计的更快，而且还没有依赖。这是非常爽的啊，只需要按配置一下，OK了啊。 安装1npm install hexo-symbols-count-time --save blog配置文件⁍ next找到_config.yml的配置，添加以下内容：12345678# 文章统计symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true theme配置文件⁍ next找到_config.yml的配置，搜索关键字：hexo-symbols-count-time123456symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 说明AWL — Average Word Length (chars count in word). Default: 4. You can check this here. CN ≈ 2 EN ≈ 5 RU ≈ 6WPM — Words Per Minute. Default: 275. You can check this here. Slow ≈ 200 Normal ≈ 275 Fast ≈ 350 相关文章hexo-wordcount：https://www.jianshu.com/p/baea8c95e39bhexo-symbols-count-time：https://github.com/theme-next/hexo-symbols-count-time 个人观点 搞开发的英语看的能力起码得有基础，不然解决bug，看官方api的时候很费劲 搞一个东西的时候，先从本身查找能否解决问题，如果不能在考虑从外部引用解决问题]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客tags词云]]></title>
    <url>%2Farticles%2F31753%2F</url>
    <content type="text"><![CDATA[Python Tag词云 Python实例 Hexo 背景 博客已经了一些技术文章，在写about页面的时候，想把自己tags分类展示在页面上，但是直接写文字，能不能在low点。。。想到了词云，于是写个脚本自动生产博客的词云图片，完美！！！。 环境 id name Version 1 Python 2.7 数据流html数据源 -&gt; html解析收集tag -&gt; 词云生成图片 正文脚本是针对博客建立的，所以数据源取的就是博客文章的tag标签。脚本开发起来很简单，代码也不是很复杂，每个方法有基本的注释，代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe: 词云生成器usage: python tag_cloud.pybase_info: __version__ = &quot;v.10&quot; __author__ = &quot;mingliang.gao&quot; __time__ = &quot;2018/11/21&quot; __mail__ = &quot;mingliang.gao@qunar.com&quot;------------------------------------------------&quot;&quot;&quot;import osimport reimport jiebaimport numpy as npimport matplotlib.pyplot as pltfrom PIL import Imagefrom wordcloud import WordCloudfrom bs4 import BeautifulSoupBACKGROUND_NAME = &apos;public/images/tags_background.png&apos;HTML_REL_DIR = &apos;public/articles&apos;TAR_IMG = &apos;public/images/blog_tags.jpg&apos;def get_cur_dir(): return os.path.abspath(os.path.dirname(__file__))class TagCloudGenerator(object): def __init__(self): self.background = os.path.join(get_cur_dir(), BACKGROUND_NAME) self.text_source = os.path.join(get_cur_dir(), HTML_REL_DIR) self.tar_img = os.path.join(get_cur_dir(), TAR_IMG) def get_index_files(self): &quot;&quot;&quot; get all index.html file :return: list type &quot;&quot;&quot; index_files = list() pattern = re.compile(&apos;index\.html&apos;) for root, dirs, files in os.walk(self.text_source): for f in files: f_full = os.path.join(root, f) match = pattern.search(f_full) index_files.append(f_full) if match else None else: return index_files def get_index_tags(self, index_html): &quot;&quot;&quot; get tags of index.html :param index_html: index html :return: list type &quot;&quot;&quot; tags = list() if not index_html: return tags if not os.path.exists(index_html): return tags def _deal_html_tas(): soup = BeautifulSoup(open(index_html), &apos;html.parser&apos;, from_encoding=&apos;utf-8&apos;) post_a_tags = soup.find_all(&apos;a&apos;, attrs=&#123;&quot;rel&quot;: &quot;tag&quot;&#125;) if post_a_tags: for tag in post_a_tags: tag_text = tag.get_text() tags.append(tag_text.strip()) return tags return _deal_html_tas() def collect_tags(self): all_tags = list() all_indexs = self.get_index_files() for index_file in all_indexs: if not index_file: continue tags = self.get_index_tags(index_file) print index_file all_tags.extend(tags) if tags else None else: return all_tags def run(self): all_html_tags = self.collect_tags() * 100 wl_space_split = &quot; &quot;.join(all_html_tags) d = os.path.dirname(__file__) tag_background = np.array(Image.open(self.background)) my_wordcloud = WordCloud(background_color=&quot;#CACFD2&quot;, max_words=2000, font_path=&quot;public/publicfiles/fangsong_GB2312.ttf&quot;, mask=tag_background, stopwords=&#123;&apos;企业&apos;&#125;, max_font_size=150, scale=1, width=800, random_state=1).generate(wl_space_split) plt.imshow(my_wordcloud) plt.axis(&quot;off&quot;) # plt.show() my_wordcloud.to_file(self.tar_img)if __name__ == &apos;__main__&apos;: tc = TagCloudGenerator() tc.run() 代码存在tag_cloud.py文件中，放在blog的根目录，图片生成的位置：blog/public/images/blog_tags.jpg。 执行方法1python tag_cloud.py 嵌入about找到about页面的index.md文件，嵌入图片，代码如下：1&lt;img src=&quot;/images/blog_tags.jpg&quot; alt=&quot;tags cloud&quot; width=&quot;88%&quot;/&gt;]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo文章添加版权声明]]></title>
    <url>%2Farticles%2F46750%2F</url>
    <content type="text"><![CDATA[问题简述 想在My blog的文章底部添加上自己的版权声明，一是意识方便大家进行转载share，二来也是对自己写的东西有一个声明吧。废话不多说，很简单。【含样式】 版本信息 id name version 1 Hexo v3.8.0 2 NextT.Pisces v7.0.1 版权代码打开next主题目录下/next/layout/_macro/post.swig文件，搜索post-body，在这个div标签结束的下一行，添加以下代码123456789101112131415161718&lt;!-- 版权声明 --&gt;&lt;div&gt; &#123;% if not is_index %&#125; &lt;ul class=&quot;post-copyright&quot;&gt; &lt;li class=&quot;post-copyright-author&quot;&gt; &lt;strong&gt;本文作者：&lt;/strong&gt;&#123;&#123; theme.author &#125;&#125;【&#123;&#123; theme.subtitle &#125;&#125;】 &lt;/li&gt; &lt;li class=&quot;post-copyright-link&quot;&gt; &lt;strong&gt;本文链接：&lt;/strong&gt; &lt;a href=&quot;&#123;&#123; url_for(page.permalink) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-copyright-license&quot;&gt; &lt;strong&gt;版权声明：&lt;/strong&gt; 本博客所有文章除特别声明外，均采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 CN&lt;/a&gt; 许可协议。转载请注明出处！ &lt;/li&gt; &lt;/ul&gt; &#123;% endif %&#125;&lt;/div&gt; 变量说明： theme.*：hexo配置文件的基础信息 page.*：指的是本文章的一些相关信息 版权样式打开/next/source/css/_custom/custom.styl,并在里面添加如下样式代码:123456789101112131415// 版权声明样式.post-copyright &#123; margin: 2em 0 0; padding: 0.5em 1em; border-left: 8px double #ff1700; background-color: #EAECEE; list-style: none;&#125;.post-copyright-link a&#123; color: blue;&#125;.post-copyright-link a:hover &#123; color: red; font-size: 18px;&#125; 个人声明本人在版权声明中文章链接的都是github上的地址，如果不需要去掉https://gis90.github.io/即可。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化-美化篇（Gemini）]]></title>
    <url>%2Farticles%2F3412%2F</url>
    <content type="text"><![CDATA[Hexo美化 Gemini Next主题优化 简介 基本用Hexo + Next把网站搭建起来用run了，而且Next在theme中github关注量最高，但是在样式上还是有些。。。。。。此博文用来记录对Next主题的一些样式上的更改，持续更新中～。 版本信息 id name version remark 1 Hexo v3.8.0 系统版本 2 NextT.Pisces v7.0.1 主题版本 3 Theme Gemini 主题样式 正菜社会程序猿，人好话不多！！！ sidebar圆角 打开blog/themes/next/source/css/_variables/Gemini.styl，搜索border-radius，在_variables目录下有Next主题的4种theme，用哪个修改哪个，修改代码： 12$border-radius-inner = 16px$border-radius = 16px 我的修改完了，现在下面站点简介的sidebar，上面的圆角居然有背景色，继续进行优化修改。 打开文件blog\themes\next\source\css_custom\custom.styl（只能说这个文件太NB了，里面可以放置整个站点的style css，very NB），新增代码： 1234// sidebar css.sidebar&#123; background-color:transparent;&#125; 把sidebar背景色设置成透明。 站点背景图 Next主题加上背景图，让博客变得更美观，很简单。 找到一张背景图，把图片放到以下文件中并命名background.jpg：位置：blog/public/images/ 打开blog/themes/next/source/css/_custom/custom.styl此文件，加入以下代码在文件最上面： 1234// 背景图body &#123; background:url(/images/background.jpg);&#125; 刷新，样式可以根据自己的需要对图片进行进行调整。 文章阴影边框 位置：blog\themes\next\source\css_custom\custom.styl 打开上述文件，添加如下代码： 12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(250, 128, 114, 1.5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; webkit-box-shadow：控制边框的样式 阅读全文特效 位置：blog/themes/next/source/css/_variables/Pisces.styl 打开上述文件，搜索Button，更改代码如下： 123456$btn-default-radius = 15px$btn-default-bg = black$btn-default-color = white$btn-default-border-color = blue$btn-default-hover-color = red$btn-default-hover-bg = yellow 文章底部#号标签 位置：blog/themes/next/layout/_macro/post.swig 打开配置文件，搜索“tag”，将# 更改代码如下： 1&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;即可。 同理，icon也可以根据自己选取。标签暂时还是有下划线的，如果想要想去掉下滑线并添加自己的样式，添加代码到如下文件： 位置：blog\themes\next\source\css_custom\custom.styl 1234.posts-expand .post-tags a &#123; border-bottom: none; font-size: 18px;&#125; post透明 位置：blog/themes/next/layout/_macro/post.swig 新增代码： 1234.content &#123; margin-top: 22px; opacity: 0.9;&#125; 我只调整了post部分，没有调整sidebar的透明度，如果需要设置，添加代码如下： 1234.sidebar&#123; background-color:transparent; opacity: 0.9;&#125; post-block圆角 设置主页每个文章块的圆角，还是样式自定义文件，添加代码： 123.post-block &#123; border-radius : 12px;&#125; back-to-top样式更改 修改回到顶部的按钮样式。 配置位置：blog\themes\next\source\css_custom\custom.styl打开上述文件，开启back-to-top功能，修改如下代码： 123456back2top: enable: true # Back to top in sidebar. sidebar: false # Scroll percent label in b2t button. scrollpercent: true 样式修改位置：blog\themes\next\source\css_custom\custom.styl打开上述文件，添加如下代码： 12345678910111213141516171819.back-to-top &#123; right: 60px; width: 70px; //图片素材宽度 height: 350px; //图片素材高度 opacity: 1; bottom: unset; transition: all .5s ease-in-out; background: url(&quot;/images/scroll.png&quot;); //隐藏箭头图标 &gt; i &#123; display: none; &#125; &amp;.back-to-top-on &#123; bottom: unset; top: 0px; &#125;&#125; 代码块样式 位置：blog\themes\next_config.yml 打开上述文件，搜索highlight_theme，更改代码如下： 123# Available values: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night bright 主题有很多，根据自己的喜好定义。 标题样式修改位置：blog\themes\next\source\css_custom\custom.styl打开上述文件，添加如下代码： 1234567// 标题.post-title &#123; color: black; letter-spacing: 12px; font-family: Comic Sans MS; text-shadow: -1px -1px 1px #fff, 1px 1px 1px #000;&#125; 样式根据自己的喜好做相关调整。 小技巧 在Hexo配置、博文Title都可以加入font、div等等这样的标签。 在修改样式的时候，浏览器调试模式，找到对应的class，全项目搜索，找到对应的文件，直接进行修改，但不建议这么做。 可以把样式修改在自定义样式文件：blog\themes\next\source\css_custom\custom.styl（只能说这个文件太NB了，里面可以放置整个站点的style css，very NB）。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo新增tags、categories、自定义菜单栏页]]></title>
    <url>%2Farticles%2F33202%2F</url>
    <content type="text"><![CDATA[背景 Hexo初始化博客之后，主题选用了人气最高的Next，但是发现菜单栏默认是不自动添加tags页与categories页，查资料，终于创建成功，记录下来。 正文除了讲述tags、categories、about自带的自动化页面，还有讲述自定义sidebar页面，方便用于自己定义相册、等自己喜欢的页面。 tags new page在blog根目录，执行下列命令： 1hexo new page tags 不出意外会自动生成文件blog/source/tags/index.md，目前位置没有出现过任何问题。有问题的同学可以留言给我。 配置打开blog/source/tags/index.md，默认是下列内容： 1234---title: 标签date: 2019-10-22 14:22:08--- 改成 123456---title: 标签date: 2019-10-22 13:58:44type: &quot;tags&quot;comments: false--- 添加tags给文章添加对应的tags，打开一篇文件，例子如下： 1234567891011---title: Hexo+Next搭建属于自己的Blogcomments: falsedate: 2018-10-22 23:03:42updated: 2019-10-22 23:03:42desc: Hexo+Next搭建属于自己的Blogcategories: - [Hexo]tags: [Hexo]keywords: hexo, next, blog--- 重启server重新生成静态页面以及开启服务，之后刷新页面就会看到。 12hexo ghexo s categories categories页创建与tags页操作一样。 new page在blog根目录，执行下列命令： 1hexo new page categories 配置打开blog/source/categories/index.md，默认是下列内容： 1234---title: 分类date: 2018-10-22 14:25:08--- 改成 123456---title: 分类date: 2018-10-22 14:25:08type: &quot;categories&quot;comments: false--- 添加categories给文章添加对应的categories： 1234567891011---title: Hexo+Next搭建属于自己的Blogcomments: falsedate: 2018-10-22 23:03:42updated: 2019-10-22 23:03:42desc: Hexo+Next搭建属于自己的Blogcategories: - [Hexo]tags: [Hexo]keywords: hexo, next, blog--- 重启server同样重启服务。 1hexo g &amp;&amp; hexo s 指定分类列表页 这个功能主要用于把已经分类的自分类单独形成一个页面放在sidebar，打开之后是一个文章list效果，建议1～2个。 子分类找到需要在sidebar显示的子分类，中文、英文都可以。 配置打开Next主题配置文件：blog/theme/next/_config.yml，搜索menu，更改代码如下： 123456789101112menu: home: / || home archives: /archives/ || history tags: /tags/ || tags categories: /categories/ || list movie: /categories/影视说/ || film enjoy: /categories/娱乐/ || battery-full messagepad: /messagepad/ || sticky-note about: /about/ || user # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat 设置的标准：第一列 / themes/next/languages/zh-Hans.yml 对应的关键字第二列 / url 路径第三列 / 图标 https://fontawesome.com/cheatsheet?from=io 添加关键字打开文件：blog/themes/next/languages/zh-Hans.yml，添加对应的mapping： 12345678910111213menu: home: 首页 archives: 时间轴 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益 404 movie: 影视说 messagepad: 留言板 enjoy: 娱乐 重启server同样重启服务。 1hexo g &amp;&amp; hexo s about about是sidebar自我介绍的一栏，很重要，但是生成的方式与tags、categories如出一辙。 new page在blog根目录，执行下列命令： 1hexo new page about 配置打开blog/source/about/index.md，默认是下列内容： 1234---title: aboutdate: 2018-10-22 14:35:08--- 改成 1234567---layout: abouttitle: Hidate: 2018-10-22comments: falsetype: about--- markdown语法写about页面Hexo会把md文件自动生成html页面，用markdown语法去写md文件即可。 重启server同样重启服务。 1hexo g &amp;&amp; hexo s 自定义页面 在sidebar往往需要自定义一些自己需要的页面，这块我直接用我的留言板做例子。 new page在blog根目录，执行下列命令： 1hexo new page messagepad 配置打开blog/source/messagepad/index.md，更改内容如下： 123456---title: 欢迎大家留言---&lt;img src=&quot;messagepad.png&quot; style=&quot;border:3px solid blue;width:100%&quot;/&gt;&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;28&quot; data-avatar-size=&quot;42&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt; 其实，在这个index.md文件中，就是用markdown语法去写html。 配置 &amp;&amp; 添加关键字其实这2步跟第三部分的指定分类列表页所做的操作一致。打开Next主题配置文件：blog/theme/next/_config.yml，搜索menu，新增对应的sidebar栏： 12menu: messagepad: /messagepad/ || sticky-note 打开文件：blog/themes/next/languages/zh-Hans.yml，添加对应的mapping： 12menu: messagepad: 留言板 重启server同样重启服务。 1hexo g &amp;&amp; hexo s 技巧打开blog/scaffolds/post.md文件，更改代码如下：12345678910title: Hexo新增tags、categories、自定义菜单栏页desc:date: 1540656979000updated: 1540656979000comments: falsecategories: - []tags: []keywords:top: false这样，在以后hexo new新建博文，模板自动生成，只需要添加对应的tags、categories即可]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo基础命令学习]]></title>
    <url>%2Farticles%2F39009%2F</url>
    <content type="text"><![CDATA[简介 昨天写了blog的初始化搭建(hexo + next)，乘胜追击，学习查看了一些hexo基础的命令，总结一下分享。 基于官方的手册，很基础，加了一些自己的见解。 预览 id name brief frequency 1 init 初始化 🌟 2 new 新建文章 🌟🌟🌟 3 generate 生产静态文件 🌟🌟🌟 4 publish 草稿发布 🌟 5 server 启动服务 🌟🌟 6 deploy 部署网站 🌟🌟 7 rende 渲染文件 🌟 8 clean 清除缓存 🌟 9 list 列出网站资料 🌟 10 version 显示 Hexo 版本 🌟 11 –debug debug模式 🌟🌟🌟 正文 init1$ hexo init [folder] 新建一个网站。folder文件夹已存在，会重新建里一个新的blog，主要用户初始化。 new 1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。一般情况有3种，page、post、draft generate 12$ hexo generate$ hexo g 生成静态文件，用于打包，第二行是简写。选项 描述-d, –deploy 文件生成后立即部署网站-w, –watch 监视文件变动 publish 12$ hexo publish [layout] &lt;filename&gt;$ hexo publish draft 常用语 发表草稿，就是通过hexo new draft建立的文章。 server 12$ hexo server$ hexo s 启动服务器。默认情况下，访问网址为： http://127.0.0.1:4000/。选项 描述-p, –port 重设端口-s, –static 只使用静态文件-l, –log 启动日记记录，使用覆盖记录格式 deploy 12$ hexo deploy$ hexo d 部署网站，第二行简写。 参数 描述-g, –generate 部署之前预先生成静态文件 render 1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述-o, –output 设置输出路径 migrate 1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容，还没用过。 clean 1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list 1$ hexo list &lt;type&gt; 列出网站资料，types：page，post，route，tag，category。 version 1$ hexo version 显示 Hexo 版本。 选项 安全模式1$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并提交调试信息到 GitHub。 简洁模式1$ hexo --silent 隐藏终端信息。 自定义配置文件的路径1$ hexo --config custom.yml 自定义配置文件的路径，执行后将不再使用 _config.yml。 显示草稿1$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD1$ hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。 个人建议 命令一1hexo server -p 8888 --debug --draft 以-p参数指定服务的端口启动，加上–debug模式，便与调试–draft 可以把草稿的文章也加载显示 命令二1hexo g -d 重新生产静态文件并上传github.io，刷新github的网站。 参考hexo官网]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blog常用markdown语法模板记录]]></title>
    <url>%2Farticles%2F57737%2F</url>
    <content type="text"><![CDATA[主要用于记录我写博文常用的markdown语句 持续更新中。。。。。。 三级标题四级标题特殊语 123 表格 id name Version 1 Os MacOS10.15.6 2 IDE PyCharm 效果 特殊语！！！Schemes 代码 1&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;***特殊语！！！***&lt;/font&gt; 超链接outage-常用复杂sql记录 配置文件123Hexo: blog/_config.ymlNext: blog/theme/next/_config.ymlmd template: blog/scaffolds/post.md 图片： 效果 代码 1&lt;img src=&quot;article_hadoop.jpg&quot; style=&quot;border:1.5px solid blue&quot; width=&quot;750&quot; alt=&quot;图片说明&quot;/&gt; linux常用md结构12345678910111213141516171819202122232425![](/images/article_linux_cd.png)&lt;div class=&quot;note warning&quot;&gt; &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;学习cd的用法【cd 目录】&lt;/p&gt; &lt;/div&gt;&lt;!--more--&gt;&lt;hr /&gt;### 介绍### 正文#### 格式#### 参数说明#### 常用命令### 说明### 补充### 学习]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next搭建属于自己的Blog]]></title>
    <url>%2Farticles%2F59864%2F</url>
    <content type="text"><![CDATA[简介 Hexo + Next + MarkDown 完美打造属于Blog，只属于你自己的哦！！！ FROM ZERO TO ALL 前言从GIS跳跃到Python开发之后，一直梦想着有自己的一个blog，前不久机缘巧合解决问题的时候，发现作者的blog网站正是我心中向往的那种样式。没错，就是Hexo + Next（footer有版权声明，易发现）。说搞就搞，折腾了好几天，终于实现了，虽然路程有点长，但是看着自己亲手搭建的blog，心中还是无比喜悦。既然有了属于自己的一片天地，那就将知识share出来。 环境 id name version remark 1 system MacOs 系统版本 正文三步走。 一步：hexo安装首先查看自己电脑是否安装nodejs、git，如果已经安装请忽略nodejs、git的安装步骤，查看方式（控制台）：123node -v 查看nodejs版本which git 查看环境变量是否有无git命令which brew 查看机子是否含有brew命令 brew 简述：MacOs开发必备工具，类似于pip等。 功能：Mac软件管理工具。 安装：1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; nodejs 简述：安装nodejs（nodejs不了解的可以去百度一下，哈哈），安装完nodejs，npm会随nodejs一起安装。 功能：npm包管理工具。 安装：1brew install node git 简述：安装git工具，主要用户项目的发布、管理等。 功能：项目管理工具。 安装1brew install git hexo 简述：Hexo是一个快速、简洁且高效的博客框架，基于nodejs运行，利用Markdown解析文章。 功能：博客框架。 安装1npm install -g hexo-cli 二步：启动server 新建myblog文件夹 在指定文件夹中执行初始化命令，命令会根据传的参数进行初始化工作。12cd ~/github/mybloghexo init PyGo 生产静态文件 生产web网站的静态网页。1hexo g 启动server服务 启动server。1hexo s 浏览器中访问 http://localhost:4000/ ，就可以看到基于Hexo的默认主题的原型。 三步：更换主题Next 下载主题 在blog目录，执行以下命令下载Next源文件。1git clone https://github.com/iissnan/hexo-theme-next themes/next 更改配置 下载完成后，打开blog目录下的_config.yml文件，搜索关键：theme，更改代码如下：1theme: next 重启服务停止服务（ctrl+c），重新开启服务，刷新页面。 链接 Hexo官网：https://hexo.io/zh-cn/docs/index.html 主题地址：https://hexo.io/themes/ Next官方：https://theme-next.org/ 在hexo主题官方地址有很多theme，根据自己的喜欢选取，个人觉得Next主题比较整洁，黑白色style上比较简单。 注意在 Hexo &amp;&amp; Next 的配置和设置文件中，一定要保留一个英文空格，没留空格会导致出问题。 感谢感谢Hexo开发者，感谢Next主题开发者，让我拥有了自己第一个Blog。 希望自己可以在技术上继续走下去，为自己打CALL，后续也会继续写出Hexo命令的使用教程以及Next优化，欢迎大家Share。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python实现微信小机器人]]></title>
    <url>%2Farticles%2F12618%2F</url>
    <content type="text"><![CDATA[微信 Python实战 图灵机器人 自动化脚本 背景 其实做这个微信小机器人的动机不纯，请勿见怪，也许我是一位假的程序猿😄。 某天，我犯了我并不知道的错误，惹生气了女票，并且长达24h没有理我。我一看不行啊，总不能上班时间总一直抱着微信说话吧，而且最近微信小机器人貌似蛮火的，我也跟风，搞一搞。 技术架构python + itchat + 图灵机器人 准备材料 id name Function 1 Mac电脑 开发 2 手机 3 微信号 微信 4 网络 电脑、手机使用 正文首先，先实现微信的登录、接受消息、发送消息等基本功能。只有先实现了最基础的发消息功能，才可以做出自动回复的小机器人，接下来一步步去实现。文章中主要用到了itchat这个包，官方有简单的case。 登录我自己封装了一个运行的主方法，加了一些是否开启特殊人处理、bug日志处理的参数，enableCmdQR开启二维码登录。登录之后发现我的PC端微信被挤掉了。。。12345678910111213def run(is_unique=False, is_debug=False): &quot;&quot;&quot; main method enter :param is_unique: is or not unique :param is_debug: is or not debug :return: None &quot;&quot;&quot; init_work() global IS_UNIQUE, IS_DEBUG IS_UNIQUE = is_unique IS_DEBUG = is_debug itchat.auto_login(hotReload=True, enableCmdQR=2) itchat.run(True) 针对于init_work()这个方法，做了一个文件夹初始化的方法，用来记录日志、聊天信息。1234567891011121314151617181920def init_work(): &quot;&quot;&quot; initialize the chat user time file :return: None &quot;&quot;&quot; user_file = get_default_refile() if os.path.exists(user_file) and os.path.isfile(user_file): return open(user_file, &apos;a&apos;).close() print &apos;init work of record user chat file is ok&apos;def get_default_refile(): &quot;&quot;&quot; default record file :return: file &quot;&quot;&quot; cur_path = os.path.abspath(os.path.dirname(os.path.abspath(__file__))) user_file = cur_path + &apos;/record_user.log&apos; return user_file 个人消息注册各类型的消息，通过下列代码，微信可以接收、发送私聊的消息。itchat暂时支持接口TEXT, MAP, CARD, NOTE, SHARING, PICTURE这几种类型，因为用itacht是登录网页版微信进行操作，所以微信网页版支持这几种消息。123456789@itchat.msg_register([TEXT, MAP, CARD, NOTE, SHARING, PICTURE])def handler_text_msg(msg): &quot;&quot;&quot; auto reply messages [text, map, card, note, sharing] by friend or group :param msg: wx message (dict) :return: text message &quot;&quot;&quot; print msg.get(&apos;Type&apos;) print json.dumps(msg) 参数msg是消息体，可以打印出来，是个标准的json，可以解析，举个最简单的例子，消息体自己慢慢看，我就说几种重要的。 1234 &quot;ToUserName&quot;: 接受人微信ID, &quot;FromUserName&quot;: 发送人微信ID,&quot;Content&quot;: 微信内容&quot;Type&quot;: 微信消息类型 发送消息1itchat.send(rely_msg_text, toUserName=form_user_name) rely_msg_text：消息内容toUserName：接受人ID，就是上面消息题解析的 群消息群消息也是一样，通过注册进行获取，但是获取全部的群消息太多了，我只选取了几个群进行消息监听。群消息体json在这里不做展示，几乎与chat消息体内容差不多，代码如下：1234567891011121314@itchat.msg_register([TEXT, SHARING, SYSTEM], isGroupChat=True)def group_text_reply(msg): print json.dumps(msg) print &apos;%s: %s&apos; % (msg.get(&apos;ActualNickName&apos;), msg.get(&apos;Text&apos;)) monitor_chats = [ # u&apos;家族群&apos;, u&apos;宝龙山&amp;amp;保康！.宝龙山&amp;amp;保康&apos;, u&apos;媳妇私房钱&apos; ] chat_id_list = list() for chat in monitor_chats: if not chat: continue 群消息类型不像chat那样类型那么多，只有几种。 注册图灵 登录&amp;&amp;注册官网：http://www.tuling123.com/member/robot/index.jhtml 创建 设置 apikey 小机器人注册好小机器人之后，只需要查看api教程进行http请求即可，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344def reply_by_ai(msg): &quot;&quot;&quot; auto reply by ai robot :param msg: message body by wx friend :return: send message &quot;&quot;&quot; user_name = msg.get(&apos;FromUserName&apos;) msg_type = msg.get(&apos;Type&apos;) msg_text = msg.get(&apos;Text&apos;) API_ROBOT_URL = &apos;http://openapi.tuling123.com/openapi/api/v2&apos; API_KEY = &apos;65d96c7612e14a3ba8c6d43fa7a84111&apos; USER_ID = &apos;113972&apos; payload = &#123; &quot;reqType&quot;: 0, &quot;perception&quot;: &#123; &quot;inputText&quot;: &#123; &quot;text&quot;: msg_text &#125; &#125;, &quot;userInfo&quot;: &#123; &quot;apiKey&quot;: API_KEY, &quot;userId&quot;: USER_ID &#125; &#125; payload = json.dumps(payload) headers = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125; resp = requests.post(url=API_ROBOT_URL, headers=headers, data=payload) try: resp_json = resp.json() code = resp_json.get(&apos;intent&apos;).get(&apos;code&apos;) if resp.status_code == 200 and code &gt;= 10000: result = resp_json.get(&apos;results&apos;)[0] rely_msg_text = result.get(&apos;values&apos;).get(&apos;text&apos;) else: rely_msg_text = &quot;小6好像出问题了, 正在通知主人回来抢修&quot; except: rely_msg_text = &quot;小6没有找到答案😭😭😭, 尝试换个话题吧&quot; finally: return rely_msg_text 温馨提示 微信消息不要连续发，会被腾讯禁止一段时间内不能发消息 总结总的来说，实现起来并不难，喜欢记录的同学后续可以打算把消息存到自己的DB里去。没事就喜欢捣鼓捣鼓，只有真的去搞了，才能亲身体验其中的奥秘～代码带来的快乐。 学习资料ITCHAT(py官方)：https://pypi.org/project/itchat/ITCHAT(中文)：https://itchat.readthedocs.io/zh/latest/图灵API：https://www.kancloud.cn/turing/www-tuling123-com/718229 github我把项目上传到了github，有喜欢的同学下载看看，可直接运行。 微信小机器人：https://github.com/GIS90/itchatmy]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加班版耳机【图】]]></title>
    <url>%2Farticles%2F45934%2F</url>
    <content type="text"><![CDATA[看图笑话 程序猿加班必备神器。]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>看图笑话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[席梦思【文】]]></title>
    <url>%2Farticles%2F18602%2F</url>
    <content type="text"><![CDATA[纯文笑话 突然想起了初中的一起糗事，说出来跟大家分享一下。记得还是语文课，我特困就趴在桌子上睡觉，当时桌子前面还有两摞厚厚的书挡着，可能是机智的老师发现了我在睡觉，突然叫我起来背课文，我被我同桌捅鼓起来，眼睛还是半睁状态，老师又说：要不我给你半个席梦思放在这，我逗比的回了一句：我又不洗头，给我那个干嘛，永远忘不了班级同学的笑声。。。😭😭😭]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>纯文笑话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python制作天气数据api]]></title>
    <url>%2Farticles%2F53966%2F</url>
    <content type="text"><![CDATA[Python实战 天气API 爬虫系列 简介还再找免费的天气API接口吗，这里给你答案 开发语言：python 技术方案：requests + sqlalchemy 感谢python，（数据源：官方中国天气网http://www.weather.com.cn） 正文​​​偶然工作中用到了天气状况数据，后来就不需要了，但还是想做一个天气的，因为想给自己的女票做个天气短信提醒。说搞就搞，第一想法就是apistore，上去了之后，好贵。。。。。。百度一了一下，全都不好用，决定自己写一个，自己动手丰衣足食嘛。再百度天气，中国天气网是第一条，还是官方的，说明应该不错，点进去之后，看了数据，需求基本满足了，那么，走起。 查询数据源google打开天气网，搜了下北京天气，alt+cmd+i打开调试模式（mac快快捷键），network查看数据来源。经过分析，基本可以确定数据主要来源于2个接口：http://d1.weather.com.cn/dingzhi/101010100.html?_=1537709265753 （地之一）和http://d1.weather.com.cn/sk_2d/101010100.html?_=1537709265752 （地址二），多打开了几个别的城市进行查看，最后结论：101010100参数一城市的id值，1537709265753参数二时间戳（毫秒级）。 获取城市id在官网反反复复尝试获取城市的数据，发个城市id有几个规律： 城市id由9位数字组成(可能大家觉得感觉有点废话了，别急往后看)，例如：北京101010100。 城市id的第三位，第四位是表示省份（免费普及一下：中国34个省级行政区域，包括23个省，5个自治区，4个直辖市，2个特别行政区），01-北京，02-上海，03-天津，04-重庆。。。34-台湾。 后三位尾数，针对于直辖市，尾数从000开始计数，非直辖市尾数从001开始计数。 天气网数据细到乡镇，街道。乡镇的id：101080503(cityid) + xxx(数字，001开始)，12位组成；街道数据过于细致，没必要获取，而且本人能力有限，只初始化了到城市级别的的数据。 额外赠送：中国每个省份的城市最大值位21，代码中会用到。 知道规律，也了解了request url，response，就可以搞定城市id的数据源了。解决方法如下： 语言：python 思想：依据id的范围生成范围id，requests去get请求，获取结果 要点：省份的标志位01～04位直辖市，05～34非直辖市，城市的标志位01～23即可；header必须含有Referer值，应该用来做一个访问标识response返回值类型是string，但是weatherinfo的信息为json，需转化。不多说，直接上代码： 数据入库数据库决定直接用sqlite，主要考虑到数据库的可移植性，git项目直接运行就可以，不用额外配置数据库，而且单张表，数据量不会很大，性能没有太高要求。python + requests + sqlalchemy + db，玩py的不知道sqlalchemy&amp;&amp;requests，自己赶快恶补一下吧。。。废话也不多说，git项目看db.py文件，创建表以及数据库见下图：城市id获取的整理流程设计ok，执行python citys.py就可以见证奇迹。不过，这个奇迹有点慢而已，我的本大概执行了30个小时左右，后来想的是python配合多进程（GIL机制，不要使用多线程）来提速，搞了个pool在那，不过我把多进程注释了，有兴趣的人可以去试下多进程。 api接口服务做web服务，flask是不错的选择，简单易用，性能也不差。用blueprint做了个weather的接口，但是信息由地址一与地址二组成，地址一主要用来获取最高/最低温度，地址二获取实时的天气相关信息，请求的地址参数均由第三步回去的城市id以及时间戳。 requests基础：http://docs.python-requests.org/zh_CN/latest/user/quickstart.html 请求的时候，我把浏览器正常访问的header都记录，请求成功，把结果封装json返回。在controller那，我对请求方式，请求参数做了限制，加强接口的严谨性。详细自己看代码，post请求的参数那块，args，form，json，get_json分不清的，请自行百度，我做了个小技巧： 测试这里介绍2种测试方式，postman + curl。 curl：curl -X POST http://127.0.0.1:8888/weather/ -H ‘Content-Type: application/json’ -d ‘{“city”: “昌平”}’ | python -m json.tool postman：图形化界面。。。自己点把 没有curl命令的，自己搞下，做开发的话，不知道curl，会很low的，看下结果，完美： 总结代码很简单，不过在获取数据源id上花费了一些时间，后来一想，城市id的表有个问题，表有：id，cityname，cityid 3个字段，没有记录省份，查询同名的城市可能会有问题，后续在改吧。。。就先到这里了，我是程序猿，python程序猿。 二期功能：定时任务 + 短信提醒 + 邮件报警 项目git地址：https://github.com/GIS90/weathers]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加强版小黄车【图】]]></title>
    <url>%2Farticles%2F36812%2F</url>
    <content type="text"><![CDATA[看图笑话 想必是个技术不错的手艺人。]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>看图笑话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Postgresql的导表]]></title>
    <url>%2Farticles%2F9742%2F</url>
    <content type="text"><![CDATA[Postgresql psql 导表 背景 前面已经介绍了常用的备份与恢复了，接下来介绍一下导表。 正文很多情况，会有把数据导出的需求，轻重缓急总会有特别紧急的情况，但是又不是专业干db的人，还是记录下来，以防不时之需。 针对于导表，个人总结了主要有2种方案，方案主要针对于服务器使用，具体能用Navicat等客户端能直连数据库的用户不用看了。 客户端 1psql --dbname=my_db_name --host=db_host_ip --username=my_username -c &quot;COPY (select id as COL_ID, name as COL_NAME from my_tab order by id) TO PATH with csv header&quot; 服务器 1COPY (select id as ID, description as TNAME from my_table order by id) to ‘path’ with csv header;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Postgresql的备份与恢复]]></title>
    <url>%2Farticles%2F17366%2F</url>
    <content type="text"><![CDATA[Postgresql pg_dump 备份 恢复 迁移 背景 身为一枚主要做后端的程序员，跟数据库打交道是必不可少的，虽然数据库由专门的dba进行负责，技多不压身。于是，把日常对postgresql数据库的日常操作比较频繁的进行记录下来，一是自己找的时候方便，另外也与大家做个分享交流。 命令介绍除去写相关的sql工作，工作上用到比较多的就是数据库的备份与恢复、导表，今天先介绍一下数据库的备份与恢复。pg_dump是一个用于备份的命令工具，即使当前数据库正在使用，也能够生成一致性的备份文件，生成sql文件或其他格式文件，且不会阻塞其他用户访问数据库(包括读、写)，下面就详细介绍一下pg_dump。 pg_dump详解执行pg_dump –help，英文内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576$ pg_dump --helppg_dump dumps a database as a text file or to other formats.Usage: pg_dump [OPTION]... [DBNAME]General options: -f, --file=FILENAME output file or directory name -F, --format=c|d|t|p output file format (custom, directory, tar, plain text (default)) -j, --jobs=NUM use this many parallel jobs to dump -v, --verbose verbose mode -V, --version output version information, then exit -Z, --compress=0-9 compression level for compressed formats --lock-wait-timeout=TIMEOUT fail after waiting TIMEOUT for a table lock --no-sync do not wait for changes to be written safely to disk -?, --help show this help, then exitOptions controlling the output content: -a, --data-only dump only the data, not the schema -b, --blobs include large objects in dump -B, --no-blobs exclude large objects in dump -c, --clean clean (drop) database objects before recreating -C, --create include commands to create database in dump -E, --encoding=ENCODING dump the data in encoding ENCODING -n, --schema=SCHEMA dump the named schema(s) only -N, --exclude-schema=SCHEMA do NOT dump the named schema(s) -o, --oids include OIDs in dump -O, --no-owner skip restoration of object ownership in plain-text format -s, --schema-only dump only the schema, no data -S, --superuser=NAME superuser user name to use in plain-text format -t, --table=TABLE dump the named table(s) only -T, --exclude-table=TABLE do NOT dump the named table(s) -x, --no-privileges do not dump privileges (grant/revoke) --binary-upgrade for use by upgrade utilities only --column-inserts dump data as INSERT commands with column names --disable-dollar-quoting disable dollar quoting, use SQL standard quoting --disable-triggers disable triggers during data-only restore --enable-row-security enable row security (dump only content user has access to) --exclude-table-data=TABLE do NOT dump data for the named table(s) --if-exists use IF EXISTS when dropping objects --inserts dump data as INSERT commands, rather than COPY --load-via-partition-root load partitions via the root table --no-comments do not dump comments --no-publications do not dump publications --no-security-labels do not dump security label assignments --no-subscriptions do not dump subscriptions --no-synchronized-snapshots do not use synchronized snapshots in parallel jobs --no-tablespaces do not dump tablespace assignments --no-unlogged-table-data do not dump unlogged table data --quote-all-identifiers quote all identifiers, even if not key words --section=SECTION dump named section (pre-data, data, or post-data) --serializable-deferrable wait until the dump can run without anomalies --snapshot=SNAPSHOT use given snapshot for the dump --strict-names require table and/or schema include patterns to match at least one entity each --use-set-session-authorization use SET SESSION AUTHORIZATION commands instead of ALTER OWNER commands to set ownershipConnection options: -d, --dbname=DBNAME database to dump -h, --host=HOSTNAME database server host or socket directory -p, --port=PORT database server port number -U, --username=NAME connect as specified database user -w, --no-password never prompt for password -W, --password force password prompt (should happen automatically) --role=ROLENAME do SET ROLE before dumpIf no database name is supplied, then the PGDATABASE environmentvariable value is used.Report bugs to &lt;pgsql-bugs@postgresql.org&gt;. 参数解析 这里介绍一下高频&amp;&amp;常用的参数说明，如果想深挖，建议查看官网进行查看，文章最后会给出官网链接。 -f 输出文件或目录名 -F &amp;&amp; –format=c|d|t|p 输出文件格式 (定制、目录、tar)、明文 (默认值)) -j, –jobs=NUM 多任务并行 -Z, –compress=0-9 被压缩格式的压缩级别 -a, –data-only 只转储数据,不包括模式 -c, –clean 在重新创建之前，先删除数据库对象，默认这个参数是False，如果不进行删除，可以使用drop进行手动删除已存在的数据库 -C, –create 备份文件中有create database数据库的sql语句，默认是进行create -E, –encoding=ENCODING 转储以ENCODING形式编码的数据，默认是数据库编码，不常用 -s, –schema-only 只备份数据库策略, 不包括数据 -t, –table=TABLE 只备份指定数据库指定名称的表 –inserts 以inserts命令，而不是copy命令的形式转储数据，pg_dump默认是copy模式 –column-inserts 以带有列名的INSERT命令形式转储数据 -T, –exclude-table=TABLE 备份的数据中将排除指定名称的表 –exclude-table-data=TABLE 不转储指定名称的表中的数据 –if-exists 当删除对象时使用IF EXISTS，这个会安全一点，但是时间会延长，不建议使用 联接选项 数据库连接参数是必填参数，参数与psql一致。 -d, –dbname=DBNAME 数据库 -h, –host=主机名 数据库服务器的主机名或IP -p, –port=端口号 数据库的端口号，默认5432 -U, –username=名字 用户名 -w, –no-password 永远不提示输入口令 -W, –password 强制口令提示 (自动) 备份登陆数据库服务器／远程连接的服务器，使用命令pg_dump，具体参数请查看上面相关详细介绍，下面列出几种常见的情景： data + schema 导出整个指定的数据库。 pg_dump -h XXXX -p XXXX -U XXXX 数据库名称 &gt; ~/数据库.sql pg_dump -h XXXX -p XXXX -U XXXX -d XXXX -F t &gt; /home/q/XXXX.tar schema 导出整个指定数据库的策略。 pg_dump -h XXXX -p XXXX -U XXXX -s 数据库名称 &gt; ~/数据库.sql data 导出整个指定数据库的表数据。 pg_dump -h XXXX -p XXXX -U XXXX -a 数据库名称 &gt; ~/数据库.sql table 导出整个指定数据库的指定表。 pg_dump -h XXXX -p XXXX -U XXXX -t 表名 数据库名称 &gt; ~/表.sql exclude table 导出整个指定数据库的指定表，并排除掉指定的表。 pg_dump -h XXXX -p XXXX -U XXXX -T 数据库名称 &gt; ~/数据库.sql pg_dump -h XXXX -p XXXX -U XXXX –exclude-table-data 表名 数据库名称 &gt; ~/数据库.sql 迁移数据在这里介绍3种传输方式： python -m SimpleHTTPServer 8888 scp nc 命令的具体不做详细介绍。 恢复 切换用户登陆到需要进行恢复的数据库服务器，切换postgres用户： 12sudo -isu postgres psql执行psql，进行客户端。新建数据库专属用户create user 用户名 with password ‘密码’;新建数据库create database 数据库名 owner 用户名;分配权限grant all privileges on database 数据库 to 用户;退出psql，执行：psql 数据库名 &lt;数据库.sql加访问权限，执行vim pg_hba.conf 加入：host 数据库 用户 all md5 恢复psql -U XXXX -d XXXX -f XXXX.sql 问题集 1 数据库无hstore数据类型解决：create extension hstore;Select pg_terminate_backend(pid) from pg_stat_activity where datname = ‘数据库名称’2 aborting because of server version mismatch服务端 &amp; 客户端 版本不一致导致。解决：方案一降级服务端pg版本 &lt;= 客户端卸载old版本，更新新版本 &gt;= 服务端版本方案二版本共存1.sudo yumdownloader postgresql2.yum install perl-ExtUtils-Embed3.sudo yum install uuid4.sudo yum install libxslt5.rpm -ivh postgresql rpm包6.在 /export 软连接/home/q/export下建一个目录 pg100_data ，用户和组都给 postgres7./opt/pg10/bin/pg_ctl -D /export/pg100_data initdb8.postgresql.conf 复制到 /export/pg100_data 目录中9./opt/pg10/bin/pg_ctl -D /export/pg100_data start 学习参考pg_dump官网：https://www.postgresql.org/docs/9.2/app-pgdump.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序猿七夕-心心相印]]></title>
    <url>%2Farticles%2F31296%2F</url>
    <content type="text"><![CDATA[python带你过七夕，让程序猿的七夕不再无趣^_^。 Python 实例 七夕程序 turtle 一提到程序猿，大家的映象是这样 这样 或者这样 其实，标配是这样 哈哈，很搞笑是不，我们是程序猿，时代电子技术的领导者，怎么可能那么low呢。言归正传，程序猿也是懂浪漫的，马上七夕了，用一副漫画心心相印程序猿专有方式来陪你们过七夕，拿走不谢。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165# -*- coding: utf-8 -*-&quot;&quot;&quot;------------------------------------------------describe:usage:base_info: __version__ = &quot;v.10&quot; __author__ = &quot;mingliang.gao&quot; __time__ = &quot;2018/8/13&quot; __mail__ = &quot;mingliang.gao@qunar.com&quot;------------------------------------------------&quot;&quot;&quot;import timeimport turtlefrom turtle import *def write_zi(x, y, content, font_type=&apos;Comic Sans MS&apos;, font_size=30, font_normal=&apos;normal&apos;): penup() goto(x, y) pendown() write(content, align=&quot;left&quot;, font=(font_type, font_size, font_normal))def pen_config(size=2, color=&apos;black&apos;, speed=&apos;slow&apos;): # 画笔宽度 turtle.pensize(size) # 画笔颜色 turtle.pencolor(color) # 画笔速度 0-10 turtle.speed(speed)def locinit_config(): # 设置框位置 turtle.setup(width=1400, height=900, startx=0, starty=200) # turtle.screensize(bg=&apos;navajowhite&apos;) turtle.screensize(bg=&apos;papayawhip&apos;)# 第一个心def one_heart(): color(&apos;deeppink&apos;, &apos;red&apos;) penup() goto(120, -20) begin_fill() pendown() left(45) fd(240) circle(100, 225) seth(90) circle(100, 225) fd(240) end_fill()# 第二个心def two_heart(): color(&apos;orange&apos;, &apos;yellow&apos;) penup() goto(-40, -80) pendown() begin_fill() left(90) fd(240) circle(100, 225) seth(90) circle(100, 225) fd(240) end_fill()# 箭def arrow(): # bing penup() goto(-410, 0) pendown() goto(-100, 60) penup() goto(255, 110) pendown() goto(540, 160) # tou penup() goto(440, 190) pendown() goto(540, 160) penup() goto(430, 100) pendown() goto(540, 160)# 诗题def shi_title(): write_zi(200, -100, &quot;爱&quot;, font_size=42) write_zi(260, -100, &quot;你&quot;, font_size=42) write_zi(320, -100, &quot;一&quot;, font_size=42) write_zi(380, -100, &quot;生&quot;, font_size=42) write_zi(440, -100, &quot;十&quot;, font_size=42) write_zi(500, -100, &quot;世&quot;, font_size=42)# 诗def shi(): &quot;&quot;&quot; 一半飘零一半安， 生逢盛世缘相遇， 十年修得同船渡， 世世生生武雅楠 &quot;&quot;&quot; # 1 write_zi(260, -160, &quot;一&quot;) write_zi(260, -200, &quot;半&quot;) write_zi(260, -240, &quot;飘&quot;) write_zi(260, -280, &quot;零&quot;) write_zi(260, -320, &quot;一&quot;) write_zi(260, -360, &quot;半&quot;) write_zi(260, -400, &quot;安&quot;) # 2 write_zi(330, -160, &quot;生&quot;) write_zi(330, -200, &quot;逢&quot;) write_zi(330, -240, &quot;盛&quot;) write_zi(330, -280, &quot;世&quot;) write_zi(330, -320, &quot;缘&quot;) write_zi(330, -360, &quot;相&quot;) write_zi(330, -400, &quot;遇&quot;) # 3470 write_zi(400, -160, &quot;十&quot;) write_zi(400, -200, &quot;年&quot;) write_zi(400, -240, &quot;修&quot;) write_zi(400, -280, &quot;得&quot;) write_zi(400, -320, &quot;同&quot;) write_zi(400, -360, &quot;船&quot;) write_zi(400, -400, &quot;渡&quot;) # 4 write_zi(470, -160, &quot;世&quot;) write_zi(470, -200, &quot;世&quot;) write_zi(470, -240, &quot;生&quot;) write_zi(470, -280, &quot;生&quot;) write_zi(470, -320, &quot;武&quot;) write_zi(470, -360, &quot;雅&quot;) write_zi(470, -400, &quot;楠&quot;)if __name__ == &apos;__main__&apos;: time.sleep(2) locinit_config() pen_config(size=8, speed=&apos;fast&apos;) one_heart() pen_config(size=8, speed=&apos;fast&apos;) two_heart() pen_config(size=12, color=&apos;black&apos;, speed=&apos;normal&apos;) arrow() pen_config(size=3, color=&apos;red&apos;, speed=&apos;normal&apos;) shi_title() pen_config(size=3, color=&apos;dodgerblue&apos;, speed=&apos;fast&apos;) shi() time.sleep(5) 备注 绘画顺序：心-&gt;心-&gt;箭-&gt;诗 pen_config 画笔设置，在这个方法可以切换绘画过程中的画笔颜色以及绘画的速度 shi 为七言绝句，如果想改其他，记得调整位置]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LDAP-ERROR:DSID-03150F01]]></title>
    <url>%2Farticles%2F39125%2F</url>
    <content type="text"><![CDATA[问题描述：1234567&#123; &apos;info&apos;: &apos;000021B1: SvcErr: DSID-03150F01, problem 5005 (UNABLE_TO_PROCEED), data 0\n&apos;, &apos;desc&apos;: &apos;Operations error&apos;&#125; 在负责的项目中，有个跟LDAP打交道的，其中有个任务就是把人添加到指定的CN下。某天hr来找，说群发的邮件部分人没有收到。于是找到这个任务脚本，打开查看日志，居然报上面的错误。第一思维先google了一下，发现这个错误的少之又少，并且查看后没有解决方案。 解决方案查看日志，发现这个错误有一个月之前就有了。但是这个任务在beta环境还是正常执行的，于是比对线上与beta环境的不同之处，任务代码一模一样，LDAP环境也保持一致。执行的发现把员工加到执行CN下的员工数不一样。于是把线上获取的数据量改小了一些，正常了。那么问题就定位到数据大小的问题决定着错误，说明错误指向了LDAP服务器，但是线上与beta的DLAP环境，配置是一样的啊。把线上的数据源数据同步到beta环境，执行beta环境的任务脚本，一样的错误。。。一样，哈哈那就确定了，是LDAP上的问题，去官方查询相关的信息。果然有一些配置有决定性的作用，打开注册表编辑器，创建以下路径键值&amp;数值： [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NTDS\Parameters] &quot;Maximum Audit Queue Size&quot;=dword:000088b8 建议遇到问题莫慌，最重要的是找到问题根源，只要找到问题的根源，才是解决问题的王道！！！]]></content>
      <categories>
        <category>LDAP</category>
      </categories>
      <tags>
        <tag>ERROR集</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初学atom]]></title>
    <url>%2Farticles%2F9420%2F</url>
    <content type="text"><![CDATA[ATOM 日常开发中习惯了pycharm，但是平常记录点什么东西，最好要有一个自己的文本编译器，比如：sublime、vscode、notepad等等。下面介绍一下我用的atom，安装以及其他的设置我不做介绍了，网上教程一大推，主要介绍一下我用的几个插件：查看安装的包【apm list】 常用快捷键 快捷键 功能 级别 shift+command+p 功能查找命令行 🌟🌟🌟 shift+command+o 打开目录 🌟🌟🌟 command+, 配置 🌟🌟🌟 shift+commadn+d 复制当前行到下一行 🌟🌟🌟 shift+control+k 删除光标所在当前行 🌟🌟🌟 command+\ 显示或隐藏目录树 🌟🌟 ctrl-0 目录树与文本编辑区切换（切换到目录树：a新增【add】m修改【modify】delete删除） 🌟🌟🌟 alt+left 单词开始 🌟🌟 alt+right 单词结束 🌟🌟 command+left 行开始 🌟🌟🌟 command+right 行结束 🌟🌟🌟 command+up 文件开始 🌟🌟 command+down 文件结束 🌟🌟 command-b 打开文件之间的切换 🌟🌟 command-t 目录文件之间的切换 🌟🌟 command-r 查找与替换 🌟🌟🌟 shift+command+r 项目查找与替换 🌟🌟🌟 command+/ 注释 🌟🌟🌟 基础插件 activate-power-mode【功能】: 敲代码炫酷效果【快捷键】: 无【简述】: 怎么说呢，这个插件对于实际开发没有卵用，but可以装B，足以。 atom-beautify【功能】: 格式化当前文件【快捷键】: control + option + b【简述】: 可以格式化当前文件，前提是这个文件可以被识别，如果你的文件不带后缀直接去格式化，会warning，建议保存完文件在进行格式化。直接快捷键control + option + b格式化，插件会自动识别，记不得快捷键格式化可以先shift + command + p调出命令行查找，在入beautify editor，也可以直接输入beautify + 计算机语言【例如：python】，确认既可以。 autocomplete-paths【功能】: 补全路径【快捷键】: 无【简述】: 在写代码时候，有时需要写文件路径，装上此插件，会自动完善文件路径，不过相信没有几个真正上线的project会写死文件路径吧。 autocomplete-python【功能】: python补全【快捷键】: 无【简述】: 不多说，python开发者必备，前提是你在.py文件中进行。 autosave【功能】: 自动保存【快捷键】: 无【简介】: 如果你是个懒人，跟我一样，最好安装这个插件。 file-icons【功能】: 文件类型icon【快捷键】: 无【简介】: 左侧目录文件类型icon显示。 highlight-selected【功能】: 高亮选中【快捷键】: 无【简介】: 高亮选中字符，同时所有相同字符高亮。 hyperclick【功能】: 方法跳转【快捷键】: command + click左键【简介】: 用于方法跳转，用完之后，暂时我不知道怎么跳转回去，有知道的可以留言进行交流。 minimap &amp;&amp; minimap-highlight-selected【功能】: minimap显示【快捷键】: 无【简介】: 以一个minimap进行显示当前的文件内容，方便进行拖拽，加minimap-highlight-selected插件，方便你在选中一个之后在minimap中进行查看，位置可以配置。 platformio-ide-terminal【功能】: terminal工具【快捷键】: 新建：shift + command + T; 关闭：shift + command + X; 前一个：shift + command + J; 后一个：shift + command + K【简介】: 方便控制台直接在atom中使用，省去切换。如果忘记快捷键，还是建议shift + command + p进行关键字terminal搜索，一目了然。 project-manager【功能】: project存储【快捷键】: add: shift + command + O;list：control + command + p【简介】: 新open一个atom是不记录上次的文件的，引用插件可以把project进行存储，每次方便进行打开。还是那句话，如果忘记快捷键，还是议shift + command + p进行关键字project搜索，一目了然。 script【功能】: 脚本执行【快捷键】: 执行：command + i; 关闭问题view：control + w; 选中执行: shift command + i【简介】: 如果因为atom不能直接执行你写的脚本发愁，那么这个插件就完美的解决你的问题。当然还有一个其他的解决办法就是shift + command + t调用terminal去执行。显示还是command + i方便，哈哈。 markdown【功能】: markdown编辑【快捷键】: shift + control + m 显示md效果【简介】:markdown-image-paste 图片处理markdown-preview-plus 预览效果markdown-scroll-sync 同步滚动markdown-table-editor 表格处理 学习快捷键大全：https://www.jianshu.com/p/e33f864981bb 建议atom可以集成git插件，以及flake8，但是我觉得还是这2个命令还是在item2上去敲，这2个命令必须得日常所用，敲得多熟悉的也就越深，玩python的人，当然是linux的基础命令都得熟悉。]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>IDE</tag>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python之pip包管理]]></title>
    <url>%2Farticles%2F22308%2F</url>
    <content type="text"><![CDATA[简介 12pip is the package installer for Python.You can use pip to install packages from the Python Package Index and other indexes.官网说明：pip是Python包管理工具，主要用于包的查找、下载、安装、卸载的功能。当前版本：V19.3.1 PIP 安装本人主要使用MacOX、Centos7系统，关于安装，这里介绍2种方式。 curl 12345# 下载安装脚本curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py# 运行安装脚本sudo python get-pip.py easy_install 1easy_install pip 参数说明12345678910111213141516171819202122232425262728293031323334353637383940[root@bash ~]# pip --helpUsage: pip &lt;command&gt; [options]Commands: install Install packages. download Download packages. uninstall Uninstall packages. freeze Output installed packages in requirements format. list List installed packages. show Show information about installed packages. check Verify installed packages have compatible dependencies. config Manage local and global configuration. search Search PyPI for packages. wheel Build wheels from your requirements. hash Compute hashes of package archives. completion A helper command used for command completion. debug Show information useful for debugging. help Show help for commands.General Options: -h, --help Show help. --isolated Run pip in an isolated mode, ignoring environment variables and user configuration. -v, --verbose Give more output. Option is additive, and can be used up to 3 times. -V, --version Show version and exit. -q, --quiet Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING, ERROR, and CRITICAL logging levels). --log &lt;path&gt; Path to a verbose appending log. --proxy &lt;proxy&gt; Specify a proxy in the form [user:passwd@]proxy.server:port. --retries &lt;retries&gt; Maximum number of retries each connection should attempt (default 3 times). --timeout &lt;sec&gt; Set the socket timeout (default 90.0 seconds). --exists-action &lt;action&gt; Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort. --trusted-host &lt;hostname&gt; Mark this host as trusted, even though it does not have valid or any HTTPS. --cert &lt;path&gt; Path to alternate CA bundle. --client-cert &lt;path&gt; Path to SSL client certificate, a single file containing the private key and the certificate in PEM format. --cache-dir &lt;dir&gt; Store the cache data in &lt;dir&gt;. --no-cache-dir Disable the cache. --disable-pip-version-check Don&apos;t periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index. --no-color Suppress colored output 参数说明略，在下面有具体使用。 基础使用基于上面的详细参数，列举一下常用的命令。 安装包 基础安装 使用此命令，默认安装源的最新版本。1pip install numpy 安装指定版本 1pip install numpy==1.14.0 大于指定版本 1pip install numpy&gt;=1.14.0 requirements文件安装 requirements.txt为指定的路径文件。1pip install -r requirements.txt 卸载1pip uninstall numpy 升级包直接升级指定的包。 123pip install -U numpypip install --upgrade numpy 查看已安装的包 包==版本 执行这个命令，可以获取项目能run的包相关信息，把这些信息直接写到requirements.txt文件，方便项目迁移以及在其他环境运行。12345678910[root@bash ~]# pip freezealembic==0.9.9altgraph==0.10.2amqp==2.2.2aniso8601==1.2.1anyjson==0.3.3appnope==0.1.0asn1crypto==0.24.0aspy.yaml==1.1.1 包 版本 123456789101112[root@bash ~]# pip listPackage Version-------------------------------------- -------------alembic 0.9.9altgraph 0.10.2amqp 2.2.2aniso8601 1.2.1anyjson 0.3.3appnope 0.1.0asn1crypto 0.24.0aspy.yaml 1.1.1 查看指定包信息 123456789101112[root@bash ~]# pip show numpyName: numpyVersion: 1.8.0rc1Summary: NumPy: array processing for numbers, strings, records, and objects.Home-page: http://www.numpy.orgAuthor: NumPy DevelopersAuthor-email: numpy-discussion@scipy.orgLicense: BSDLocation: /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/pythonRequires:Required-by: wordcloud, matplotlib 搜索1pip search numpy 查看版本123[root@bash ~]# pip --versionpip 19.2.3 from /Library/Python/2.7/site-packages/pip (python 2.7) 配置 建立pip配置文件 123mkdir ~/.pipcd ~/.piptouch pip.conf 编辑pip配置文件 1vim ~/.pip/pip.conf 本人配置文件： 123456789101112131415[global]index-url=http://pypi.douban.com/simpletimeout=90disable-pip-version-check=trueretries=3cache-dir=~/.pip/cache/download-cache=~/.pip/cacheignore-installed=trueno-dependencies=yes[install]trusted-host = pypi.douban.com[list]format=columns 常用命令 安装指定源指定包 1pip install dateutil -i http://pypi.python.org/simple --trusted-host pypi.python.org 安装下载wheel包 whl包文件下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/ 1python -m pip install Pillow-4.0.0-cp27-cp27m-win_amd64.whl 学习参考pip官网：https://pypi.org/project/pip/whl包下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/ pip源： 清华大学：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.aliyun.com/pypi/simple/ 豆瓣：http://pypi.douban.com/simple/]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PIP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之增强篇-awk]]></title>
    <url>%2Farticles%2F35054%2F</url>
    <content type="text"><![CDATA[简介 awk不止是一个命令，其实更像是一个工具。 Linux AWK 高级教程系列 查看日志 如果你是做后端、运维，想必听说过awk，grep，sed等日志分析命令，今天给大家带来awk的详细用法。简单说一下原理，执行【awk + 文件】会把文件内容按行进行读取，行内容以指定的分隔符进行切割（默认是空格），切开的部分再进行各种分析处理。工作上我主要用来做nginx的access-log日志的分析，非常好用，熟练使用之后，在解析日志、文本方面你就会如鱼得水。 推荐指数1🌟🌟🌟🌟🌟 使用方法 awk -F ‘分隔符’ ‘相关命令’ 文件1,文件2,… cat 文件 | awk -F ‘分隔符’ ‘相关命令’ 分隔符 awk会依据-F后的参数‘’对数据进行切割，常见的分隔符空格(‘ ’)、冒号(‘:’)、关键字，都为英文字符。 内置变量 变量 说明 指数 $0 当前记录内容（作为单个变量） 🌟 $1~$n 当前记录的第n个字段，字段间由-F参数分隔 🌟🌟🌟 NF 当前记录中的字段个数，就是有多少列 🌟 NR 已经读出的记录数，就是行号，从1开始 🌟🌟 FNR 当前总记录数 🌟 FS 输入字段分隔符 默认是空格 🌟 OFS 输出字段分隔符 默认也是空格 RS 输入的记录他隔符默 认为换行符 ORS 输出的记录分隔符，默认为换行符 FILENAME 当前输入文件的名字 🌟 相关命令 通用方式：‘BEGIN {print “name, count”} {print $1”,”$7;print $0;} END {print “end——“}’ print：打印输出 printf：格式化打印输出(print format) begin：第一行，主要用来打印头部 end：末尾一行，主要用来打印结束标识 中间部分：可执行多行语句，每个语句以；结束命令需要在单引号‘’内，有begin、end、中间3部门，begin &amp;&amp; end可省略 基础使用环境：MacOs 文件：/etc/passwd 显示所有用户名 命令：cat /etc/passwd |awk -F ‘:’ ‘{print $1}’小解： $1：分割的后的第1个变量 用户与对应的shell 命令：cat /etc/passwd |awk -F ‘:’ ‘BEGIN {print “start=========”} {print $1”,”$7} END {print “end——“}’小解： $7：分割的后的第7个变量 begin：输出的第一行标识 end：输出的结束标识(图片未显示完全) 统计/etc/passwd:文件名，行号，列数 命令：cat /etc/passwd |awk -F ‘:’ ‘BEGIN {print “start==========================”} {print “filename:” FILENAME “,linenumber:” NR “,columns:” NF “,linecontent:”$0}’小解： $0：当前行的记录 FILENAME：文件名称 NR：当前记录的行数 NF：当前记录中的字段个数 统计用户数量 命令：cat /etc/passwd |awk -F ‘:’ ‘BEGIN {print “start==========================”} {print “filename:” FILENAME “,linenumber:” NR “,columns:” NF “,linecontent:”$0}’小解： $0：当前行的记录 FILENAME：文件名称 NR：当前记录的行数 NF：当前记录中的字段个数 命令：cat /etc/passwd | awk ‘{count++;} END{print “user count is “, count}’ 实战解析nginx的access.log直接引用本人现在负责的项目日志进行分析，reality &amp;&amp; reliable ！！！ demo1 统计不同类型require请求的次数：cat isapi-access.log | awk -F “require=|&amp;” ‘{c[$2]+=1;} END{for (i in c) printf”%d\t%s\n”,c[i], i;}’ | sort -nr | head -n 20统计ip的请求次数：cat isapi-access.log | awk -F “ “ ‘{c[$1]+=1;} END{for (i in c) printf”%d\t%s\n”,c[i], i;}’ | sort -nr | head -n 20 demo2 统计不同类型请求次数awk ‘{c[$7]+=1;} END{for (i in c) printf”%d\t%s\n”,c[i], i;}’ psapproval-access.log | sort -nr统计ip的请求次数：awk ‘{ips[$1]+=1;} END{for (ip in ips) printf(“%d\t%s\n”,ips[ip], ip);}’ /home/q/var/log/psapproval-access.log | sort -nr 命令小解 cat：查看文件 awk：分析命令 sort：排序 head：查看文件，但是打开的是文件的前XX行 相关连接 isapi_access.log：https://github.com/GIS90/project_data_ref/blob/master/isapi_access.log psapproval_access.log：https://github.com/GIS90/project_data_ref/blob/master/psapproval_access.log 追加说明本人对awk也是初步了解，如果有不对的地方，欢迎大家留言，一起share。。。。。。待续]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux增强篇</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正常点6、7下班【文】]]></title>
    <url>%2Farticles%2F15891%2F</url>
    <content type="text"><![CDATA[纯文笑话 面试去哪儿网offer拿到手之后，就问hr，咱们这边一般几点下班，hr说一般6、7点，也可以吃个饭回来打个卡再走。md入职后10天了，lz才发现原来hr说的是自己😄😄😄。 不要走得太快，错过沿路的风景，适当娱乐，继续奔波未来的路程！！！]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>纯文笑话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的列表推导式]]></title>
    <url>%2Farticles%2F56827%2F</url>
    <content type="text"><![CDATA[Python语法糖 列表推导式 装逼语句 定义 列表推导式，是Python的一种独有特性之一，可以从一个列表（python数据结，熟称数组：[1, 2]）构构建出一个新的列表结果，构架过程中可以经过简单的数据处理。在2与3版本都支持。12345alist = range(1, 10)odd = [i for i in alist if i % 2 == 1]print odd[1, 3, 5, 7, 9] 格式 格式一 [表达式 for 变量 in 列表 if 条件] if 用于数据过滤 表达式 用于数据处理 格式二 [表达式if if 条件 else 表达式else for 变量 in 列表] 示例示例列表：alist = [‘abcd’, ‘bcd’, ‘cd’, ‘d’] 列表所有元素转大写 123[x.upper() for x in alist][&apos;ABCD&apos;, &apos;BCD&apos;, &apos;CD&apos;, &apos;D&apos;] 列表元素长度大于3的转大写123new_big_al = [x.upper() for x in alist if len(x) &gt; 3][&apos;ABCD&apos;] for嵌套123[x + y for x in [1, 2] for y in [1, 2, 3]][2, 3, 4, 3, 4, 5] for嵌套 + if 123[x + y for x in [1, 2] if x % 2 == 0 for y in [1, 2, 3] if y % 2 == 1][3, 5]]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之基础篇-tar]]></title>
    <url>%2Farticles%2F29844%2F</url>
    <content type="text"><![CDATA[Linux基础教程系列 tape archive 打包、压缩 tape archive 简介 学习tar的用法【tar 参数 文件名 文件目录】 介绍今天学习的命令跟文件打包、压缩、解压相关，而且特别提醒一下打包与解压缩不是一码事。打个比方，打包就把一堆文件、文件夹等放在一块；压缩就是把文件进行换种格式进行存储，目的是为了减小size。在linux系统下，常用的一个命令tar，包含了以上的所有功能，在日常维护中非常常用，功能十分强大。当然，你也可以使用gzip、bzip等解压缩命令，但是一个tar就可以搞定所有事，何乐而不为。tar打包后的文件通常以.tar进行结尾，压缩而是相对于文件格式而定，通常有.bz、.gz、.Z等等。 推荐指数1🌟🌟🌟🌟🌟 正文这个命令用的频率很大，可以打包、压缩单文件、多个文件、多目录、文件+目录，建议记住常用参数，如果记不住，那么就多敲命令，熟能生巧。 格式【tar 参数 文件名 文件目录】 参数说明这个命令的参数相对来说还是比较多的，我这里列举了常用的参数，如果有兴趣查看全部参数的同学请man tar或者自行百度。 -c 创建一个新的压缩文件。 -x 解压文件，文件是压缩格式，与-c相反。 -t 显示压缩文件的内容，对于只想查看却不想解压使用这个即可，常用。 -z 解压gzip格式的文件。 -j 解压bzip2格式的文件。 -Z 解压.Z格式的文件。 -p 保持原文件的原来属性（属性不会依据使用者而变） -v 显示打包、压缩、解压文件的详细过程。 -f 指定压缩文件，通常会写上文件名，-f可省略。 –exclude FILE 在压缩的过程中，排除指定的文件不进行打包、压缩 常用命令 解包 &amp;&amp; 打包 12tar xvf file_name.tartar cvf file_name.tar file1 file2 dir1 dir2 ... .tar.gz格式 解压：1tar zxvf file_name.tar.gz 压缩：1tar zcvf file_name.tar.gz file1 file2 dir1 dir2 ... .tar.bz格式 解压：1tar jxvf file_name.tar.bz 压缩：1tar jcvf file_name.tar.bz file1 file2 dir1 dir2 ... .tar.Z格式 解压：1tar Zxvf file_name.tar.Z 压缩：1tar Zcvf file_name.tar.Z file1 file2 dir1 dir2 ... 查看打包、压缩文件 主要用了-t参数，面对不同的压缩文件，更改对应参数：1tar -ztvf file.tar.gz 排除部分文件 压缩指定文件夹file下的文件，但是排除file目录的子文件sub_file。1tar -zcvf file.tar.gz file/* --exclude file/sub_file 说明123tar -cvf file.tar file1 file2 ...tar -zcvf file.tar.gz file1 file2 ...tar -zxvf file.tar.gz 第一条：打包文件 &amp;&amp; 不压缩第二条：打包 &amp;&amp; gzip格式压缩第三条：gzip格式解压 压缩-c（compress）解压-x查看-t压缩/解压格式：z-zip（常用）、j-bz、.Z-.Z 补充.rar、.zip格式的日常经常遇到，这里简单说明一下怎么处理 .zip 主要用zip &amp;&amp; unzip命令。解压：1unzip file_name.zip 压缩：1zip file_name.zip file1 file2 dir1 dir2 ... .rar 主要用rar命令。解压：1rar x file_name.rar 压缩：1rar a file_name.rar file1 file2 dir1 dir2 ... 学习多说一句涉及到文件权限等文件，记得一定要加-p参数，tar打包、压缩文件进行传输，不会影响文件的用户、用户组、权限等信息，之前直接传输文件，导致用户、权限都发生改变了，趟过坑，不了解的同学注意一下。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之基础篇-cd]]></title>
    <url>%2Farticles%2F42764%2F</url>
    <content type="text"><![CDATA[Linux change dir 基础教程系列 change dir 简介 学习cd的用法【cd 目录】 介绍前篇关于linxu的文章，介绍linux最常用的命令之一的ls，本篇介绍一下它的兄弟cd。这个命令用的太多了，我推测的全拼应该是change dir，没有查资料，如果错了，欢迎留言。 正文格式1cd [目录名] 参数说明没用过参数，下面学习中有个cd用法的介绍，有兴趣的可以看看。 常用命令 基本 1cd 目录 可以是相对路径，也可以是绝对路径 根目录 1cd / 用户home目录 12cdcd ~ 返回上级 1cd .. 多个上级 1cd ../../.. 返回切换的上一个目录 1cd - 这个命令平时用的相对较多。 补充 “~”表示为用户home目录 “.”表示当前所在的目录 “..”表示当前目录的上一层目录 学习参数：https://www.computerhope.com/unix/ucd.htm]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习之基础篇-ls]]></title>
    <url>%2Farticles%2F22857%2F</url>
    <content type="text"><![CDATA[linux list file 基础教程系列 list file 简介 学习ls的用法【ls - list directory contents】 介绍linux最常用的2个命令：ls &amp;&amp; cd。ls是打印当前目录/指定目录文件list的命令，全拼list。为何是文件呢，正所谓在linux中一切皆文件。 ls命令不仅可以查看linux文件的类型、大小、权限等各种信息，而且最主要的是日常使用频率最高的命令之一。 正文格式1ls [参数][目录] 参数说明选用了一些自认为常用的参数进行说明，详细的请自行man ls进行查看。翻译过程中，使用了fanyi.baidu.com，如果不对，请见谅！ -a, –all Eng：do not ignore entries starting with。Chi：列出目录下的所有文件，包括隐含文件（.开头）。 -d, –directory Eng：list directories themselves, not their contents。Chi：列出目录本身，对于列出目录包含的哪有目录很有用，后面常用命令会讲到。 -F, –classify-p, –indicator-style=slash Eng：append / indicator to directories。Chi：2个参数是一样的效果，放到一起说了，都是在目录后面加个“/”作为结束标识。 -h, –human-readable Eng：with -l, print sizes in human readable format (e.g., 1K 234M 2G)。Chi：与l参数一起使用，就是文件大小变得可读性更高。 -i, –inode Eng：print the index number of each file。Chi：经常与l参数使用，列出文件的存储节点id，一般情况用不上，但是有必要知晓一下。 -l-o Eng：use a long listing format。Chi：常用的参数没有之一，经常与h一起使用，列举文件的类型、大小、权限等各种信息。 -L Eng： when showing file information for a symbolic link, show information for the file the link references rather than for the link itself。Chi：显示链接文件直接引用文件的相关信息。 -m Eng：fill width with a comma separated list of entries。Chi：用逗号分隔的列表 -n, –numeric-uid-gid Eng：like -l, but list numeric user and group IDs。Chi：与l参数显示的内容一致，但是用户、组用相应的id代替。 -r, –reverse Eng：reverse order while sorting。Chi：反序。 -R, –recursive Eng：list subdirectories recursively。Chi：是否进行递归。 -S Eng：sort by file size。Chi：按文件大小进行排序。 -t-c Eng：sort by modification time, newest firstChi：按文件的修改时间进行排序（最新优先排在前面）。 常用命令 列举文件详情，-i参数加不加都行1ll -hi total 48：所列出内容的磁盘占用空间总和值，单位为kb。第一列：drwxr-xr-x，一共10个字符，分别解释一下。第一位用来代表文件的类型：“d”代表目录，“-”代表普通文件，2-4位rwx代表该文件的属主的权限，5-7位r-x代表文件用户主所在用户组的其他用户的权限，8-10位r-x代表其他用户的权限。其中r-读、w-写、x-执行。第二列：未知（网上查资料说如果是文件就是1，如果是目录就是目录下的文件，试验过不准确）。第三列：文件所属的用户。第四列：文件所属的用户组。第五列：文件的大小，如果文件是目录则代表该目录的大小（不包括目录下的子目录和文件的大小）。第六列：该文件最近修改或者查看的时间。第七列：文件名称。 列举文件中包含的目录/文件 列举当前文件目录包含文件目录，这个命令有个弊端，就是只能列举当前文件目录下【本人暂时还不能切换目录列举，知道的同学可以留言给我】 1ll -d */ 获取指定目录下的目录，可递归，把“^d”换成“^-”就可以获取对应的文件，-R代表是否启用递归操作。 1ll /home/q/psapproval -R | grep &quot;^d&quot; 计算当前目录下的文件数和目录数，基于上面的命令加了wc -l，想要把子目录也计算进行，加上-R参数 1ls -l * |grep &quot;^d&quot;|wc -l 列举文件以及目录，用“/”区别 12ll /home/q/psapproval -Fll /home/q/psapproval -p 按时间进行排序，最新的文件在最下面 1ll -rth 文件按从小到大进行排序，最大的在下面，想要生序去掉-r参数即可。 1ll -Shr help 12man lsls --help 说明 示例中的命令我都加了指定的目录，如果是当前目录，省略即可。本文只讲解了ls常用的参数，了解更多请man ls查看。 补充 文件类型 “-”普通文件 “d”目录 “l”链接文件 “b”块设备文件 “c”字符设备文件 “s”套接字文件，主要用于sock通信用的文件 文件权限 r：读取的权限等于4，用r表示 w：写入的权限等于2，用w表示 x：执行的权限等于1，用x表示 ll命令 控制台直接执行：alias ll=’ls -l –color=auto’ 学习ls常用命令://www.tecmint.com/15-basic-ls-command-examples-in-linux/ll详解：https://blog.csdn.net/LEON1741/article/details/82386520]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python内置函数:any与all]]></title>
    <url>%2Farticles%2F4591%2F</url>
    <content type="text"><![CDATA[Python语法糖 内置方法 any all 总结 any()：有‘真’为True，全‘假’为False，iterable为空是Falseall()：有‘假’为False，全‘真’为True，iterable为空是True 正文这两个函数的参数都是iterable，也就是list或者tuple，接下来分别详细介绍一下。 any iterable的任何元素只要有一个不为False、0、’’，返回True；否则元素都为False、0、’’或全为空，则any(iterable)为False。也就是说只有所有的iterable都为’假’，则any(iterable)为False。 当iterable为空的时候，函数返回值为False 代码all iterable的所有元素都不为False、’’、0或者iterable为空，则all(iterable)为True，也就是说只要iterable元素有一个为”假”，则为False。 当iterable为空的时候，函数返回值为True 代码 学习 any：https://www.programiz.com/python-programming/methods/built-in/any all：https://www.programiz.com/python-programming/methods/built-in/all]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop1.2.1集群安装]]></title>
    <url>%2Farticles%2F36621%2F</url>
    <content type="text"><![CDATA[Hadoop1.2.1 + Python2.7 + Ubuntu15.10 Hadoop1 Python2 Ubuntu15 大数据 摘要最近BigData貌似很火，本人也跟着一起凑凑热闹，初学hadoop，由于Ubuntu对于python的支持很好，个人也觉得Ubuntu确实不错，所以使用的是Ubuntu15.10系统，处理大数据采用python + hadoop的方式进行处理。 版本信息 name vsersion remark Ubuntu 15.10 系统的版本 Python 2.7 开发语言 JDK 1.7 hadoop运行的基础环境 Hadoop 1.2.1 大数据处理工具 VMware 6.0 虚拟机 正文本文主要讲述hadoop集群的安装过程，有什么不准确之处可以留言，一起交流share。 虚拟机安装首先VMware上安装4台虚拟机，分别是Ubuntu15.10系统，具体安装百度即可so easy。安装时候对电脑的机器名直接命名为master，node01，node02，node03（1个主节点，3个子节点），接下来2-7的操作是针对于这4台虚拟机分别进行同样的操作。 创建hadoop用户组命令：sudo addgroup hadoop 创建hadoop用户命令：sudo adduser -ingroup hadoop回车后会提示输入新的UNIX密码，这是新建用户hadoop的密码，输入回车即可。如果不输入密码，回车后会重新提示输入密码，即密码不能为空。最后确认信息是否正确，如果没问题，输入 Y，回车即可。 添加hadoop root权限命令：sudo gedit /etc/sudoers打开sudoers 文件，在root ALL=(ALL:ALL) ALL这行下面添加：hadoop ALL=(ALL:ALL) ALL修改完保存关闭即可。 注：如果系统的gedit用不了，自行上网解决，这里给出的方案是用vi或vim。 切换到hadoop用户命令：su hadoop，输入密码即可登录hadoop用户。 安装ssh命令：sudo apt-get install openssh-server安装完成后启动ssh服务，命令：sudo /etc/init.d/ssh start查看ssh服务是否启动，命令：ps -ef | grep ssh服务存在之后，设置实现ssh免密码登录，命令：ssh-keygen -t rsa -P “”下面我们将公钥追加到authorized_keys中，它用户保存所有允许以当前用户身份登录到ssh客户端用户的公钥内容，命令：cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 登录ssh命令：ssh localhost，退出，命令：exit 安装Java环境命令：sudo apt-get install openjdk-7-jdk查看安装结果，输入命令：java -version，结果如下表示安装成功。注：java安装默认路径：/usr/lib/jvm/java-7-openjdk-amd64以上操作基于hadoop用户，并且每个电脑配置一致 hadoop配置正餐开始了，仔细看！！！ hadoop-env配置：进入到hadoop文件的conf文件夹，使用命令：sudo gedit hadoop-env.sh添加以下信息到文件中，保存即可。解释下内容：JAVA_HOME是java的安装路径，HADOOP_INSTALL是hadoop的安装路径，PATH是系统文件路径:123export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64export HADOOP_INSTALL=/usr/local/hadoopexport PATH=$PATH:/usr/local/hadoop/bin core-site.xml配置hadoop文件的conf文件夹，使用命令：sudo gedit core-site.xml添加以下信息到文件中，保存即可。 123456789101112&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs:192.168.2.139:9000&lt;/value&gt; &lt;final&gt;true&lt;/final&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/home/hadoop/hadoop/tmp&lt;/value&gt; &lt;description&gt;A base for other temporary directory&lt;/description&gt; &lt;/property&gt;&lt;/configuration&gt; hdfs-site.xml配置hadoop文件的conf文件夹，使用命令：sudo gedit hdfs-site.xml添加以下信息到文件中，保存即可。 1234567891011121314151617&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.name.dir&lt;/name&gt; &lt;value&gt;/home/hadoop/hadoop/name&lt;/value&gt; &lt;final&gt;true&lt;/final&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.data.dir&lt;/name&gt; &lt;value&gt;/home/hadoop/hadoop/data&lt;/value&gt; &lt;final&gt;true&lt;/final&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;3&lt;/value&gt; &lt;final&gt;true&lt;/final&gt; &lt;/property&gt;&lt;/configuration&gt; mapred-site.xml配置hadoop文件的conf文件夹，使用命令：sudo gedit mapred-site.xml添加以下信息到文件中，保存即可。 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapred.job.tracker&lt;/name&gt; &lt;value&gt;192.168.2.139:9001&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; master和slaves配置hadoop文件的conf文件夹，使用命令：sudo gedit master，sudo gedit slaves在master文件中添加主节点计算机名称/IP即可。在slaves文件中添加子节点计算机名称/IP即可。 复制hadoop把hadoop分别向其他机器上复制一份，放到相同目录。命令：scp（自行百度用法，这里不做详述） 建立hadoop所需文件夹在每个机器上建立所需要的文件夹，在步骤8中有core中配置的hadoop.tmp.dir文件夹，hdfs中配置的dfs.data.dir文件夹，需要进行建立以及是hadoop用户，读写权限。执行命令：sudo mkdir 格式化namenode进入到hadoop/bin目录，在主节点机器上执行命令：hadooop namenode -fomat，出现successfully字样成功，不成功大部分都是配置文件的问题。 启动hadoop在主节点机器上进入hadoop/bin目录下，执行命令:hadoop-start.sh，分别会启动NameNode,Jobtracker,SecondaryNameNode,DataNodeTaskTracker 查看hadoop在主节点机器上执行命令：jps，在主节点机器上会出现以下进程在子节点机器上执行命令：jps，在子节点机器上会出现以下进程 查看运行状态在浏览器中输入主机IP:50030，会出现hadoop运行状态。 停止hadoop在主节点机器上进入到hadoop/bin目录下，执行命令：stop-all.sh，这样hadoop停止运行。 建议本人也初学，有不对的希望大家谅解。]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Hadoop</tag>
        <tag>Ubuntu</tag>
        <tag>Python程序篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python处理ArcGIS多图层矢量裁剪]]></title>
    <url>%2Farticles%2F61166%2F</url>
    <content type="text"><![CDATA[Python ArcGIS Python脚本 矢量裁剪 今天给大家带来利用python调用ArcGIS函数实现矢量多图层裁剪，出现问题给我留言，帮你解决，不过我都调试好了，问题不大。python的使用我就不叫大家了(主要我也在自学阶段)，代码很少但是很实用，所以把自己的东西跟大家share一下，以后会陆续跟大家一起分享交流，希望对大家有帮助。 环境相关 开发语言：python2系统：win7 相关代码 # -*- coding: utf-8 -*- # 导入包 import arcpy import os import datetime startTime=datetime.datetime.now() print &quot;python tool start--------^_^---------&quot; # 裁剪文件的工作空间 InputSpace=r&quot;F:\data\fuzhou_data&quot; # 结果文件的存放目录 OutputSpace=r&quot;F:\data\fuzhou_map_Demo&quot; # 被裁剪文件路径+名称 clip_features=r&quot;F:\data\clip\clip.shp&quot; # 实现的主体，添加个变量用于处理次数 num=1 # 设置工作空间 arcpy.env.workspace=InputSpace for in_features in arcpy.ListFiles(&quot;*.shp&quot;): clipName=os.path.splitext(in_features)[0] out_features=os.path.join(OutputSpace,clipName) cluster_tolerance=&quot;0.0000001 DecimalDegrees&quot; print &quot;Execute num=&quot;, num, &quot;Chip feature is:&quot;, clipName try: arcpy.Clip_analysis(in_features, clip_features, out_features, cluster_tolerance) print &quot;Finish&quot; num=num+1 except Exception as e: print e.message endTime=datetime.datetime.now() exeTime=(endTime-startTime).seconds print &quot;sum=&quot;, num, &quot;All finish, cost time is :&quot;, exeTime,&quot;s&quot;]]></content>
      <categories>
        <category>Python</category>
        <category>ArcGIS</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python程序篇</tag>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
</search>
